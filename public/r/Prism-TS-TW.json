{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Prism-TS-TW",
  "type": "registry:block",
  "title": "Prism",
  "description": "Rotating prism with configurable intensity, size, and colors.",
  "dependencies": [
    "ogl"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Backgrounds/Prism/Prism.tsx",
      "content": "import React, { useEffect, useRef } from 'react';\r\nimport { Renderer, Triangle, Program, Mesh } from 'ogl';\r\n\r\ntype PrismProps = {\r\n  height?: number;\r\n  baseWidth?: number;\r\n  animationType?: 'rotate' | 'hover' | '3drotate';\r\n  glow?: number;\r\n  offset?: { x?: number; y?: number };\r\n  noise?: number;\r\n  transparent?: boolean;\r\n  scale?: number;\r\n  hueShift?: number;\r\n  colorFrequency?: number;\r\n  hoverStrength?: number;\r\n  inertia?: number;\r\n  bloom?: number;\r\n  suspendWhenOffscreen?: boolean;\r\n  timeScale?: number;\r\n};\r\n\r\nconst Prism: React.FC<PrismProps> = ({\r\n  height = 3.5,\r\n  baseWidth = 5.5,\r\n  animationType = 'rotate',\r\n  glow = 1,\r\n  offset = { x: 0, y: 0 },\r\n  noise = 0.5,\r\n  transparent = true,\r\n  scale = 3.6,\r\n  hueShift = 0,\r\n  colorFrequency = 1,\r\n  hoverStrength = 2,\r\n  inertia = 0.05,\r\n  bloom = 1,\r\n  suspendWhenOffscreen = false,\r\n  timeScale = 0.5\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    if (!container) return;\r\n\r\n    const H = Math.max(0.001, height);\r\n    const BW = Math.max(0.001, baseWidth);\r\n    const BASE_HALF = BW * 0.5;\r\n    const GLOW = Math.max(0.0, glow);\r\n    const NOISE = Math.max(0.0, noise);\r\n    const offX = offset?.x ?? 0;\r\n    const offY = offset?.y ?? 0;\r\n    const SAT = transparent ? 1.5 : 1;\r\n    const SCALE = Math.max(0.001, scale);\r\n    const HUE = hueShift || 0;\r\n    const CFREQ = Math.max(0.0, colorFrequency || 1);\r\n    const BLOOM = Math.max(0.0, bloom || 1);\r\n    const RSX = 1;\r\n    const RSY = 1;\r\n    const RSZ = 1;\r\n    const TS = Math.max(0, timeScale || 1);\r\n    const HOVSTR = Math.max(0, hoverStrength || 1);\r\n    const INERT = Math.max(0, Math.min(1, inertia || 0.12));\r\n\r\n    const dpr = Math.min(2, window.devicePixelRatio || 1);\r\n    const renderer = new Renderer({\r\n      dpr,\r\n      alpha: transparent,\r\n      antialias: false\r\n    });\r\n    const gl = renderer.gl;\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.BLEND);\r\n\r\n    Object.assign(gl.canvas.style, {\r\n      position: 'absolute',\r\n      inset: '0',\r\n      width: '100%',\r\n      height: '100%',\r\n      display: 'block'\r\n    } as Partial<CSSStyleDeclaration>);\r\n    container.appendChild(gl.canvas);\r\n\r\n    const vertex = /* glsl */ `\r\n      attribute vec2 position;\r\n      void main() {\r\n        gl_Position = vec4(position, 0.0, 1.0);\r\n      }\r\n    `;\r\n\r\n    const fragment = /* glsl */ `\r\n      precision highp float;\r\n\r\n      uniform vec2  iResolution;\r\n      uniform float iTime;\r\n\r\n      uniform float uHeight;\r\n      uniform float uBaseHalf;\r\n      uniform mat3  uRot;\r\n      uniform int   uUseBaseWobble;\r\n      uniform float uGlow;\r\n      uniform vec2  uOffsetPx;\r\n      uniform float uNoise;\r\n      uniform float uSaturation;\r\n      uniform float uScale;\r\n      uniform float uHueShift;\r\n      uniform float uColorFreq;\r\n      uniform float uBloom;\r\n      uniform float uCenterShift;\r\n      uniform float uInvBaseHalf;\r\n      uniform float uInvHeight;\r\n      uniform float uMinAxis;\r\n      uniform float uPxScale;\r\n      uniform float uTimeScale;\r\n\r\n      vec4 tanh4(vec4 x){\r\n        vec4 e2x = exp(2.0*x);\r\n        return (e2x - 1.0) / (e2x + 1.0);\r\n      }\r\n\r\n      float rand(vec2 co){\r\n        return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453123);\r\n      }\r\n\r\n      float sdOctaAnisoInv(vec3 p){\r\n        vec3 q = vec3(abs(p.x) * uInvBaseHalf, abs(p.y) * uInvHeight, abs(p.z) * uInvBaseHalf);\r\n        float m = q.x + q.y + q.z - 1.0;\r\n        return m * uMinAxis * 0.5773502691896258;\r\n      }\r\n\r\n      float sdPyramidUpInv(vec3 p){\r\n        float oct = sdOctaAnisoInv(p);\r\n        float halfSpace = -p.y;\r\n        return max(oct, halfSpace);\r\n      }\r\n\r\n      mat3 hueRotation(float a){\r\n        float c = cos(a), s = sin(a);\r\n        mat3 W = mat3(\r\n          0.299, 0.587, 0.114,\r\n          0.299, 0.587, 0.114,\r\n          0.299, 0.587, 0.114\r\n        );\r\n        mat3 U = mat3(\r\n           0.701, -0.587, -0.114,\r\n          -0.299,  0.413, -0.114,\r\n          -0.300, -0.588,  0.886\r\n        );\r\n        mat3 V = mat3(\r\n           0.168, -0.331,  0.500,\r\n           0.328,  0.035, -0.500,\r\n          -0.497,  0.296,  0.201\r\n        );\r\n        return W + U * c + V * s;\r\n      }\r\n\r\n      void main(){\r\n        vec2 f = (gl_FragCoord.xy - 0.5 * iResolution.xy - uOffsetPx) * uPxScale;\r\n\r\n        float z = 5.0;\r\n        float d = 0.0;\r\n\r\n        vec3 p;\r\n        vec4 o = vec4(0.0);\r\n\r\n        float centerShift = uCenterShift;\r\n        float cf = uColorFreq;\r\n\r\n        mat2 wob = mat2(1.0);\r\n        if (uUseBaseWobble == 1) {\r\n          float t = iTime * uTimeScale;\r\n          float c0 = cos(t + 0.0);\r\n          float c1 = cos(t + 33.0);\r\n          float c2 = cos(t + 11.0);\r\n          wob = mat2(c0, c1, c2, c0);\r\n        }\r\n\r\n        const int STEPS = 100;\r\n        for (int i = 0; i < STEPS; i++) {\r\n          p = vec3(f, z);\r\n          p.xz = p.xz * wob;\r\n          p = uRot * p;\r\n          vec3 q = p;\r\n          q.y += centerShift;\r\n          d = 0.1 + 0.2 * abs(sdPyramidUpInv(q));\r\n          z -= d;\r\n          o += (sin((p.y + z) * cf + vec4(0.0, 1.0, 2.0, 3.0)) + 1.0) / d;\r\n        }\r\n\r\n        o = tanh4(o * o * (uGlow * uBloom) / 1e5);\r\n\r\n        vec3 col = o.rgb;\r\n        float n = rand(gl_FragCoord.xy + vec2(iTime));\r\n        col += (n - 0.5) * uNoise;\r\n        col = clamp(col, 0.0, 1.0);\r\n\r\n        float L = dot(col, vec3(0.2126, 0.7152, 0.0722));\r\n        col = clamp(mix(vec3(L), col, uSaturation), 0.0, 1.0);\r\n\r\n        if(abs(uHueShift) > 0.0001){\r\n          col = clamp(hueRotation(uHueShift) * col, 0.0, 1.0);\r\n        }\r\n\r\n        gl_FragColor = vec4(col, o.a);\r\n      }\r\n    `;\r\n\r\n    const geometry = new Triangle(gl);\r\n    const iResBuf = new Float32Array(2);\r\n    const offsetPxBuf = new Float32Array(2);\r\n\r\n    const program = new Program(gl, {\r\n      vertex,\r\n      fragment,\r\n      uniforms: {\r\n        iResolution: { value: iResBuf },\r\n        iTime: { value: 0 },\r\n        uHeight: { value: H },\r\n        uBaseHalf: { value: BASE_HALF },\r\n        uUseBaseWobble: { value: 1 },\r\n        uRot: { value: new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]) },\r\n        uGlow: { value: GLOW },\r\n        uOffsetPx: { value: offsetPxBuf },\r\n        uNoise: { value: NOISE },\r\n        uSaturation: { value: SAT },\r\n        uScale: { value: SCALE },\r\n        uHueShift: { value: HUE },\r\n        uColorFreq: { value: CFREQ },\r\n        uBloom: { value: BLOOM },\r\n        uCenterShift: { value: H * 0.25 },\r\n        uInvBaseHalf: { value: 1 / BASE_HALF },\r\n        uInvHeight: { value: 1 / H },\r\n        uMinAxis: { value: Math.min(BASE_HALF, H) },\r\n        uPxScale: {\r\n          value: 1 / ((gl.drawingBufferHeight || 1) * 0.1 * SCALE)\r\n        },\r\n        uTimeScale: { value: TS }\r\n      }\r\n    });\r\n    const mesh = new Mesh(gl, { geometry, program });\r\n\r\n    const resize = () => {\r\n      const w = container.clientWidth || 1;\r\n      const h = container.clientHeight || 1;\r\n      renderer.setSize(w, h);\r\n      iResBuf[0] = gl.drawingBufferWidth;\r\n      iResBuf[1] = gl.drawingBufferHeight;\r\n      offsetPxBuf[0] = offX * dpr;\r\n      offsetPxBuf[1] = offY * dpr;\r\n      program.uniforms.uPxScale.value = 1 / ((gl.drawingBufferHeight || 1) * 0.1 * SCALE);\r\n    };\r\n    const ro = new ResizeObserver(resize);\r\n    ro.observe(container);\r\n    resize();\r\n\r\n    const rotBuf = new Float32Array(9);\r\n    const setMat3FromEuler = (yawY: number, pitchX: number, rollZ: number, out: Float32Array) => {\r\n      const cy = Math.cos(yawY),\r\n        sy = Math.sin(yawY);\r\n      const cx = Math.cos(pitchX),\r\n        sx = Math.sin(pitchX);\r\n      const cz = Math.cos(rollZ),\r\n        sz = Math.sin(rollZ);\r\n      const r00 = cy * cz + sy * sx * sz;\r\n      const r01 = -cy * sz + sy * sx * cz;\r\n      const r02 = sy * cx;\r\n\r\n      const r10 = cx * sz;\r\n      const r11 = cx * cz;\r\n      const r12 = -sx;\r\n\r\n      const r20 = -sy * cz + cy * sx * sz;\r\n      const r21 = sy * sz + cy * sx * cz;\r\n      const r22 = cy * cx;\r\n\r\n      out[0] = r00;\r\n      out[1] = r10;\r\n      out[2] = r20;\r\n      out[3] = r01;\r\n      out[4] = r11;\r\n      out[5] = r21;\r\n      out[6] = r02;\r\n      out[7] = r12;\r\n      out[8] = r22;\r\n      return out;\r\n    };\r\n\r\n    const NOISE_IS_ZERO = NOISE < 1e-6;\r\n    let raf = 0;\r\n    const t0 = performance.now();\r\n    const startRAF = () => {\r\n      if (raf) return;\r\n      raf = requestAnimationFrame(render);\r\n    };\r\n    const stopRAF = () => {\r\n      if (!raf) return;\r\n      cancelAnimationFrame(raf);\r\n      raf = 0;\r\n    };\r\n\r\n    const rnd = () => Math.random();\r\n    const wX = (0.3 + rnd() * 0.6) * RSX;\r\n    const wY = (0.2 + rnd() * 0.7) * RSY;\r\n    const wZ = (0.1 + rnd() * 0.5) * RSZ;\r\n    const phX = rnd() * Math.PI * 2;\r\n    const phZ = rnd() * Math.PI * 2;\r\n\r\n    let yaw = 0,\r\n      pitch = 0,\r\n      roll = 0;\r\n    let targetYaw = 0,\r\n      targetPitch = 0;\r\n    const lerp = (a: number, b: number, t: number) => a + (b - a) * t;\r\n\r\n    const pointer = { x: 0, y: 0, inside: true };\r\n    const onMove = (e: PointerEvent) => {\r\n      const ww = Math.max(1, window.innerWidth);\r\n      const wh = Math.max(1, window.innerHeight);\r\n      const cx = ww * 0.5;\r\n      const cy = wh * 0.5;\r\n      const nx = (e.clientX - cx) / (ww * 0.5);\r\n      const ny = (e.clientY - cy) / (wh * 0.5);\r\n      pointer.x = Math.max(-1, Math.min(1, nx));\r\n      pointer.y = Math.max(-1, Math.min(1, ny));\r\n      pointer.inside = true;\r\n    };\r\n    const onLeave = () => {\r\n      pointer.inside = false;\r\n    };\r\n    const onBlur = () => {\r\n      pointer.inside = false;\r\n    };\r\n\r\n    let onPointerMove: ((e: PointerEvent) => void) | null = null;\r\n    if (animationType === 'hover') {\r\n      onPointerMove = (e: PointerEvent) => {\r\n        onMove(e);\r\n        startRAF();\r\n      };\r\n      window.addEventListener('pointermove', onPointerMove, { passive: true });\r\n      window.addEventListener('mouseleave', onLeave);\r\n      window.addEventListener('blur', onBlur);\r\n      program.uniforms.uUseBaseWobble.value = 0;\r\n    } else if (animationType === '3drotate') {\r\n      program.uniforms.uUseBaseWobble.value = 0;\r\n    } else {\r\n      program.uniforms.uUseBaseWobble.value = 1;\r\n    }\r\n\r\n    const render = (t: number) => {\r\n      const time = (t - t0) * 0.001;\r\n      program.uniforms.iTime.value = time;\r\n\r\n      let continueRAF = true;\r\n\r\n      if (animationType === 'hover') {\r\n        const maxPitch = 0.6 * HOVSTR;\r\n        const maxYaw = 0.6 * HOVSTR;\r\n        targetYaw = (pointer.inside ? -pointer.x : 0) * maxYaw;\r\n        targetPitch = (pointer.inside ? pointer.y : 0) * maxPitch;\r\n        const prevYaw = yaw;\r\n        const prevPitch = pitch;\r\n        const prevRoll = roll;\r\n        yaw = lerp(prevYaw, targetYaw, INERT);\r\n        pitch = lerp(prevPitch, targetPitch, INERT);\r\n        roll = lerp(prevRoll, 0, 0.1);\r\n        program.uniforms.uRot.value = setMat3FromEuler(yaw, pitch, roll, rotBuf);\r\n\r\n        if (NOISE_IS_ZERO) {\r\n          const settled =\r\n            Math.abs(yaw - targetYaw) < 1e-4 && Math.abs(pitch - targetPitch) < 1e-4 && Math.abs(roll) < 1e-4;\r\n          if (settled) continueRAF = false;\r\n        }\r\n      } else if (animationType === '3drotate') {\r\n        const tScaled = time * TS;\r\n        yaw = tScaled * wY;\r\n        pitch = Math.sin(tScaled * wX + phX) * 0.6;\r\n        roll = Math.sin(tScaled * wZ + phZ) * 0.5;\r\n        program.uniforms.uRot.value = setMat3FromEuler(yaw, pitch, roll, rotBuf);\r\n        if (TS < 1e-6) continueRAF = false;\r\n      } else {\r\n        rotBuf[0] = 1;\r\n        rotBuf[1] = 0;\r\n        rotBuf[2] = 0;\r\n        rotBuf[3] = 0;\r\n        rotBuf[4] = 1;\r\n        rotBuf[5] = 0;\r\n        rotBuf[6] = 0;\r\n        rotBuf[7] = 0;\r\n        rotBuf[8] = 1;\r\n        program.uniforms.uRot.value = rotBuf;\r\n        if (TS < 1e-6) continueRAF = false;\r\n      }\r\n\r\n      renderer.render({ scene: mesh });\r\n      if (continueRAF) {\r\n        raf = requestAnimationFrame(render);\r\n      } else {\r\n        raf = 0;\r\n      }\r\n    };\r\n\r\n    interface PrismContainer extends HTMLElement {\r\n      __prismIO?: IntersectionObserver\r\n    }\r\n\r\n    if (suspendWhenOffscreen) {\r\n      const io = new IntersectionObserver(entries => {\r\n        const vis = entries.some(e => e.isIntersecting);\r\n        if (vis) startRAF();\r\n        else stopRAF();\r\n      });\r\n      io.observe(container);\r\n      startRAF();\r\n      (container as PrismContainer).__prismIO = io;\r\n    } else {\r\n      startRAF();\r\n    }\r\n\r\n    return () => {\r\n      stopRAF();\r\n      ro.disconnect();\r\n      if (animationType === 'hover') {\r\n        if (onPointerMove) window.removeEventListener('pointermove', onPointerMove as EventListener);\r\n        window.removeEventListener('mouseleave', onLeave);\r\n        window.removeEventListener('blur', onBlur);\r\n      }\r\n      if (suspendWhenOffscreen) {\r\n        const io = (container as PrismContainer).__prismIO as IntersectionObserver | undefined;\r\n        if (io) io.disconnect();\r\n        delete (container as PrismContainer).__prismIO;\r\n      }\r\n      if (gl.canvas.parentElement === container) container.removeChild(gl.canvas);\r\n    };\r\n  }, [\r\n    height,\r\n    baseWidth,\r\n    animationType,\r\n    glow,\r\n    noise,\r\n    offset?.x,\r\n    offset?.y,\r\n    scale,\r\n    transparent,\r\n    hueShift,\r\n    colorFrequency,\r\n    timeScale,\r\n    hoverStrength,\r\n    inertia,\r\n    bloom,\r\n    suspendWhenOffscreen\r\n  ]);\r\n\r\n  return <div className=\"w-full h-full relative\" ref={containerRef} />;\r\n};\r\n\r\nexport default Prism;\r\n",
      "type": "registry:component"
    }
  ]
}