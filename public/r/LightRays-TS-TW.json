{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "LightRays-TS-TW",
  "type": "registry:block",
  "title": "LightRays",
  "description": "Volumetric light rays/beams with customizable direction.",
  "dependencies": [
    "ogl"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Backgrounds/LightRays/LightRays.tsx",
      "content": "import { useRef, useEffect, useState } from 'react';\r\nimport { Renderer, Program, Triangle, Mesh } from 'ogl';\r\n\r\nexport type RaysOrigin =\r\n  | 'top-center'\r\n  | 'top-left'\r\n  | 'top-right'\r\n  | 'right'\r\n  | 'left'\r\n  | 'bottom-center'\r\n  | 'bottom-right'\r\n  | 'bottom-left';\r\n\r\ninterface LightRaysProps {\r\n  raysOrigin?: RaysOrigin;\r\n  raysColor?: string;\r\n  raysSpeed?: number;\r\n  lightSpread?: number;\r\n  rayLength?: number;\r\n  pulsating?: boolean;\r\n  fadeDistance?: number;\r\n  saturation?: number;\r\n  followMouse?: boolean;\r\n  mouseInfluence?: number;\r\n  noiseAmount?: number;\r\n  distortion?: number;\r\n  className?: string;\r\n}\r\n\r\nconst DEFAULT_COLOR = '#ffffff';\r\n\r\nconst hexToRgb = (hex: string): [number, number, number] => {\r\n  const m = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return m ? [parseInt(m[1], 16) / 255, parseInt(m[2], 16) / 255, parseInt(m[3], 16) / 255] : [1, 1, 1];\r\n};\r\n\r\nconst getAnchorAndDir = (\r\n  origin: RaysOrigin,\r\n  w: number,\r\n  h: number\r\n): { anchor: [number, number]; dir: [number, number] } => {\r\n  const outside = 0.2;\r\n  switch (origin) {\r\n    case 'top-left':\r\n      return { anchor: [0, -outside * h], dir: [0, 1] };\r\n    case 'top-right':\r\n      return { anchor: [w, -outside * h], dir: [0, 1] };\r\n    case 'left':\r\n      return { anchor: [-outside * w, 0.5 * h], dir: [1, 0] };\r\n    case 'right':\r\n      return { anchor: [(1 + outside) * w, 0.5 * h], dir: [-1, 0] };\r\n    case 'bottom-left':\r\n      return { anchor: [0, (1 + outside) * h], dir: [0, -1] };\r\n    case 'bottom-center':\r\n      return { anchor: [0.5 * w, (1 + outside) * h], dir: [0, -1] };\r\n    case 'bottom-right':\r\n      return { anchor: [w, (1 + outside) * h], dir: [0, -1] };\r\n    default: // \"top-center\"\r\n      return { anchor: [0.5 * w, -outside * h], dir: [0, 1] };\r\n  }\r\n};\r\n\r\nconst LightRays: React.FC<LightRaysProps> = ({\r\n  raysOrigin = 'top-center',\r\n  raysColor = DEFAULT_COLOR,\r\n  raysSpeed = 1,\r\n  lightSpread = 1,\r\n  rayLength = 2,\r\n  pulsating = false,\r\n  fadeDistance = 1.0,\r\n  saturation = 1.0,\r\n  followMouse = true,\r\n  mouseInfluence = 0.1,\r\n  noiseAmount = 0.0,\r\n  distortion = 0.0,\r\n  className = ''\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const uniformsRef = useRef<any>(null);\r\n  const rendererRef = useRef<Renderer | null>(null);\r\n  const mouseRef = useRef({ x: 0.5, y: 0.5 });\r\n  const smoothMouseRef = useRef({ x: 0.5, y: 0.5 });\r\n  const animationIdRef = useRef<number | null>(null);\r\n  const meshRef = useRef<any>(null);\r\n  const cleanupFunctionRef = useRef<(() => void) | null>(null);\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const observerRef = useRef<IntersectionObserver | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!containerRef.current) return;\r\n\r\n    observerRef.current = new IntersectionObserver(\r\n      entries => {\r\n        const entry = entries[0];\r\n        setIsVisible(entry.isIntersecting);\r\n      },\r\n      { threshold: 0.1 }\r\n    );\r\n\r\n    observerRef.current.observe(containerRef.current);\r\n\r\n    return () => {\r\n      if (observerRef.current) {\r\n        observerRef.current.disconnect();\r\n        observerRef.current = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!isVisible || !containerRef.current) return;\r\n\r\n    if (cleanupFunctionRef.current) {\r\n      cleanupFunctionRef.current();\r\n      cleanupFunctionRef.current = null;\r\n    }\r\n\r\n    const initializeWebGL = async () => {\r\n      if (!containerRef.current) return;\r\n\r\n      await new Promise(resolve => setTimeout(resolve, 10));\r\n\r\n      if (!containerRef.current) return;\r\n\r\n      const renderer = new Renderer({\r\n        dpr: Math.min(window.devicePixelRatio, 2),\r\n        alpha: true\r\n      });\r\n      rendererRef.current = renderer;\r\n\r\n      const gl = renderer.gl;\r\n      gl.canvas.style.width = '100%';\r\n      gl.canvas.style.height = '100%';\r\n\r\n      while (containerRef.current.firstChild) {\r\n        containerRef.current.removeChild(containerRef.current.firstChild);\r\n      }\r\n      containerRef.current.appendChild(gl.canvas);\r\n\r\n      const vert = `\r\nattribute vec2 position;\r\nvarying vec2 vUv;\r\nvoid main() {\r\n  vUv = position * 0.5 + 0.5;\r\n  gl_Position = vec4(position, 0.0, 1.0);\r\n}`;\r\n\r\n      const frag = `precision highp float;\r\n\r\nuniform float iTime;\r\nuniform vec2  iResolution;\r\n\r\nuniform vec2  rayPos;\r\nuniform vec2  rayDir;\r\nuniform vec3  raysColor;\r\nuniform float raysSpeed;\r\nuniform float lightSpread;\r\nuniform float rayLength;\r\nuniform float pulsating;\r\nuniform float fadeDistance;\r\nuniform float saturation;\r\nuniform vec2  mousePos;\r\nuniform float mouseInfluence;\r\nuniform float noiseAmount;\r\nuniform float distortion;\r\n\r\nvarying vec2 vUv;\r\n\r\nfloat noise(vec2 st) {\r\n  return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\r\n}\r\n\r\nfloat rayStrength(vec2 raySource, vec2 rayRefDirection, vec2 coord,\r\n                  float seedA, float seedB, float speed) {\r\n  vec2 sourceToCoord = coord - raySource;\r\n  vec2 dirNorm = normalize(sourceToCoord);\r\n  float cosAngle = dot(dirNorm, rayRefDirection);\r\n\r\n  float distortedAngle = cosAngle + distortion * sin(iTime * 2.0 + length(sourceToCoord) * 0.01) * 0.2;\r\n  \r\n  float spreadFactor = pow(max(distortedAngle, 0.0), 1.0 / max(lightSpread, 0.001));\r\n\r\n  float distance = length(sourceToCoord);\r\n  float maxDistance = iResolution.x * rayLength;\r\n  float lengthFalloff = clamp((maxDistance - distance) / maxDistance, 0.0, 1.0);\r\n  \r\n  float fadeFalloff = clamp((iResolution.x * fadeDistance - distance) / (iResolution.x * fadeDistance), 0.5, 1.0);\r\n  float pulse = pulsating > 0.5 ? (0.8 + 0.2 * sin(iTime * speed * 3.0)) : 1.0;\r\n\r\n  float baseStrength = clamp(\r\n    (0.45 + 0.15 * sin(distortedAngle * seedA + iTime * speed)) +\r\n    (0.3 + 0.2 * cos(-distortedAngle * seedB + iTime * speed)),\r\n    0.0, 1.0\r\n  );\r\n\r\n  return baseStrength * lengthFalloff * fadeFalloff * spreadFactor * pulse;\r\n}\r\n\r\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\r\n  vec2 coord = vec2(fragCoord.x, iResolution.y - fragCoord.y);\r\n  \r\n  vec2 finalRayDir = rayDir;\r\n  if (mouseInfluence > 0.0) {\r\n    vec2 mouseScreenPos = mousePos * iResolution.xy;\r\n    vec2 mouseDirection = normalize(mouseScreenPos - rayPos);\r\n    finalRayDir = normalize(mix(rayDir, mouseDirection, mouseInfluence));\r\n  }\r\n\r\n  vec4 rays1 = vec4(1.0) *\r\n               rayStrength(rayPos, finalRayDir, coord, 36.2214, 21.11349,\r\n                           1.5 * raysSpeed);\r\n  vec4 rays2 = vec4(1.0) *\r\n               rayStrength(rayPos, finalRayDir, coord, 22.3991, 18.0234,\r\n                           1.1 * raysSpeed);\r\n\r\n  fragColor = rays1 * 0.5 + rays2 * 0.4;\r\n\r\n  if (noiseAmount > 0.0) {\r\n    float n = noise(coord * 0.01 + iTime * 0.1);\r\n    fragColor.rgb *= (1.0 - noiseAmount + noiseAmount * n);\r\n  }\r\n\r\n  float brightness = 1.0 - (coord.y / iResolution.y);\r\n  fragColor.x *= 0.1 + brightness * 0.8;\r\n  fragColor.y *= 0.3 + brightness * 0.6;\r\n  fragColor.z *= 0.5 + brightness * 0.5;\r\n\r\n  if (saturation != 1.0) {\r\n    float gray = dot(fragColor.rgb, vec3(0.299, 0.587, 0.114));\r\n    fragColor.rgb = mix(vec3(gray), fragColor.rgb, saturation);\r\n  }\r\n\r\n  fragColor.rgb *= raysColor;\r\n}\r\n\r\nvoid main() {\r\n  vec4 color;\r\n  mainImage(color, gl_FragCoord.xy);\r\n  gl_FragColor  = color;\r\n}`;\r\n\r\n      const uniforms = {\r\n        iTime: { value: 0 },\r\n        iResolution: { value: [1, 1] },\r\n\r\n        rayPos: { value: [0, 0] },\r\n        rayDir: { value: [0, 1] },\r\n\r\n        raysColor: { value: hexToRgb(raysColor) },\r\n        raysSpeed: { value: raysSpeed },\r\n        lightSpread: { value: lightSpread },\r\n        rayLength: { value: rayLength },\r\n        pulsating: { value: pulsating ? 1.0 : 0.0 },\r\n        fadeDistance: { value: fadeDistance },\r\n        saturation: { value: saturation },\r\n        mousePos: { value: [0.5, 0.5] },\r\n        mouseInfluence: { value: mouseInfluence },\r\n        noiseAmount: { value: noiseAmount },\r\n        distortion: { value: distortion }\r\n      };\r\n      uniformsRef.current = uniforms;\r\n\r\n      const geometry = new Triangle(gl);\r\n      const program = new Program(gl, {\r\n        vertex: vert,\r\n        fragment: frag,\r\n        uniforms\r\n      });\r\n      const mesh = new Mesh(gl, { geometry, program });\r\n      meshRef.current = mesh;\r\n\r\n      const updatePlacement = () => {\r\n        if (!containerRef.current || !renderer) return;\r\n\r\n        renderer.dpr = Math.min(window.devicePixelRatio, 2);\r\n\r\n        const { clientWidth: wCSS, clientHeight: hCSS } = containerRef.current;\r\n        renderer.setSize(wCSS, hCSS);\r\n\r\n        const dpr = renderer.dpr;\r\n        const w = wCSS * dpr;\r\n        const h = hCSS * dpr;\r\n\r\n        uniforms.iResolution.value = [w, h];\r\n\r\n        const { anchor, dir } = getAnchorAndDir(raysOrigin, w, h);\r\n        uniforms.rayPos.value = anchor;\r\n        uniforms.rayDir.value = dir;\r\n      };\r\n\r\n      const loop = (t: number) => {\r\n        if (!rendererRef.current || !uniformsRef.current || !meshRef.current) {\r\n          return;\r\n        }\r\n\r\n        uniforms.iTime.value = t * 0.001;\r\n\r\n        if (followMouse && mouseInfluence > 0.0) {\r\n          const smoothing = 0.92;\r\n\r\n          smoothMouseRef.current.x = smoothMouseRef.current.x * smoothing + mouseRef.current.x * (1 - smoothing);\r\n          smoothMouseRef.current.y = smoothMouseRef.current.y * smoothing + mouseRef.current.y * (1 - smoothing);\r\n\r\n          uniforms.mousePos.value = [smoothMouseRef.current.x, smoothMouseRef.current.y];\r\n        }\r\n\r\n        try {\r\n          renderer.render({ scene: mesh });\r\n          animationIdRef.current = requestAnimationFrame(loop);\r\n        } catch (error) {\r\n          console.warn('WebGL rendering error:', error);\r\n          return;\r\n        }\r\n      };\r\n\r\n      window.addEventListener('resize', updatePlacement);\r\n      updatePlacement();\r\n      animationIdRef.current = requestAnimationFrame(loop);\r\n\r\n      cleanupFunctionRef.current = () => {\r\n        if (animationIdRef.current) {\r\n          cancelAnimationFrame(animationIdRef.current);\r\n          animationIdRef.current = null;\r\n        }\r\n\r\n        window.removeEventListener('resize', updatePlacement);\r\n\r\n        if (renderer) {\r\n          try {\r\n            const canvas = renderer.gl.canvas;\r\n            const loseContextExt = renderer.gl.getExtension('WEBGL_lose_context');\r\n            if (loseContextExt) {\r\n              loseContextExt.loseContext();\r\n            }\r\n\r\n            if (canvas && canvas.parentNode) {\r\n              canvas.parentNode.removeChild(canvas);\r\n            }\r\n          } catch (error) {\r\n            console.warn('Error during WebGL cleanup:', error);\r\n          }\r\n        }\r\n\r\n        rendererRef.current = null;\r\n        uniformsRef.current = null;\r\n        meshRef.current = null;\r\n      };\r\n    };\r\n\r\n    initializeWebGL();\r\n\r\n    return () => {\r\n      if (cleanupFunctionRef.current) {\r\n        cleanupFunctionRef.current();\r\n        cleanupFunctionRef.current = null;\r\n      }\r\n    };\r\n  }, [\r\n    isVisible,\r\n    raysOrigin,\r\n    raysColor,\r\n    raysSpeed,\r\n    lightSpread,\r\n    rayLength,\r\n    pulsating,\r\n    fadeDistance,\r\n    saturation,\r\n    followMouse,\r\n    mouseInfluence,\r\n    noiseAmount,\r\n    distortion\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!uniformsRef.current || !containerRef.current || !rendererRef.current) return;\r\n\r\n    const u = uniformsRef.current;\r\n    const renderer = rendererRef.current;\r\n\r\n    u.raysColor.value = hexToRgb(raysColor);\r\n    u.raysSpeed.value = raysSpeed;\r\n    u.lightSpread.value = lightSpread;\r\n    u.rayLength.value = rayLength;\r\n    u.pulsating.value = pulsating ? 1.0 : 0.0;\r\n    u.fadeDistance.value = fadeDistance;\r\n    u.saturation.value = saturation;\r\n    u.mouseInfluence.value = mouseInfluence;\r\n    u.noiseAmount.value = noiseAmount;\r\n    u.distortion.value = distortion;\r\n\r\n    const { clientWidth: wCSS, clientHeight: hCSS } = containerRef.current;\r\n    const dpr = renderer.dpr;\r\n    const { anchor, dir } = getAnchorAndDir(raysOrigin, wCSS * dpr, hCSS * dpr);\r\n    u.rayPos.value = anchor;\r\n    u.rayDir.value = dir;\r\n  }, [\r\n    raysColor,\r\n    raysSpeed,\r\n    lightSpread,\r\n    raysOrigin,\r\n    rayLength,\r\n    pulsating,\r\n    fadeDistance,\r\n    saturation,\r\n    mouseInfluence,\r\n    noiseAmount,\r\n    distortion\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      if (!containerRef.current || !rendererRef.current) return;\r\n      const rect = containerRef.current.getBoundingClientRect();\r\n      const x = (e.clientX - rect.left) / rect.width;\r\n      const y = (e.clientY - rect.top) / rect.height;\r\n      mouseRef.current = { x, y };\r\n    };\r\n\r\n    if (followMouse) {\r\n      window.addEventListener('mousemove', handleMouseMove);\r\n      return () => window.removeEventListener('mousemove', handleMouseMove);\r\n    }\r\n  }, [followMouse]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={`w-full h-full pointer-events-none z-[3] overflow-hidden relative ${className}`.trim()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LightRays;\r\n",
      "type": "registry:component"
    }
  ]
}