{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "FloatingDock-TS-TW",
  "type": "registry:block",
  "title": "FloatingDock",
  "description": "Floating Dock component (JS variant) sourced from Aceternity UI reference.",
  "dependencies": [
    "@tabler/icons-react",
    "motion"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Components/FloatingDock/FloatingDock.tsx",
      "content": "// TS Tailwind variant placeholder\r\nimport React, { useRef, useState } from 'react';\r\nimport { IconLayoutNavbarCollapse } from '@tabler/icons-react';\r\nimport { AnimatePresence, motion, useMotionValue, useSpring, useTransform } from 'motion/react';\r\nfunction cn(...classes: (string | undefined)[]) {\r\n  return classes.filter(Boolean).join(' ');\r\n}\r\n\r\nexport interface FloatingDockItem { title: string; icon: React.ReactNode; href: string }\r\nexport interface FloatingDockProps { items: FloatingDockItem[]; desktopClassName?: string; mobileClassName?: string }\r\n\r\nexport const FloatingDock: React.FC<FloatingDockProps> = ({ items, desktopClassName, mobileClassName }) => {\r\n  return (\r\n    <>\r\n      <FloatingDockDesktop items={items} className={desktopClassName} />\r\n      <FloatingDockMobile items={items} className={mobileClassName} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst FloatingDockMobile: React.FC<{ items: FloatingDockItem[]; className?: string }> = ({ items, className }) => {\r\n  const [open, setOpen] = useState(false);\r\n  return (\r\n    <div className={cn('relative block md:hidden', className)}>\r\n      <AnimatePresence>\r\n        {open && (\r\n          <motion.div layoutId=\"nav\" className=\"absolute inset-x-0 bottom-full mb-2 flex flex-col gap-2\">\r\n            {items.map((item, idx) => (\r\n              <motion.div\r\n                key={item.title}\r\n                initial={{ opacity: 0, y: 10 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                exit={{ opacity: 0, y: 10, transition: { delay: idx * 0.05 } }}\r\n                transition={{ delay: (items.length - 1 - idx) * 0.05 }}\r\n              >\r\n                <a\r\n                  href={item.href}\r\n                  className=\"flex h-10 w-10 items-center justify-center rounded-full bg-gray-50 dark:bg-neutral-900\"\r\n                >\r\n                  <div className=\"h-4 w-4\">{item.icon}</div>\r\n                </a>\r\n              </motion.div>\r\n            ))}\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n      <button\r\n        onClick={() => setOpen(!open)}\r\n        className=\"flex h-10 w-10 items-center justify-center rounded-full bg-gray-50 dark:bg-neutral-800\"\r\n      >\r\n        <IconLayoutNavbarCollapse className=\"h-5 w-5 text-neutral-500 dark:text-neutral-400\" />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FloatingDockDesktop: React.FC<{ items: FloatingDockItem[]; className?: string }> = ({ items, className }) => {\r\n  const mouseX = useMotionValue<number | typeof Infinity>(Infinity as any);\r\n  return (\r\n    <motion.div\r\n      onMouseMove={e => mouseX.set(e.pageX)}\r\n      onMouseLeave={() => mouseX.set(Infinity as any)}\r\n      className={cn(\r\n        'mx-auto hidden h-16 items-end gap-4 rounded-2xl bg-gray-50 px-4 pb-3 md:flex dark:bg-neutral-900',\r\n        className\r\n      )}\r\n    >\r\n      {items.map(item => (\r\n        <IconContainer mouseX={mouseX} key={item.title} {...item} />\r\n      ))}\r\n    </motion.div>\r\n  );\r\n};\r\n\r\ninterface IconContainerProps extends FloatingDockItem { mouseX: any }\r\nfunction IconContainer({ mouseX, title, icon, href }: IconContainerProps) {\r\n  const ref = useRef<HTMLDivElement | null>(null);\r\n  const distance = useTransform(mouseX, (val: number) => {\r\n    const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 } as any;\r\n    return val - bounds.x - bounds.width / 2;\r\n  });\r\n  const widthTransform = useTransform(distance, [-150, 0, 150], [40, 80, 40]);\r\n  const heightTransform = useTransform(distance, [-150, 0, 150], [40, 80, 40]);\r\n  const widthTransformIcon = useTransform(distance, [-150, 0, 150], [20, 40, 20]);\r\n  const heightTransformIcon = useTransform(distance, [-150, 0, 150], [20, 40, 20]);\r\n  const width = useSpring(widthTransform, { mass: 0.1, stiffness: 150, damping: 12 });\r\n  const height = useSpring(heightTransform, { mass: 0.1, stiffness: 150, damping: 12 });\r\n  const widthIcon = useSpring(widthTransformIcon, { mass: 0.1, stiffness: 150, damping: 12 });\r\n  const heightIcon = useSpring(heightTransformIcon, { mass: 0.1, stiffness: 150, damping: 12 });\r\n  const [hovered, setHovered] = useState(false);\r\n  return (\r\n    <a href={href}>\r\n      <motion.div\r\n        ref={ref}\r\n        style={{ width, height }}\r\n        onMouseEnter={() => setHovered(true)}\r\n        onMouseLeave={() => setHovered(false)}\r\n        className=\"relative flex aspect-square items-center justify-center rounded-full bg-gray-200 dark:bg-neutral-800\"\r\n      >\r\n        <AnimatePresence>\r\n          {hovered && (\r\n            <motion.div\r\n              initial={{ opacity: 0, y: 10, x: '-50%' }}\r\n              animate={{ opacity: 1, y: 0, x: '-50%' }}\r\n              exit={{ opacity: 0, y: 2, x: '-50%' }}\r\n              className=\"absolute -top-8 left-1/2 w-fit whitespace-pre rounded-md border border-gray-200 bg-gray-100 px-2 py-0.5 text-xs text-neutral-700 dark:border-neutral-900 dark:bg-neutral-800 dark:text-white\"\r\n            >\r\n              {title}\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n        <motion.div style={{ width: widthIcon, height: heightIcon }} className=\"flex items-center justify-center\">\r\n          {icon}\r\n        </motion.div>\r\n      </motion.div>\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default FloatingDock;\r\n",
      "type": "registry:component"
    }
  ]
}