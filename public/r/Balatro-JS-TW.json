{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Balatro-JS-TW",
  "type": "registry:block",
  "title": "Balatro",
  "description": "The balatro shader, fully customizalbe and interactive.",
  "dependencies": [
    "ogl"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Backgrounds/Balatro/Balatro.jsx",
      "content": "import { Renderer, Program, Mesh, Triangle } from 'ogl';\r\nimport { useEffect, useRef } from 'react';\r\n\r\nfunction hexToVec4(hex) {\r\n  let hexStr = hex.replace('#', '');\r\n  let r = 0,\r\n    g = 0,\r\n    b = 0,\r\n    a = 1;\r\n  if (hexStr.length === 6) {\r\n    r = parseInt(hexStr.slice(0, 2), 16) / 255;\r\n    g = parseInt(hexStr.slice(2, 4), 16) / 255;\r\n    b = parseInt(hexStr.slice(4, 6), 16) / 255;\r\n  } else if (hexStr.length === 8) {\r\n    r = parseInt(hexStr.slice(0, 2), 16) / 255;\r\n    g = parseInt(hexStr.slice(2, 4), 16) / 255;\r\n    b = parseInt(hexStr.slice(4, 6), 16) / 255;\r\n    a = parseInt(hexStr.slice(6, 8), 16) / 255;\r\n  }\r\n  return [r, g, b, a];\r\n}\r\n\r\nconst vertexShader = `\r\nattribute vec2 uv;\r\nattribute vec2 position;\r\nvarying vec2 vUv;\r\nvoid main() {\r\n  vUv = uv;\r\n  gl_Position = vec4(position, 0, 1);\r\n}\r\n`;\r\n\r\nconst fragmentShader = `\r\nprecision highp float;\r\n\r\n#define PI 3.14159265359\r\n\r\nuniform float iTime;\r\nuniform vec3 iResolution;\r\nuniform float uSpinRotation;\r\nuniform float uSpinSpeed;\r\nuniform vec2 uOffset;\r\nuniform vec4 uColor1;\r\nuniform vec4 uColor2;\r\nuniform vec4 uColor3;\r\nuniform float uContrast;\r\nuniform float uLighting;\r\nuniform float uSpinAmount;\r\nuniform float uPixelFilter;\r\nuniform float uSpinEase;\r\nuniform bool uIsRotate;\r\nuniform vec2 uMouse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvec4 effect(vec2 screenSize, vec2 screen_coords) {\r\n    float pixel_size = length(screenSize.xy) / uPixelFilter;\r\n    vec2 uv = (floor(screen_coords.xy * (1.0 / pixel_size)) * pixel_size - 0.5 * screenSize.xy) / length(screenSize.xy) - uOffset;\r\n    float uv_len = length(uv);\r\n    \r\n    float speed = (uSpinRotation * uSpinEase * 0.2);\r\n    if(uIsRotate){\r\n       speed = iTime * speed;\r\n    }\r\n    speed += 302.2;\r\n    \r\n    float mouseInfluence = (uMouse.x * 2.0 - 1.0);\r\n    speed += mouseInfluence * 0.1;\r\n    \r\n    float new_pixel_angle = atan(uv.y, uv.x) + speed - uSpinEase * 20.0 * (uSpinAmount * uv_len + (1.0 - uSpinAmount));\r\n    vec2 mid = (screenSize.xy / length(screenSize.xy)) / 2.0;\r\n    uv = (vec2(uv_len * cos(new_pixel_angle) + mid.x, uv_len * sin(new_pixel_angle) + mid.y) - mid);\r\n    \r\n    uv *= 30.0;\r\n    float baseSpeed = iTime * uSpinSpeed;\r\n    speed = baseSpeed + mouseInfluence * 2.0;\r\n    \r\n    vec2 uv2 = vec2(uv.x + uv.y);\r\n    \r\n    for(int i = 0; i < 5; i++) {\r\n        uv2 += sin(max(uv.x, uv.y)) + uv;\r\n        uv += 0.5 * vec2(\r\n            cos(5.1123314 + 0.353 * uv2.y + speed * 0.131121),\r\n            sin(uv2.x - 0.113 * speed)\r\n        );\r\n        uv -= cos(uv.x + uv.y) - sin(uv.x * 0.711 - uv.y);\r\n    }\r\n    \r\n    float contrast_mod = (0.25 * uContrast + 0.5 * uSpinAmount + 1.2);\r\n    float paint_res = min(2.0, max(0.0, length(uv) * 0.035 * contrast_mod));\r\n    float c1p = max(0.0, 1.0 - contrast_mod * abs(1.0 - paint_res));\r\n    float c2p = max(0.0, 1.0 - contrast_mod * abs(paint_res));\r\n    float c3p = 1.0 - min(1.0, c1p + c2p);\r\n    float light = (uLighting - 0.2) * max(c1p * 5.0 - 4.0, 0.0) + uLighting * max(c2p * 5.0 - 4.0, 0.0);\r\n    \r\n    return (0.3 / uContrast) * uColor1 + (1.0 - 0.3 / uContrast) * (uColor1 * c1p + uColor2 * c2p + vec4(c3p * uColor3.rgb, c3p * uColor1.a)) + light;\r\n}\r\n\r\nvoid main() {\r\n    vec2 uv = vUv * iResolution.xy;\r\n    gl_FragColor = effect(iResolution.xy, uv);\r\n}\r\n`;\r\n\r\nexport default function Balatro({\r\n  spinRotation = -2.0,\r\n  spinSpeed = 7.0,\r\n  offset = [0.0, 0.0],\r\n  color1 = '#DE443B',\r\n  color2 = '#006BB4',\r\n  color3 = '#162325',\r\n  contrast = 3.5,\r\n  lighting = 0.4,\r\n  spinAmount = 0.25,\r\n  pixelFilter = 745.0,\r\n  spinEase = 1.0,\r\n  isRotate = false,\r\n  mouseInteraction = true\r\n}) {\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!containerRef.current) return;\r\n    const container = containerRef.current;\r\n    const renderer = new Renderer();\r\n    const gl = renderer.gl;\r\n    gl.clearColor(0, 0, 0, 1);\r\n\r\n    let program;\r\n\r\n    function resize() {\r\n      renderer.setSize(container.offsetWidth, container.offsetHeight);\r\n      if (program) {\r\n        program.uniforms.iResolution.value = [gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height];\r\n      }\r\n    }\r\n    window.addEventListener('resize', resize);\r\n    resize();\r\n\r\n    const geometry = new Triangle(gl);\r\n    program = new Program(gl, {\r\n      vertex: vertexShader,\r\n      fragment: fragmentShader,\r\n      uniforms: {\r\n        iTime: { value: 0 },\r\n        iResolution: {\r\n          value: [gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height]\r\n        },\r\n        uSpinRotation: { value: spinRotation },\r\n        uSpinSpeed: { value: spinSpeed },\r\n        uOffset: { value: offset },\r\n        uColor1: { value: hexToVec4(color1) },\r\n        uColor2: { value: hexToVec4(color2) },\r\n        uColor3: { value: hexToVec4(color3) },\r\n        uContrast: { value: contrast },\r\n        uLighting: { value: lighting },\r\n        uSpinAmount: { value: spinAmount },\r\n        uPixelFilter: { value: pixelFilter },\r\n        uSpinEase: { value: spinEase },\r\n        uIsRotate: { value: isRotate },\r\n        uMouse: { value: [0.5, 0.5] }\r\n      }\r\n    });\r\n\r\n    const mesh = new Mesh(gl, { geometry, program });\r\n    let animationFrameId;\r\n\r\n    function update(time) {\r\n      animationFrameId = requestAnimationFrame(update);\r\n      program.uniforms.iTime.value = time * 0.001;\r\n      renderer.render({ scene: mesh });\r\n    }\r\n    animationFrameId = requestAnimationFrame(update);\r\n    container.appendChild(gl.canvas);\r\n\r\n    function handleMouseMove(e) {\r\n      if (!mouseInteraction) return;\r\n      const rect = container.getBoundingClientRect();\r\n      const x = (e.clientX - rect.left) / rect.width;\r\n      const y = 1.0 - (e.clientY - rect.top) / rect.height;\r\n      program.uniforms.uMouse.value = [x, y];\r\n    }\r\n    container.addEventListener('mousemove', handleMouseMove);\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animationFrameId);\r\n      window.removeEventListener('resize', resize);\r\n      container.removeEventListener('mousemove', handleMouseMove);\r\n      container.removeChild(gl.canvas);\r\n      gl.getExtension('WEBGL_lose_context')?.loseContext();\r\n    };\r\n  }, [\r\n    spinRotation,\r\n    spinSpeed,\r\n    offset,\r\n    color1,\r\n    color2,\r\n    color3,\r\n    contrast,\r\n    lighting,\r\n    spinAmount,\r\n    pixelFilter,\r\n    spinEase,\r\n    isRotate,\r\n    mouseInteraction,\r\n    containerRef\r\n  ]);\r\n\r\n  return <div ref={containerRef} className=\"w-full h-full\" />;\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}