{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Masonry-JS-CSS",
  "type": "registry:block",
  "title": "Masonry",
  "description": "Responsive masonry layout with animated reflow + gaps optimization.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/default/src/content/Components/Masonry/Masonry.jsx",
      "content": "import { useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\r\nimport { gsap } from 'gsap';\r\n\r\nimport './Masonry.css';\r\n\r\nconst useMedia = (queries, values, defaultValue) => {\r\n  const get = () => values[queries.findIndex(q => matchMedia(q).matches)] ?? defaultValue;\r\n\r\n  const [value, setValue] = useState(get);\r\n\r\n  useEffect(() => {\r\n    const handler = () => setValue(get);\r\n    queries.forEach(q => matchMedia(q).addEventListener('change', handler));\r\n    return () => queries.forEach(q => matchMedia(q).removeEventListener('change', handler));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [queries]);\r\n\r\n  return value;\r\n};\r\n\r\nconst useMeasure = () => {\r\n  const ref = useRef(null);\r\n  const [size, setSize] = useState({ width: 0, height: 0 });\r\n\r\n  useLayoutEffect(() => {\r\n    if (!ref.current) return;\r\n    const ro = new ResizeObserver(([entry]) => {\r\n      const { width, height } = entry.contentRect;\r\n      setSize({ width, height });\r\n    });\r\n    ro.observe(ref.current);\r\n    return () => ro.disconnect();\r\n  }, []);\r\n\r\n  return [ref, size];\r\n};\r\n\r\nconst preloadImages = async urls => {\r\n  await Promise.all(\r\n    urls.map(\r\n      src =>\r\n        new Promise(resolve => {\r\n          const img = new Image();\r\n          img.src = src;\r\n          img.onload = img.onerror = () => resolve();\r\n        })\r\n    )\r\n  );\r\n};\r\n\r\nconst Masonry = ({\r\n  items,\r\n  ease = 'power3.out',\r\n  duration = 0.6,\r\n  stagger = 0.05,\r\n  animateFrom = 'bottom',\r\n  scaleOnHover = true,\r\n  hoverScale = 0.95,\r\n  blurToFocus = true,\r\n  colorShiftOnHover = false\r\n}) => {\r\n  const columns = useMedia(\r\n    ['(min-width:1500px)', '(min-width:1000px)', '(min-width:600px)', '(min-width:400px)'],\r\n    [5, 4, 3, 2],\r\n    1\r\n  );\r\n\r\n  const [containerRef, { width }] = useMeasure();\r\n  const [imagesReady, setImagesReady] = useState(false);\r\n\r\n  const getInitialPosition = item => {\r\n    const containerRect = containerRef.current?.getBoundingClientRect();\r\n    if (!containerRect) return { x: item.x, y: item.y };\r\n\r\n    let direction = animateFrom;\r\n\r\n    if (animateFrom === 'random') {\r\n      const directions = ['top', 'bottom', 'left', 'right'];\r\n      direction = directions[Math.floor(Math.random() * directions.length)];\r\n    }\r\n\r\n    switch (direction) {\r\n      case 'top':\r\n        return { x: item.x, y: -200 };\r\n      case 'bottom':\r\n        return { x: item.x, y: window.innerHeight + 200 };\r\n      case 'left':\r\n        return { x: -200, y: item.y };\r\n      case 'right':\r\n        return { x: window.innerWidth + 200, y: item.y };\r\n      case 'center':\r\n        return {\r\n          x: containerRect.width / 2 - item.w / 2,\r\n          y: containerRect.height / 2 - item.h / 2\r\n        };\r\n      default:\r\n        return { x: item.x, y: item.y + 100 };\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    preloadImages(items.map(i => i.img)).then(() => setImagesReady(true));\r\n  }, [items]);\r\n\r\n  const grid = useMemo(() => {\r\n    if (!width) return [];\r\n\r\n    const colHeights = new Array(columns).fill(0);\r\n    const columnWidth = width / columns;\r\n\r\n    return items.map(child => {\r\n      const col = colHeights.indexOf(Math.min(...colHeights));\r\n      const x = columnWidth * col;\r\n      const height = child.height / 2;\r\n      const y = colHeights[col];\r\n\r\n      colHeights[col] += height;\r\n\r\n      return { ...child, x, y, w: columnWidth, h: height };\r\n    });\r\n  }, [columns, items, width]);\r\n\r\n  const hasMounted = useRef(false);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!imagesReady) return;\r\n\r\n    grid.forEach((item, index) => {\r\n      const selector = `[data-key=\"${item.id}\"]`;\r\n      const animationProps = {\r\n        x: item.x,\r\n        y: item.y,\r\n        width: item.w,\r\n        height: item.h\r\n      };\r\n\r\n      if (!hasMounted.current) {\r\n        const initialPos = getInitialPosition(item, index);\r\n        const initialState = {\r\n          opacity: 0,\r\n          x: initialPos.x,\r\n          y: initialPos.y,\r\n          width: item.w,\r\n          height: item.h,\r\n          ...(blurToFocus && { filter: 'blur(10px)' })\r\n        };\r\n\r\n        gsap.fromTo(selector, initialState, {\r\n          opacity: 1,\r\n          ...animationProps,\r\n          ...(blurToFocus && { filter: 'blur(0px)' }),\r\n          duration: 0.8,\r\n          ease: 'power3.out',\r\n          delay: index * stagger\r\n        });\r\n      } else {\r\n        gsap.to(selector, {\r\n          ...animationProps,\r\n          duration: duration,\r\n          ease: ease,\r\n          overwrite: 'auto'\r\n        });\r\n      }\r\n    });\r\n\r\n    hasMounted.current = true;\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [grid, imagesReady, stagger, animateFrom, blurToFocus, duration, ease]);\r\n\r\n  const handleMouseEnter = (e, item) => {\r\n    const element = e.currentTarget;\r\n    const selector = `[data-key=\"${item.id}\"]`;\r\n\r\n    if (scaleOnHover) {\r\n      gsap.to(selector, {\r\n        scale: hoverScale,\r\n        duration: 0.3,\r\n        ease: 'power2.out'\r\n      });\r\n    }\r\n\r\n    if (colorShiftOnHover) {\r\n      const overlay = element.querySelector('.color-overlay');\r\n      if (overlay) {\r\n        gsap.to(overlay, {\r\n          opacity: 0.3,\r\n          duration: 0.3\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseLeave = (e, item) => {\r\n    const element = e.currentTarget;\r\n    const selector = `[data-key=\"${item.id}\"]`;\r\n\r\n    if (scaleOnHover) {\r\n      gsap.to(selector, {\r\n        scale: 1,\r\n        duration: 0.3,\r\n        ease: 'power2.out'\r\n      });\r\n    }\r\n\r\n    if (colorShiftOnHover) {\r\n      const overlay = element.querySelector('.color-overlay');\r\n      if (overlay) {\r\n        gsap.to(overlay, {\r\n          opacity: 0,\r\n          duration: 0.3\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div ref={containerRef} className=\"list\">\r\n      {grid.map(item => {\r\n        return (\r\n          <div\r\n            key={item.id}\r\n            data-key={item.id}\r\n            className=\"item-wrapper\"\r\n            onClick={() => window.open(item.url, '_blank', 'noopener')}\r\n            onMouseEnter={e => handleMouseEnter(e, item)}\r\n            onMouseLeave={e => handleMouseLeave(e, item)}\r\n          >\r\n            <div className=\"item-img\" style={{ backgroundImage: `url(${item.img})` }}>\r\n              {colorShiftOnHover && (\r\n                <div\r\n                  className=\"color-overlay\"\r\n                  style={{\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    background: 'linear-gradient(45deg, rgba(255,0,150,0.5), rgba(0,150,255,0.5))',\r\n                    opacity: 0,\r\n                    pointerEvents: 'none',\r\n                    borderRadius: '8px'\r\n                  }}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Masonry;\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Components/Masonry/Masonry.css",
      "content": ".list {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.item-wrapper {\r\n  position: absolute;\r\n  will-change: transform, width, height, opacity;\r\n  padding: 6px;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n.item-wrapper > .item-img {\r\n  position: relative;\r\n  background-size: cover;\r\n  background-position: center center;\r\n  width: 100%;\r\n  height: 100%;\r\n  text-transform: uppercase;\r\n  font-size: 10px;\r\n  line-height: 10px;\r\n  border-radius: 10px;\r\n  box-shadow: 0px 10px 50px -10px rgba(0, 0, 0, 0.2);\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}