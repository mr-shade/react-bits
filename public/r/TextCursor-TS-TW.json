{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "TextCursor-TS-TW",
  "type": "registry:block",
  "title": "TextCursor",
  "description": "Make any text element follow your cursor, leaving a trail of copies behind it.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/TextAnimations/TextCursor/TextCursor.tsx",
      "content": "import React, { useState, useEffect, useRef } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\n\r\ninterface TextCursorProps {\r\n  text: string;\r\n  delay?: number;\r\n  spacing?: number;\r\n  followMouseDirection?: boolean;\r\n  randomFloat?: boolean;\r\n  exitDuration?: number;\r\n  removalInterval?: number;\r\n  maxPoints?: number;\r\n}\r\n\r\ninterface TrailItem {\r\n  id: number;\r\n  x: number;\r\n  y: number;\r\n  angle: number;\r\n  randomX?: number;\r\n  randomY?: number;\r\n  randomRotate?: number;\r\n}\r\n\r\nconst TextCursor: React.FC<TextCursorProps> = ({\r\n  text = '⚛️',\r\n  delay = 0.01,\r\n  spacing = 100,\r\n  followMouseDirection = true,\r\n  randomFloat = true,\r\n  exitDuration = 0.5,\r\n  removalInterval = 30,\r\n  maxPoints = 5\r\n}) => {\r\n  const [trail, setTrail] = useState<TrailItem[]>([]);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const lastMoveTimeRef = useRef<number>(Date.now());\r\n  const idCounter = useRef<number>(0);\r\n\r\n  const handleMouseMove = (e: MouseEvent) => {\r\n    if (!containerRef.current) return;\r\n    const rect = containerRef.current.getBoundingClientRect();\r\n    const mouseX = e.clientX - rect.left;\r\n    const mouseY = e.clientY - rect.top;\r\n\r\n    setTrail(prev => {\r\n      let newTrail = [...prev];\r\n      if (newTrail.length === 0) {\r\n        newTrail.push({\r\n          id: idCounter.current++,\r\n          x: mouseX,\r\n          y: mouseY,\r\n          angle: 0,\r\n          ...(randomFloat && {\r\n            randomX: Math.random() * 10 - 5,\r\n            randomY: Math.random() * 10 - 5,\r\n            randomRotate: Math.random() * 10 - 5\r\n          })\r\n        });\r\n      } else {\r\n        const last = newTrail[newTrail.length - 1];\r\n        const dx = mouseX - last.x;\r\n        const dy = mouseY - last.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        if (distance >= spacing) {\r\n          let rawAngle = (Math.atan2(dy, dx) * 180) / Math.PI;\r\n          if (rawAngle > 90) rawAngle -= 180;\r\n          else if (rawAngle < -90) rawAngle += 180;\r\n          const computedAngle = followMouseDirection ? rawAngle : 0;\r\n          const steps = Math.floor(distance / spacing);\r\n          for (let i = 1; i <= steps; i++) {\r\n            const t = (spacing * i) / distance;\r\n            const newX = last.x + dx * t;\r\n            const newY = last.y + dy * t;\r\n            newTrail.push({\r\n              id: idCounter.current++,\r\n              x: newX,\r\n              y: newY,\r\n              angle: computedAngle,\r\n              ...(randomFloat && {\r\n                randomX: Math.random() * 10 - 5,\r\n                randomY: Math.random() * 10 - 5,\r\n                randomRotate: Math.random() * 10 - 5\r\n              })\r\n            });\r\n          }\r\n        }\r\n      }\r\n      if (newTrail.length > maxPoints) {\r\n        newTrail = newTrail.slice(newTrail.length - maxPoints);\r\n      }\r\n      return newTrail;\r\n    });\r\n    lastMoveTimeRef.current = Date.now();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    if (!container) return;\r\n    container.addEventListener('mousemove', handleMouseMove);\r\n    return () => container.removeEventListener('mousemove', handleMouseMove);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (Date.now() - lastMoveTimeRef.current > 100) {\r\n        setTrail(prev => (prev.length > 0 ? prev.slice(1) : prev));\r\n      }\r\n    }, removalInterval);\r\n    return () => clearInterval(interval);\r\n  }, [removalInterval]);\r\n\r\n  return (\r\n    <div ref={containerRef} className=\"w-full h-full relative\">\r\n      <div className=\"absolute inset-0 pointer-events-none\">\r\n        <AnimatePresence>\r\n          {trail.map(item => (\r\n            <motion.div\r\n              key={item.id}\r\n              initial={{ opacity: 0, scale: 1, x: 0, y: 0, rotate: item.angle }}\r\n              animate={{\r\n                opacity: 1,\r\n                scale: 1,\r\n                x: randomFloat ? [0, item.randomX || 0, 0] : 0,\r\n                y: randomFloat ? [0, item.randomY || 0, 0] : 0,\r\n                rotate: randomFloat ? [item.angle, item.angle + (item.randomRotate || 0), item.angle] : item.angle\r\n              }}\r\n              exit={{ opacity: 0, scale: 0 }}\r\n              transition={{\r\n                opacity: { duration: exitDuration, ease: 'easeOut', delay },\r\n                ...(randomFloat && {\r\n                  x: {\r\n                    duration: 2,\r\n                    ease: 'easeInOut',\r\n                    repeat: Infinity,\r\n                    repeatType: 'mirror'\r\n                  },\r\n                  y: {\r\n                    duration: 2,\r\n                    ease: 'easeInOut',\r\n                    repeat: Infinity,\r\n                    repeatType: 'mirror'\r\n                  },\r\n                  rotate: {\r\n                    duration: 2,\r\n                    ease: 'easeInOut',\r\n                    repeat: Infinity,\r\n                    repeatType: 'mirror'\r\n                  }\r\n                })\r\n              }}\r\n              className=\"absolute select-none whitespace-nowrap text-3xl\"\r\n              style={{ left: item.x, top: item.y }}\r\n            >\r\n              {text}\r\n            </motion.div>\r\n          ))}\r\n        </AnimatePresence>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextCursor;\r\n",
      "type": "registry:component"
    }
  ]
}