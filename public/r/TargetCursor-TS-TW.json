{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "TargetCursor-TS-TW",
  "type": "registry:block",
  "title": "TargetCursor",
  "description": "A cursor follow animation with 4 corners that lock onto targets.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Animations/TargetCursor/TargetCursor.tsx",
      "content": "import React, { useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport { gsap } from 'gsap';\r\n\r\nexport interface TargetCursorProps {\r\n  targetSelector?: string;\r\n  spinDuration?: number;\r\n  hideDefaultCursor?: boolean;\r\n}\r\n\r\nconst TargetCursor: React.FC<TargetCursorProps> = ({\r\n  targetSelector = '.cursor-target',\r\n  spinDuration = 2,\r\n  hideDefaultCursor = true\r\n}) => {\r\n  const cursorRef = useRef<HTMLDivElement>(null);\r\n  const cornersRef = useRef<NodeListOf<HTMLDivElement>>(null);\r\n  const spinTl = useRef<gsap.core.Timeline>(null);\r\n  const dotRef = useRef<HTMLDivElement>(null);\r\n  const constants = useMemo(\r\n    () => ({\r\n      borderWidth: 3,\r\n      cornerSize: 12,\r\n      parallaxStrength: 0.00005\r\n    }),\r\n    []\r\n  );\r\n\r\n  const moveCursor = useCallback((x: number, y: number) => {\r\n    if (!cursorRef.current) return;\r\n    gsap.to(cursorRef.current, {\r\n      x,\r\n      y,\r\n      duration: 0.1,\r\n      ease: 'power3.out'\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!cursorRef.current) return;\r\n\r\n    const originalCursor = document.body.style.cursor;\r\n    if (hideDefaultCursor) {\r\n      document.body.style.cursor = 'none';\r\n    }\r\n\r\n    const cursor = cursorRef.current;\r\n    cornersRef.current = cursor.querySelectorAll<HTMLDivElement>('.target-cursor-corner');\r\n\r\n    let activeTarget: Element | null = null;\r\n    let currentTargetMove: ((ev: Event) => void) | null = null;\r\n    let currentLeaveHandler: (() => void) | null = null;\r\n    let isAnimatingToTarget = false;\r\n    let resumeTimeout: ReturnType<typeof setTimeout> | null = null;\r\n\r\n    const cleanupTarget = (target: Element) => {\r\n      if (currentTargetMove) {\r\n        target.removeEventListener('mousemove', currentTargetMove);\r\n      }\r\n      if (currentLeaveHandler) {\r\n        target.removeEventListener('mouseleave', currentLeaveHandler);\r\n      }\r\n      currentTargetMove = null;\r\n      currentLeaveHandler = null;\r\n    };\r\n\r\n    gsap.set(cursor, {\r\n      xPercent: -50,\r\n      yPercent: -50,\r\n      x: window.innerWidth / 2,\r\n      y: window.innerHeight / 2\r\n    });\r\n\r\n    const createSpinTimeline = () => {\r\n      if (spinTl.current) {\r\n        spinTl.current.kill();\r\n      }\r\n      spinTl.current = gsap\r\n        .timeline({ repeat: -1 })\r\n        .to(cursor, { rotation: '+=360', duration: spinDuration, ease: 'none' });\r\n    };\r\n\r\n    createSpinTimeline();\r\n\r\n    const moveHandler = (e: MouseEvent) => moveCursor(e.clientX, e.clientY);\r\n    window.addEventListener('mousemove', moveHandler);\r\n\r\n    const scrollHandler = () => {\r\n      if (!activeTarget || !cursorRef.current) return;\r\n\r\n      const mouseX = gsap.getProperty(cursorRef.current, 'x') as number;\r\n      const mouseY = gsap.getProperty(cursorRef.current, 'y') as number;\r\n\r\n      const elementUnderMouse = document.elementFromPoint(mouseX, mouseY);\r\n      const isStillOverTarget =\r\n        elementUnderMouse &&\r\n        (elementUnderMouse === activeTarget || elementUnderMouse.closest(targetSelector) === activeTarget);\r\n\r\n      if (!isStillOverTarget) {\r\n        if (currentLeaveHandler) {\r\n          currentLeaveHandler();\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('scroll', scrollHandler, { passive: true });\r\n    window.addEventListener('mousemove', moveHandler);\r\n\r\n    const mouseDownHandler = (): void => {\r\n      if (!dotRef.current) return;\r\n      gsap.to(dotRef.current, { scale: 0.7, duration: 0.3 });\r\n      gsap.to(cursorRef.current, { scale: 0.9, duration: 0.2 });\r\n    };\r\n\r\n    const mouseUpHandler = (): void => {\r\n      if (!dotRef.current) return;\r\n      gsap.to(dotRef.current, { scale: 1, duration: 0.3 });\r\n      gsap.to(cursorRef.current, { scale: 1, duration: 0.2 });\r\n    };\r\n\r\n    window.addEventListener('mousedown', mouseDownHandler);\r\n    window.addEventListener('mouseup', mouseUpHandler);\r\n\r\n    const enterHandler = (e: MouseEvent) => {\r\n      const directTarget = e.target as Element;\r\n\r\n      const allTargets: Element[] = [];\r\n      let current = directTarget;\r\n      while (current && current !== document.body) {\r\n        if (current.matches(targetSelector)) {\r\n          allTargets.push(current);\r\n        }\r\n        current = current.parentElement!;\r\n      }\r\n\r\n      const target = allTargets[0] || null;\r\n      if (!target || !cursorRef.current || !cornersRef.current) return;\r\n\r\n      if (activeTarget === target) return;\r\n\r\n      if (activeTarget) {\r\n        cleanupTarget(activeTarget);\r\n      }\r\n\r\n      if (resumeTimeout) {\r\n        clearTimeout(resumeTimeout);\r\n        resumeTimeout = null;\r\n      }\r\n\r\n      activeTarget = target;\r\n      const corners = Array.from(cornersRef.current);\r\n      corners.forEach(corner => {\r\n        gsap.killTweensOf(corner);\r\n      });\r\n      gsap.killTweensOf(cursorRef.current, 'rotation');\r\n      spinTl.current?.pause();\r\n\r\n      gsap.set(cursorRef.current, { rotation: 0 });\r\n\r\n      const updateCorners = (mouseX?: number, mouseY?: number) => {\r\n        const rect = target.getBoundingClientRect();\r\n        const cursorRect = cursorRef.current!.getBoundingClientRect();\r\n\r\n        const cursorCenterX = cursorRect.left + cursorRect.width / 2;\r\n        const cursorCenterY = cursorRect.top + cursorRect.height / 2;\r\n\r\n        const [tlc, trc, brc, blc] = Array.from(cornersRef.current!);\r\n\r\n        const { borderWidth, cornerSize, parallaxStrength } = constants;\r\n\r\n        let tlOffset = {\r\n          x: rect.left - cursorCenterX - borderWidth,\r\n          y: rect.top - cursorCenterY - borderWidth\r\n        };\r\n        let trOffset = {\r\n          x: rect.right - cursorCenterX + borderWidth - cornerSize,\r\n          y: rect.top - cursorCenterY - borderWidth\r\n        };\r\n        let brOffset = {\r\n          x: rect.right - cursorCenterX + borderWidth - cornerSize,\r\n          y: rect.bottom - cursorCenterY + borderWidth - cornerSize\r\n        };\r\n        let blOffset = {\r\n          x: rect.left - cursorCenterX - borderWidth,\r\n          y: rect.bottom - cursorCenterY + borderWidth - cornerSize\r\n        };\r\n\r\n        if (mouseX !== undefined && mouseY !== undefined) {\r\n          const targetCenterX = rect.left + rect.width / 2;\r\n          const targetCenterY = rect.top + rect.height / 2;\r\n          const mouseOffsetX = (mouseX - targetCenterX) * parallaxStrength;\r\n          const mouseOffsetY = (mouseY - targetCenterY) * parallaxStrength;\r\n\r\n          tlOffset.x += mouseOffsetX;\r\n          tlOffset.y += mouseOffsetY;\r\n          trOffset.x += mouseOffsetX;\r\n          trOffset.y += mouseOffsetY;\r\n          brOffset.x += mouseOffsetX;\r\n          brOffset.y += mouseOffsetY;\r\n          blOffset.x += mouseOffsetX;\r\n          blOffset.y += mouseOffsetY;\r\n        }\r\n\r\n        const tl = gsap.timeline();\r\n        const corners = [tlc, trc, brc, blc];\r\n        const offsets = [tlOffset, trOffset, brOffset, blOffset];\r\n\r\n        corners.forEach((corner, index) => {\r\n          tl.to(\r\n            corner,\r\n            {\r\n              x: offsets[index].x,\r\n              y: offsets[index].y,\r\n              duration: 0.2,\r\n              ease: 'power2.out'\r\n            },\r\n            0\r\n          );\r\n        });\r\n      };\r\n\r\n      isAnimatingToTarget = true;\r\n      updateCorners();\r\n\r\n      setTimeout(() => {\r\n        isAnimatingToTarget = false;\r\n      }, 1);\r\n\r\n      let moveThrottle: number | null = null;\r\n      const targetMove = (ev: Event) => {\r\n        if (moveThrottle || isAnimatingToTarget) return;\r\n        moveThrottle = requestAnimationFrame(() => {\r\n          const mouseEvent = ev as MouseEvent;\r\n          updateCorners(mouseEvent.clientX, mouseEvent.clientY);\r\n          moveThrottle = null;\r\n        });\r\n      };\r\n\r\n      const leaveHandler = () => {\r\n        activeTarget = null;\r\n        isAnimatingToTarget = false;\r\n\r\n        if (cornersRef.current) {\r\n          const corners = Array.from(cornersRef.current);\r\n          gsap.killTweensOf(corners);\r\n\r\n          const { cornerSize } = constants;\r\n          const positions = [\r\n            { x: -cornerSize * 1.5, y: -cornerSize * 1.5 },\r\n            { x: cornerSize * 0.5, y: -cornerSize * 1.5 },\r\n            { x: cornerSize * 0.5, y: cornerSize * 0.5 },\r\n            { x: -cornerSize * 1.5, y: cornerSize * 0.5 }\r\n          ];\r\n\r\n          const tl = gsap.timeline();\r\n          corners.forEach((corner, index) => {\r\n            tl.to(\r\n              corner,\r\n              {\r\n                x: positions[index].x,\r\n                y: positions[index].y,\r\n                duration: 0.3,\r\n                ease: 'power3.out'\r\n              },\r\n              0\r\n            );\r\n          });\r\n        }\r\n\r\n        resumeTimeout = setTimeout(() => {\r\n          if (!activeTarget && cursorRef.current && spinTl.current) {\r\n            const currentRotation = gsap.getProperty(cursorRef.current, 'rotation') as number;\r\n            const normalizedRotation = currentRotation % 360;\r\n\r\n            spinTl.current.kill();\r\n            spinTl.current = gsap\r\n              .timeline({ repeat: -1 })\r\n              .to(cursorRef.current, { rotation: '+=360', duration: spinDuration, ease: 'none' });\r\n\r\n            gsap.to(cursorRef.current, {\r\n              rotation: normalizedRotation + 360,\r\n              duration: spinDuration * (1 - normalizedRotation / 360),\r\n              ease: 'none',\r\n              onComplete: () => {\r\n                spinTl.current?.restart();\r\n              }\r\n            });\r\n          }\r\n          resumeTimeout = null;\r\n        }, 50);\r\n\r\n        cleanupTarget(target);\r\n      };\r\n\r\n      currentTargetMove = targetMove;\r\n      currentLeaveHandler = leaveHandler;\r\n\r\n      target.addEventListener('mousemove', targetMove);\r\n      target.addEventListener('mouseleave', leaveHandler);\r\n    };\r\n\r\n    window.addEventListener('mouseover', enterHandler, { passive: true });\r\n\r\n    return () => {\r\n      window.removeEventListener('mousemove', moveHandler);\r\n      window.removeEventListener('mouseover', enterHandler);\r\n      window.removeEventListener('scroll', scrollHandler);\r\n\r\n      if (activeTarget) {\r\n        cleanupTarget(activeTarget);\r\n      }\r\n\r\n      spinTl.current?.kill();\r\n      document.body.style.cursor = originalCursor;\r\n    };\r\n  }, [targetSelector, spinDuration, moveCursor, constants, hideDefaultCursor]);\r\n\r\n  useEffect(() => {\r\n    if (!cursorRef.current || !spinTl.current) return;\r\n\r\n    if (spinTl.current.isActive()) {\r\n      spinTl.current.kill();\r\n      spinTl.current = gsap\r\n        .timeline({ repeat: -1 })\r\n        .to(cursorRef.current, { rotation: '+=360', duration: spinDuration, ease: 'none' });\r\n    }\r\n  }, [spinDuration]);\r\n\r\n  return (\r\n    <div\r\n      ref={cursorRef}\r\n      className=\"fixed top-0 left-0 w-0 h-0 pointer-events-none z-[9999] mix-blend-difference transform -translate-x-1/2 -translate-y-1/2\"\r\n      style={{ willChange: 'transform' }}\r\n    >\r\n      <div\r\n        ref={dotRef}\r\n        className=\"absolute left-1/2 top-1/2 w-1 h-1 bg-white rounded-full transform -translate-x-1/2 -translate-y-1/2\"\r\n        style={{ willChange: 'transform' }}\r\n      />\r\n      <div\r\n        className=\"target-cursor-corner absolute left-1/2 top-1/2 w-3 h-3 border-[3px] border-white transform -translate-x-[150%] -translate-y-[150%] border-r-0 border-b-0\"\r\n        style={{ willChange: 'transform' }}\r\n      />\r\n      <div\r\n        className=\"target-cursor-corner absolute left-1/2 top-1/2 w-3 h-3 border-[3px] border-white transform translate-x-1/2 -translate-y-[150%] border-l-0 border-b-0\"\r\n        style={{ willChange: 'transform' }}\r\n      />\r\n      <div\r\n        className=\"target-cursor-corner absolute left-1/2 top-1/2 w-3 h-3 border-[3px] border-white transform translate-x-1/2 translate-y-1/2 border-l-0 border-t-0\"\r\n        style={{ willChange: 'transform' }}\r\n      />\r\n      <div\r\n        className=\"target-cursor-corner absolute left-1/2 top-1/2 w-3 h-3 border-[3px] border-white transform -translate-x-[150%] translate-y-1/2 border-r-0 border-t-0\"\r\n        style={{ willChange: 'transform' }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TargetCursor;\r\n",
      "type": "registry:component"
    }
  ]
}