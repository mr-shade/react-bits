{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "FluidGlass-TS-TW",
  "type": "registry:block",
  "title": "FluidGlass",
  "description": "Glassmorphism container with animated liquid distortion refraction.",
  "dependencies": [
    "@react-three/drei",
    "@react-three/fiber",
    "maath",
    "three"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Components/FluidGlass/FluidGlass.tsx",
      "content": "/* eslint-disable react/no-unknown-property */\r\nimport * as THREE from 'three';\r\nimport { useRef, useState, useEffect, memo, ReactNode } from 'react';\r\nimport { Canvas, createPortal, useFrame, useThree, ThreeElements } from '@react-three/fiber';\r\nimport {\r\n  useFBO,\r\n  useGLTF,\r\n  useScroll,\r\n  Image,\r\n  Scroll,\r\n  Preload,\r\n  ScrollControls,\r\n  MeshTransmissionMaterial,\r\n  Text\r\n} from '@react-three/drei';\r\nimport { easing } from 'maath';\r\n\r\ntype Mode = 'lens' | 'bar' | 'cube';\r\n\r\ninterface NavItem {\r\n  label: string;\r\n  link: string;\r\n}\r\n\r\ntype ModeProps = Record<string, unknown>;\r\n\r\ninterface FluidGlassProps {\r\n  mode?: Mode;\r\n  lensProps?: ModeProps;\r\n  barProps?: ModeProps;\r\n  cubeProps?: ModeProps;\r\n}\r\n\r\nexport default function FluidGlass({ mode = 'lens', lensProps = {}, barProps = {}, cubeProps = {} }: FluidGlassProps) {\r\n  const Wrapper = mode === 'bar' ? Bar : mode === 'cube' ? Cube : Lens;\r\n  const rawOverrides = mode === 'bar' ? barProps : mode === 'cube' ? cubeProps : lensProps;\r\n\r\n  const {\r\n    navItems = [\r\n      { label: 'Home', link: '' },\r\n      { label: 'About', link: '' },\r\n      { label: 'Contact', link: '' }\r\n    ],\r\n    ...modeProps\r\n  } = rawOverrides;\r\n\r\n  return (\r\n    <Canvas camera={{ position: [0, 0, 20], fov: 15 }} gl={{ alpha: true }}>\r\n      <ScrollControls damping={0.2} pages={3} distance={0.4}>\r\n        {mode === 'bar' && <NavItems items={navItems as NavItem[]} />}\r\n        <Wrapper modeProps={modeProps}>\r\n          <Scroll>\r\n            <Typography />\r\n            <Images />\r\n          </Scroll>\r\n          <Scroll html />\r\n          <Preload />\r\n        </Wrapper>\r\n      </ScrollControls>\r\n    </Canvas>\r\n  );\r\n}\r\n\r\ntype MeshProps = ThreeElements['mesh'];\r\n\r\ninterface ModeWrapperProps extends MeshProps {\r\n  children?: ReactNode;\r\n  glb: string;\r\n  geometryKey: string;\r\n  lockToBottom?: boolean;\r\n  followPointer?: boolean;\r\n  modeProps?: ModeProps;\r\n}\r\n\r\ninterface ZoomMaterial extends THREE.Material {\r\n  zoom: number;\r\n}\r\n\r\ninterface ZoomMesh extends THREE.Mesh<THREE.BufferGeometry, ZoomMaterial> {}\r\n\r\ntype ZoomGroup = THREE.Group & { children: ZoomMesh[] };\r\n\r\nconst ModeWrapper = memo(function ModeWrapper({\r\n  children,\r\n  glb,\r\n  geometryKey,\r\n  lockToBottom = false,\r\n  followPointer = true,\r\n  modeProps = {},\r\n  ...props\r\n}: ModeWrapperProps) {\r\n  const ref = useRef<THREE.Mesh>(null!);\r\n  const { nodes } = useGLTF(glb);\r\n  const buffer = useFBO();\r\n  const { viewport: vp } = useThree();\r\n  const [scene] = useState<THREE.Scene>(() => new THREE.Scene());\r\n  const geoWidthRef = useRef<number>(1);\r\n\r\n  useEffect(() => {\r\n    const geo = (nodes[geometryKey] as THREE.Mesh)?.geometry;\r\n    geo.computeBoundingBox();\r\n    geoWidthRef.current = geo.boundingBox!.max.x - geo.boundingBox!.min.x || 1;\r\n  }, [nodes, geometryKey]);\r\n\r\n  useFrame((state, delta) => {\r\n    const { gl, viewport, pointer, camera } = state;\r\n    const v = viewport.getCurrentViewport(camera, [0, 0, 15]);\r\n\r\n    const destX = followPointer ? (pointer.x * v.width) / 2 : 0;\r\n    const destY = lockToBottom ? -v.height / 2 + 0.2 : followPointer ? (pointer.y * v.height) / 2 : 0;\r\n    easing.damp3(ref.current.position, [destX, destY, 15], 0.15, delta);\r\n\r\n    if ((modeProps as { scale?: number }).scale == null) {\r\n      const maxWorld = v.width * 0.9;\r\n      const desired = maxWorld / geoWidthRef.current;\r\n      ref.current.scale.setScalar(Math.min(0.15, desired));\r\n    }\r\n\r\n    gl.setRenderTarget(buffer);\r\n    gl.render(scene, camera);\r\n    gl.setRenderTarget(null);\r\n    gl.setClearColor(0x5227ff, 1);\r\n  });\r\n\r\n  const { scale, ior, thickness, anisotropy, chromaticAberration, ...extraMat } = modeProps as {\r\n    scale?: number;\r\n    ior?: number;\r\n    thickness?: number;\r\n    anisotropy?: number;\r\n    chromaticAberration?: number;\r\n    [key: string]: unknown;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {createPortal(children, scene)}\r\n      <mesh scale={[vp.width, vp.height, 1]}>\r\n        <planeGeometry />\r\n        <meshBasicMaterial map={buffer.texture} transparent />\r\n      </mesh>\r\n      <mesh\r\n        ref={ref}\r\n        scale={scale ?? 0.15}\r\n        rotation-x={Math.PI / 2}\r\n        geometry={(nodes[geometryKey] as THREE.Mesh)?.geometry}\r\n        {...props}\r\n      >\r\n        <MeshTransmissionMaterial\r\n          buffer={buffer.texture}\r\n          ior={ior ?? 1.15}\r\n          thickness={thickness ?? 5}\r\n          anisotropy={anisotropy ?? 0.01}\r\n          chromaticAberration={chromaticAberration ?? 0.1}\r\n          {...(typeof extraMat === 'object' && extraMat !== null ? extraMat : {})}\r\n        />\r\n      </mesh>\r\n    </>\r\n  );\r\n});\r\n\r\nfunction Lens({ modeProps, ...p }: { modeProps?: ModeProps } & MeshProps) {\r\n  return <ModeWrapper glb=\"/assets/3d/lens.glb\" geometryKey=\"Cylinder\" followPointer modeProps={modeProps} {...p} />;\r\n}\r\n\r\nfunction Cube({ modeProps, ...p }: { modeProps?: ModeProps } & MeshProps) {\r\n  return <ModeWrapper glb=\"/assets/3d/cube.glb\" geometryKey=\"Cube\" followPointer modeProps={modeProps} {...p} />;\r\n}\r\n\r\nfunction Bar({ modeProps = {}, ...p }: { modeProps?: ModeProps } & MeshProps) {\r\n  const defaultMat = {\r\n    transmission: 1,\r\n    roughness: 0,\r\n    thickness: 10,\r\n    ior: 1.15,\r\n    color: '#ffffff',\r\n    attenuationColor: '#ffffff',\r\n    attenuationDistance: 0.25\r\n  };\r\n\r\n  return (\r\n    <ModeWrapper\r\n      glb=\"/assets/3d/bar.glb\"\r\n      geometryKey=\"Cube\"\r\n      lockToBottom\r\n      followPointer={false}\r\n      modeProps={{ ...defaultMat, ...modeProps }}\r\n      {...p}\r\n    />\r\n  );\r\n}\r\n\r\nfunction NavItems({ items }: { items: NavItem[] }) {\r\n  const group = useRef<THREE.Group>(null!);\r\n  const { viewport, camera } = useThree();\r\n\r\n  const DEVICE = {\r\n    mobile: { max: 639, spacing: 0.2, fontSize: 0.035 },\r\n    tablet: { max: 1023, spacing: 0.24, fontSize: 0.045 },\r\n    desktop: { max: Infinity, spacing: 0.3, fontSize: 0.045 }\r\n  };\r\n  const getDevice = () => {\r\n    const w = window.innerWidth;\r\n    return w <= DEVICE.mobile.max ? 'mobile' : w <= DEVICE.tablet.max ? 'tablet' : 'desktop';\r\n  };\r\n\r\n  const [device, setDevice] = useState<keyof typeof DEVICE>(getDevice());\r\n\r\n  useEffect(() => {\r\n    const onResize = () => setDevice(getDevice());\r\n    window.addEventListener('resize', onResize);\r\n    return () => window.removeEventListener('resize', onResize);\r\n  }, []);\r\n\r\n  const { spacing, fontSize } = DEVICE[device];\r\n\r\n  useFrame(() => {\r\n    if (!group.current) return;\r\n    const v = viewport.getCurrentViewport(camera, [0, 0, 15]);\r\n    group.current.position.set(0, -v.height / 2 + 0.2, 15.1);\r\n\r\n    group.current.children.forEach((child, i) => {\r\n      child.position.x = (i - (items.length - 1) / 2) * spacing;\r\n    });\r\n  });\r\n\r\n  const handleNavigate = (link: string) => {\r\n    if (!link) return;\r\n    link.startsWith('#') ? (window.location.hash = link) : (window.location.href = link);\r\n  };\r\n\r\n  return (\r\n    <group ref={group} renderOrder={10}>\r\n      {items.map(({ label, link }) => (\r\n        <Text\r\n          key={label}\r\n          fontSize={fontSize}\r\n          color=\"white\"\r\n          anchorX=\"center\"\r\n          anchorY=\"middle\"\r\n          outlineWidth={0}\r\n          outlineBlur=\"20%\"\r\n          outlineColor=\"#000\"\r\n          outlineOpacity={0.5}\r\n          renderOrder={10}\r\n          onClick={e => {\r\n            e.stopPropagation();\r\n            handleNavigate(link);\r\n          }}\r\n          onPointerOver={() => (document.body.style.cursor = 'pointer')}\r\n          onPointerOut={() => (document.body.style.cursor = 'auto')}\r\n        >\r\n          {label}\r\n        </Text>\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\nfunction Images() {\r\n  const group = useRef<ZoomGroup>(null!);\r\n  const data = useScroll();\r\n  const { height } = useThree(s => s.viewport);\r\n\r\n  useFrame(() => {\r\n    group.current.children[0].material.zoom = 1 + data.range(0, 1 / 3) / 3;\r\n    group.current.children[1].material.zoom = 1 + data.range(0, 1 / 3) / 3;\r\n    group.current.children[2].material.zoom = 1 + data.range(1.15 / 3, 1 / 3) / 2;\r\n    group.current.children[3].material.zoom = 1 + data.range(1.15 / 3, 1 / 3) / 2;\r\n    group.current.children[4].material.zoom = 1 + data.range(1.15 / 3, 1 / 3) / 2;\r\n  });\r\n\r\n  return (\r\n    <group ref={group}>\r\n      <Image\r\n        position={[-2, 0, 0]}\r\n        scale={[3, height / 1.1]}\r\n        url=\"/assets/demo/cs1.webp\"\r\n      />\r\n      <Image\r\n        position={[2, 0, 3]}\r\n        scale={3}\r\n        url=\"/assets/demo/cs2.webp\"\r\n      />\r\n      <Image\r\n        position={[-2.05, -height, 6]}\r\n        scale={[1, 3]}\r\n        url=\"/assets/demo/cs3.webp\"\r\n      />\r\n      <Image\r\n        position={[-0.6, -height, 9]}\r\n        scale={[1, 2]}\r\n        url=\"/assets/demo/cs1.webp\"\r\n      />\r\n      <Image\r\n        position={[0.75, -height, 10.5]}\r\n        scale={1.5}\r\n        url=\"/assets/demo/cs2.webp\"\r\n      />\r\n    </group>\r\n  );\r\n}\r\n\r\nfunction Typography() {\r\n  const DEVICE = {\r\n    mobile: { fontSize: 0.2 },\r\n    tablet: { fontSize: 0.4 },\r\n    desktop: { fontSize: 0.6 }\r\n  };\r\n  const getDevice = () => {\r\n    const w = window.innerWidth;\r\n    return w <= 639 ? 'mobile' : w <= 1023 ? 'tablet' : 'desktop';\r\n  };\r\n\r\n  const [device, setDevice] = useState<keyof typeof DEVICE>(getDevice());\r\n\r\n  useEffect(() => {\r\n    const onResize = () => setDevice(getDevice());\r\n    window.addEventListener('resize', onResize);\r\n    return () => window.removeEventListener('resize', onResize);\r\n  }, []);\r\n\r\n  const { fontSize } = DEVICE[device];\r\n\r\n  return (\r\n    <Text\r\n      position={[0, 0, 12]}\r\n      fontSize={fontSize}\r\n      letterSpacing={-0.05}\r\n      outlineWidth={0}\r\n      outlineBlur=\"20%\"\r\n      outlineColor=\"#000\"\r\n      outlineOpacity={0.5}\r\n      color=\"white\"\r\n      anchorX=\"center\"\r\n      anchorY=\"middle\"\r\n    >\r\n      React Bits\r\n    </Text>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}