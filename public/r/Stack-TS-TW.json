{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Stack-TS-TW",
  "type": "registry:block",
  "title": "Stack",
  "description": "Layered stack with swipe animations and smooth transitions.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Components/Stack/Stack.tsx",
      "content": "import { motion, useMotionValue, useTransform } from 'motion/react';\r\nimport { useState } from 'react';\r\n\r\ninterface CardRotateProps {\r\n  children: React.ReactNode;\r\n  onSendToBack: () => void;\r\n  sensitivity: number;\r\n}\r\n\r\nfunction CardRotate({ children, onSendToBack, sensitivity }: CardRotateProps) {\r\n  const x = useMotionValue(0);\r\n  const y = useMotionValue(0);\r\n  const rotateX = useTransform(y, [-100, 100], [60, -60]);\r\n  const rotateY = useTransform(x, [-100, 100], [-60, 60]);\r\n\r\n  function handleDragEnd(_: never, info: { offset: { x: number; y: number } }) {\r\n    if (Math.abs(info.offset.x) > sensitivity || Math.abs(info.offset.y) > sensitivity) {\r\n      onSendToBack();\r\n    } else {\r\n      x.set(0);\r\n      y.set(0);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"absolute cursor-grab\"\r\n      style={{ x, y, rotateX, rotateY }}\r\n      drag\r\n      dragConstraints={{ top: 0, right: 0, bottom: 0, left: 0 }}\r\n      dragElastic={0.6}\r\n      whileTap={{ cursor: 'grabbing' }}\r\n      onDragEnd={handleDragEnd}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\ninterface StackProps {\r\n  randomRotation?: boolean;\r\n  sensitivity?: number;\r\n  cardDimensions?: { width: number; height: number };\r\n  sendToBackOnClick?: boolean;\r\n  cardsData?: { id: number; img: string }[];\r\n  animationConfig?: { stiffness: number; damping: number };\r\n}\r\n\r\nexport default function Stack({\r\n  randomRotation = false,\r\n  sensitivity = 200,\r\n  cardDimensions = { width: 208, height: 208 },\r\n  cardsData = [],\r\n  animationConfig = { stiffness: 260, damping: 20 },\r\n  sendToBackOnClick = false\r\n}: StackProps) {\r\n  const [cards, setCards] = useState(\r\n    cardsData.length\r\n      ? cardsData\r\n      : [\r\n          {\r\n            id: 1,\r\n            img: 'https://images.unsplash.com/photo-1480074568708-e7b720bb3f09?q=80&w=500&auto=format'\r\n          },\r\n          {\r\n            id: 2,\r\n            img: 'https://images.unsplash.com/photo-1449844908441-8829872d2607?q=80&w=500&auto=format'\r\n          },\r\n          {\r\n            id: 3,\r\n            img: 'https://images.unsplash.com/photo-1452626212852-811d58933cae?q=80&w=500&auto=format'\r\n          },\r\n          {\r\n            id: 4,\r\n            img: 'https://images.unsplash.com/photo-1572120360610-d971b9d7767c?q=80&w=500&auto=format'\r\n          }\r\n        ]\r\n  );\r\n\r\n  const sendToBack = (id: number) => {\r\n    setCards(prev => {\r\n      const newCards = [...prev];\r\n      const index = newCards.findIndex(card => card.id === id);\r\n      const [card] = newCards.splice(index, 1);\r\n      newCards.unshift(card);\r\n      return newCards;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"relative\"\r\n      style={{\r\n        width: cardDimensions.width,\r\n        height: cardDimensions.height,\r\n        perspective: 600\r\n      }}\r\n    >\r\n      {cards.map((card, index) => {\r\n        const randomRotate = randomRotation ? Math.random() * 10 - 5 : 0;\r\n\r\n        return (\r\n          <CardRotate key={card.id} onSendToBack={() => sendToBack(card.id)} sensitivity={sensitivity}>\r\n            <motion.div\r\n              className=\"rounded-2xl overflow-hidden border-4 border-white\"\r\n              onClick={() => sendToBackOnClick && sendToBack(card.id)}\r\n              animate={{\r\n                rotateZ: (cards.length - index - 1) * 4 + randomRotate,\r\n                scale: 1 + index * 0.06 - cards.length * 0.06,\r\n                transformOrigin: '90% 90%'\r\n              }}\r\n              initial={false}\r\n              transition={{\r\n                type: 'spring',\r\n                stiffness: animationConfig.stiffness,\r\n                damping: animationConfig.damping\r\n              }}\r\n              style={{\r\n                width: cardDimensions.width,\r\n                height: cardDimensions.height\r\n              }}\r\n            >\r\n              <img src={card.img} alt={`card-${card.id}`} className=\"w-full h-full object-cover pointer-events-none\" />\r\n            </motion.div>\r\n          </CardRotate>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}