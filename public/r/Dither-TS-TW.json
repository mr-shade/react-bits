{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Dither-TS-TW",
  "type": "registry:block",
  "title": "Dither",
  "description": "Retro dithered noise shader background.",
  "dependencies": [
    "@react-three/fiber",
    "@react-three/postprocessing",
    "postprocessing",
    "three"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Backgrounds/Dither/Dither.tsx",
      "content": "/* eslint-disable react/no-unknown-property */\r\nimport { useRef, useState, useEffect, forwardRef } from 'react';\r\nimport { Canvas, useFrame, useThree, ThreeEvent } from '@react-three/fiber';\r\nimport { EffectComposer, wrapEffect } from '@react-three/postprocessing';\r\nimport { Effect } from 'postprocessing';\r\nimport * as THREE from 'three';\r\n\r\nconst waveVertexShader = `\r\nprecision highp float;\r\nvarying vec2 vUv;\r\nvoid main() {\r\n  vUv = uv;\r\n  vec4 modelPosition = modelMatrix * vec4(position, 1.0);\r\n  vec4 viewPosition = viewMatrix * modelPosition;\r\n  gl_Position = projectionMatrix * viewPosition;\r\n}\r\n`;\r\n\r\nconst waveFragmentShader = `\r\nprecision highp float;\r\nuniform vec2 resolution;\r\nuniform float time;\r\nuniform float waveSpeed;\r\nuniform float waveFrequency;\r\nuniform float waveAmplitude;\r\nuniform vec3 waveColor;\r\nuniform vec2 mousePos;\r\nuniform int enableMouseInteraction;\r\nuniform float mouseRadius;\r\n\r\nvec4 mod289(vec4 x) { return x - floor(x * (1.0/289.0)) * 289.0; }\r\nvec4 permute(vec4 x) { return mod289(((x * 34.0) + 1.0) * x); }\r\nvec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\r\nvec2 fade(vec2 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }\r\n\r\nfloat cnoise(vec2 P) {\r\n  vec4 Pi = floor(P.xyxy) + vec4(0.0,0.0,1.0,1.0);\r\n  vec4 Pf = fract(P.xyxy) - vec4(0.0,0.0,1.0,1.0);\r\n  Pi = mod289(Pi);\r\n  vec4 ix = Pi.xzxz;\r\n  vec4 iy = Pi.yyww;\r\n  vec4 fx = Pf.xzxz;\r\n  vec4 fy = Pf.yyww;\r\n  vec4 i = permute(permute(ix) + iy);\r\n  vec4 gx = fract(i * (1.0/41.0)) * 2.0 - 1.0;\r\n  vec4 gy = abs(gx) - 0.5;\r\n  vec4 tx = floor(gx + 0.5);\r\n  gx = gx - tx;\r\n  vec2 g00 = vec2(gx.x, gy.x);\r\n  vec2 g10 = vec2(gx.y, gy.y);\r\n  vec2 g01 = vec2(gx.z, gy.z);\r\n  vec2 g11 = vec2(gx.w, gy.w);\r\n  vec4 norm = taylorInvSqrt(vec4(dot(g00,g00), dot(g01,g01), dot(g10,g10), dot(g11,g11)));\r\n  g00 *= norm.x; g01 *= norm.y; g10 *= norm.z; g11 *= norm.w;\r\n  float n00 = dot(g00, vec2(fx.x, fy.x));\r\n  float n10 = dot(g10, vec2(fx.y, fy.y));\r\n  float n01 = dot(g01, vec2(fx.z, fy.z));\r\n  float n11 = dot(g11, vec2(fx.w, fy.w));\r\n  vec2 fade_xy = fade(Pf.xy);\r\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\r\n  return 2.3 * mix(n_x.x, n_x.y, fade_xy.y);\r\n}\r\n\r\nconst int OCTAVES = 4;\r\nfloat fbm(vec2 p) {\r\n  float value = 0.0;\r\n  float amp = 1.0;\r\n  float freq = waveFrequency;\r\n  for (int i = 0; i < OCTAVES; i++) {\r\n    value += amp * abs(cnoise(p));\r\n    p *= freq;\r\n    amp *= waveAmplitude;\r\n  }\r\n  return value;\r\n}\r\n\r\nfloat pattern(vec2 p) {\r\n  vec2 p2 = p - time * waveSpeed;\r\n  return fbm(p + fbm(p2)); \r\n}\r\n\r\nvoid main() {\r\n  vec2 uv = gl_FragCoord.xy / resolution.xy;\r\n  uv -= 0.5;\r\n  uv.x *= resolution.x / resolution.y;\r\n  float f = pattern(uv);\r\n  if (enableMouseInteraction == 1) {\r\n    vec2 mouseNDC = (mousePos / resolution - 0.5) * vec2(1.0, -1.0);\r\n    mouseNDC.x *= resolution.x / resolution.y;\r\n    float dist = length(uv - mouseNDC);\r\n    float effect = 1.0 - smoothstep(0.0, mouseRadius, dist);\r\n    f -= 0.5 * effect;\r\n  }\r\n  vec3 col = mix(vec3(0.0), waveColor, f);\r\n  gl_FragColor = vec4(col, 1.0);\r\n}\r\n`;\r\n\r\nconst ditherFragmentShader = `\r\nprecision highp float;\r\nuniform float colorNum;\r\nuniform float pixelSize;\r\nconst float bayerMatrix8x8[64] = float[64](\r\n  0.0/64.0, 48.0/64.0, 12.0/64.0, 60.0/64.0,  3.0/64.0, 51.0/64.0, 15.0/64.0, 63.0/64.0,\r\n  32.0/64.0,16.0/64.0, 44.0/64.0, 28.0/64.0, 35.0/64.0,19.0/64.0, 47.0/64.0, 31.0/64.0,\r\n  8.0/64.0, 56.0/64.0,  4.0/64.0, 52.0/64.0, 11.0/64.0,59.0/64.0,  7.0/64.0, 55.0/64.0,\r\n  40.0/64.0,24.0/64.0, 36.0/64.0, 20.0/64.0, 43.0/64.0,27.0/64.0, 39.0/64.0, 23.0/64.0,\r\n  2.0/64.0, 50.0/64.0, 14.0/64.0, 62.0/64.0,  1.0/64.0,49.0/64.0, 13.0/64.0, 61.0/64.0,\r\n  34.0/64.0,18.0/64.0, 46.0/64.0, 30.0/64.0, 33.0/64.0,17.0/64.0, 45.0/64.0, 29.0/64.0,\r\n  10.0/64.0,58.0/64.0,  6.0/64.0, 54.0/64.0,  9.0/64.0,57.0/64.0,  5.0/64.0, 53.0/64.0,\r\n  42.0/64.0,26.0/64.0, 38.0/64.0, 22.0/64.0, 41.0/64.0,25.0/64.0, 37.0/64.0, 21.0/64.0\r\n);\r\n\r\nvec3 dither(vec2 uv, vec3 color) {\r\n  vec2 scaledCoord = floor(uv * resolution / pixelSize);\r\n  int x = int(mod(scaledCoord.x, 8.0));\r\n  int y = int(mod(scaledCoord.y, 8.0));\r\n  float threshold = bayerMatrix8x8[y * 8 + x] - 0.25;\r\n  float step = 1.0 / (colorNum - 1.0);\r\n  color += threshold * step;\r\n  float bias = 0.2;\r\n  color = clamp(color - bias, 0.0, 1.0);\r\n  return floor(color * (colorNum - 1.0) + 0.5) / (colorNum - 1.0);\r\n}\r\n\r\nvoid mainImage(in vec4 inputColor, in vec2 uv, out vec4 outputColor) {\r\n  vec2 normalizedPixelSize = pixelSize / resolution;\r\n  vec2 uvPixel = normalizedPixelSize * floor(uv / normalizedPixelSize);\r\n  vec4 color = texture2D(inputBuffer, uvPixel);\r\n  color.rgb = dither(uv, color.rgb);\r\n  outputColor = color;\r\n}\r\n`;\r\n\r\nclass RetroEffectImpl extends Effect {\r\n  public uniforms: Map<string, THREE.Uniform<any>>;\r\n  constructor() {\r\n    const uniforms = new Map<string, THREE.Uniform<any>>([\r\n      ['colorNum', new THREE.Uniform(4.0)],\r\n      ['pixelSize', new THREE.Uniform(2.0)]\r\n    ]);\r\n    super('RetroEffect', ditherFragmentShader, { uniforms });\r\n    this.uniforms = uniforms;\r\n  }\r\n  set colorNum(value: number) {\r\n    this.uniforms.get('colorNum')!.value = value;\r\n  }\r\n  get colorNum(): number {\r\n    return this.uniforms.get('colorNum')!.value;\r\n  }\r\n  set pixelSize(value: number) {\r\n    this.uniforms.get('pixelSize')!.value = value;\r\n  }\r\n  get pixelSize(): number {\r\n    return this.uniforms.get('pixelSize')!.value;\r\n  }\r\n}\r\n\r\nconst RetroEffect = forwardRef<RetroEffectImpl, { colorNum: number; pixelSize: number }>((props, ref) => {\r\n  const { colorNum, pixelSize } = props;\r\n  const WrappedRetroEffect = wrapEffect(RetroEffectImpl);\r\n  return <WrappedRetroEffect ref={ref} colorNum={colorNum} pixelSize={pixelSize} />;\r\n});\r\n\r\nRetroEffect.displayName = 'RetroEffect';\r\n\r\ninterface WaveUniforms {\r\n  [key: string]: THREE.Uniform<any>;\r\n  time: THREE.Uniform<number>;\r\n  resolution: THREE.Uniform<THREE.Vector2>;\r\n  waveSpeed: THREE.Uniform<number>;\r\n  waveFrequency: THREE.Uniform<number>;\r\n  waveAmplitude: THREE.Uniform<number>;\r\n  waveColor: THREE.Uniform<THREE.Color>;\r\n  mousePos: THREE.Uniform<THREE.Vector2>;\r\n  enableMouseInteraction: THREE.Uniform<number>;\r\n  mouseRadius: THREE.Uniform<number>;\r\n}\r\n\r\ninterface DitheredWavesProps {\r\n  waveSpeed: number;\r\n  waveFrequency: number;\r\n  waveAmplitude: number;\r\n  waveColor: [number, number, number];\r\n  colorNum: number;\r\n  pixelSize: number;\r\n  disableAnimation: boolean;\r\n  enableMouseInteraction: boolean;\r\n  mouseRadius: number;\r\n}\r\n\r\nfunction DitheredWaves({\r\n  waveSpeed,\r\n  waveFrequency,\r\n  waveAmplitude,\r\n  waveColor,\r\n  colorNum,\r\n  pixelSize,\r\n  disableAnimation,\r\n  enableMouseInteraction,\r\n  mouseRadius\r\n}: DitheredWavesProps) {\r\n  const mesh = useRef<THREE.Mesh>(null);\r\n  const mouseRef = useRef(new THREE.Vector2());\r\n  const { viewport, size, gl } = useThree();\r\n\r\n  const waveUniformsRef = useRef<WaveUniforms>({\r\n    time: new THREE.Uniform(0),\r\n    resolution: new THREE.Uniform(new THREE.Vector2(0, 0)),\r\n    waveSpeed: new THREE.Uniform(waveSpeed),\r\n    waveFrequency: new THREE.Uniform(waveFrequency),\r\n    waveAmplitude: new THREE.Uniform(waveAmplitude),\r\n    waveColor: new THREE.Uniform(new THREE.Color(...waveColor)),\r\n    mousePos: new THREE.Uniform(new THREE.Vector2(0, 0)),\r\n    enableMouseInteraction: new THREE.Uniform(enableMouseInteraction ? 1 : 0),\r\n    mouseRadius: new THREE.Uniform(mouseRadius)\r\n  });\r\n\r\n  useEffect(() => {\r\n    const dpr = gl.getPixelRatio();\r\n    const newWidth = Math.floor(size.width * dpr);\r\n    const newHeight = Math.floor(size.height * dpr);\r\n    const currentRes = waveUniformsRef.current.resolution.value;\r\n    if (currentRes.x !== newWidth || currentRes.y !== newHeight) {\r\n      currentRes.set(newWidth, newHeight);\r\n    }\r\n  }, [size, gl]);\r\n\r\n  const prevColor = useRef([...waveColor]);\r\n  useFrame(({ clock }) => {\r\n    const u = waveUniformsRef.current;\r\n\r\n    if (!disableAnimation) {\r\n      u.time.value = clock.getElapsedTime();\r\n    }\r\n\r\n    if (u.waveSpeed.value !== waveSpeed) u.waveSpeed.value = waveSpeed;\r\n    if (u.waveFrequency.value !== waveFrequency) u.waveFrequency.value = waveFrequency;\r\n    if (u.waveAmplitude.value !== waveAmplitude) u.waveAmplitude.value = waveAmplitude;\r\n\r\n    if (!prevColor.current.every((v, i) => v === waveColor[i])) {\r\n      u.waveColor.value.set(...waveColor);\r\n      prevColor.current = [...waveColor];\r\n    }\r\n\r\n    u.enableMouseInteraction.value = enableMouseInteraction ? 1 : 0;\r\n    u.mouseRadius.value = mouseRadius;\r\n\r\n    if (enableMouseInteraction) {\r\n      u.mousePos.value.copy(mouseRef.current);\r\n    }\r\n  });\r\n\r\n  const handlePointerMove = (e: ThreeEvent<PointerEvent>) => {\r\n    if (!enableMouseInteraction) return;\r\n    const rect = gl.domElement.getBoundingClientRect();\r\n    const dpr = gl.getPixelRatio();\r\n    mouseRef.current.set((e.clientX - rect.left) * dpr, (e.clientY - rect.top) * dpr);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <mesh ref={mesh} scale={[viewport.width, viewport.height, 1]}>\r\n        <planeGeometry args={[1, 1]} />\r\n        <shaderMaterial\r\n          vertexShader={waveVertexShader}\r\n          fragmentShader={waveFragmentShader}\r\n          uniforms={waveUniformsRef.current}\r\n        />\r\n      </mesh>\r\n\r\n      <EffectComposer>\r\n        <RetroEffect colorNum={colorNum} pixelSize={pixelSize} />\r\n      </EffectComposer>\r\n\r\n      <mesh\r\n        onPointerMove={handlePointerMove}\r\n        position={[0, 0, 0.01]}\r\n        scale={[viewport.width, viewport.height, 1]}\r\n        visible={false}\r\n      >\r\n        <planeGeometry args={[1, 1]} />\r\n        <meshBasicMaterial transparent opacity={0} />\r\n      </mesh>\r\n    </>\r\n  );\r\n}\r\n\r\ninterface DitherProps {\r\n  waveSpeed?: number;\r\n  waveFrequency?: number;\r\n  waveAmplitude?: number;\r\n  waveColor?: [number, number, number];\r\n  colorNum?: number;\r\n  pixelSize?: number;\r\n  disableAnimation?: boolean;\r\n  enableMouseInteraction?: boolean;\r\n  mouseRadius?: number;\r\n}\r\n\r\nexport default function Dither({\r\n  waveSpeed = 0.05,\r\n  waveFrequency = 3,\r\n  waveAmplitude = 0.3,\r\n  waveColor = [0.5, 0.5, 0.5],\r\n  colorNum = 4,\r\n  pixelSize = 2,\r\n  disableAnimation = false,\r\n  enableMouseInteraction = true,\r\n  mouseRadius = 1\r\n}: DitherProps) {\r\n  return (\r\n    <Canvas\r\n      className=\"w-full h-full relative\"\r\n      camera={{ position: [0, 0, 6] }}\r\n      dpr={window.devicePixelRatio}\r\n      gl={{ antialias: true, preserveDrawingBuffer: true }}\r\n    >\r\n      <DitheredWaves\r\n        waveSpeed={waveSpeed}\r\n        waveFrequency={waveFrequency}\r\n        waveAmplitude={waveAmplitude}\r\n        waveColor={waveColor}\r\n        colorNum={colorNum}\r\n        pixelSize={pixelSize}\r\n        disableAnimation={disableAnimation}\r\n        enableMouseInteraction={enableMouseInteraction}\r\n        mouseRadius={mouseRadius}\r\n      />\r\n    </Canvas>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}