{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "CardSwap-TS-TW",
  "type": "registry:block",
  "title": "CardSwap",
  "description": "Cards animate position swapping with smooth layout transitions.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Components/CardSwap/CardSwap.tsx",
      "content": "import React, {\r\n  Children,\r\n  cloneElement,\r\n  forwardRef,\r\n  isValidElement,\r\n  ReactElement,\r\n  ReactNode,\r\n  RefObject,\r\n  useEffect,\r\n  useMemo,\r\n  useRef\r\n} from 'react';\r\nimport gsap from 'gsap';\r\n\r\nexport interface CardSwapProps {\r\n  width?: number | string;\r\n  height?: number | string;\r\n  cardDistance?: number;\r\n  verticalDistance?: number;\r\n  delay?: number;\r\n  pauseOnHover?: boolean;\r\n  onCardClick?: (idx: number) => void;\r\n  skewAmount?: number;\r\n  easing?: 'linear' | 'elastic';\r\n  children: ReactNode;\r\n}\r\n\r\nexport interface CardProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  customClass?: string;\r\n}\r\n\r\nexport const Card = forwardRef<HTMLDivElement, CardProps>(({ customClass, ...rest }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    {...rest}\r\n    className={`absolute top-1/2 left-1/2 rounded-xl border border-white bg-black [transform-style:preserve-3d] [will-change:transform] [backface-visibility:hidden] ${customClass ?? ''} ${rest.className ?? ''}`.trim()}\r\n  />\r\n));\r\nCard.displayName = 'Card';\r\n\r\ntype CardRef = RefObject<HTMLDivElement>;\r\ninterface Slot {\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n  zIndex: number;\r\n}\r\n\r\nconst makeSlot = (i: number, distX: number, distY: number, total: number): Slot => ({\r\n  x: i * distX,\r\n  y: -i * distY,\r\n  z: -i * distX * 1.5,\r\n  zIndex: total - i\r\n});\r\n\r\nconst placeNow = (el: HTMLElement, slot: Slot, skew: number) =>\r\n  gsap.set(el, {\r\n    x: slot.x,\r\n    y: slot.y,\r\n    z: slot.z,\r\n    xPercent: -50,\r\n    yPercent: -50,\r\n    skewY: skew,\r\n    transformOrigin: 'center center',\r\n    zIndex: slot.zIndex,\r\n    force3D: true\r\n  });\r\n\r\nconst CardSwap: React.FC<CardSwapProps> = ({\r\n  width = 500,\r\n  height = 400,\r\n  cardDistance = 60,\r\n  verticalDistance = 70,\r\n  delay = 5000,\r\n  pauseOnHover = false,\r\n  onCardClick,\r\n  skewAmount = 6,\r\n  easing = 'elastic',\r\n  children\r\n}) => {\r\n  const config =\r\n    easing === 'elastic'\r\n      ? {\r\n          ease: 'elastic.out(0.6,0.9)',\r\n          durDrop: 2,\r\n          durMove: 2,\r\n          durReturn: 2,\r\n          promoteOverlap: 0.9,\r\n          returnDelay: 0.05\r\n        }\r\n      : {\r\n          ease: 'power1.inOut',\r\n          durDrop: 0.8,\r\n          durMove: 0.8,\r\n          durReturn: 0.8,\r\n          promoteOverlap: 0.45,\r\n          returnDelay: 0.2\r\n        };\r\n\r\n  const childArr = useMemo(() => Children.toArray(children) as ReactElement<CardProps>[], [children]);\r\n  const refs = useMemo<CardRef[]>(() => childArr.map(() => React.createRef<HTMLDivElement>()), [childArr.length]);\r\n\r\n  const order = useRef<number[]>(Array.from({ length: childArr.length }, (_, i) => i));\r\n\r\n  const tlRef = useRef<gsap.core.Timeline | null>(null);\r\n  const intervalRef = useRef<number>();\r\n  const container = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const total = refs.length;\r\n    refs.forEach((r, i) => placeNow(r.current!, makeSlot(i, cardDistance, verticalDistance, total), skewAmount));\r\n\r\n    const swap = () => {\r\n      if (order.current.length < 2) return;\r\n\r\n      const [front, ...rest] = order.current;\r\n      const elFront = refs[front].current!;\r\n      const tl = gsap.timeline();\r\n      tlRef.current = tl;\r\n\r\n      tl.to(elFront, {\r\n        y: '+=500',\r\n        duration: config.durDrop,\r\n        ease: config.ease\r\n      });\r\n\r\n      tl.addLabel('promote', `-=${config.durDrop * config.promoteOverlap}`);\r\n      rest.forEach((idx, i) => {\r\n        const el = refs[idx].current!;\r\n        const slot = makeSlot(i, cardDistance, verticalDistance, refs.length);\r\n        tl.set(el, { zIndex: slot.zIndex }, 'promote');\r\n        tl.to(\r\n          el,\r\n          {\r\n            x: slot.x,\r\n            y: slot.y,\r\n            z: slot.z,\r\n            duration: config.durMove,\r\n            ease: config.ease\r\n          },\r\n          `promote+=${i * 0.15}`\r\n        );\r\n      });\r\n\r\n      const backSlot = makeSlot(refs.length - 1, cardDistance, verticalDistance, refs.length);\r\n      tl.addLabel('return', `promote+=${config.durMove * config.returnDelay}`);\r\n      tl.call(\r\n        () => {\r\n          gsap.set(elFront, { zIndex: backSlot.zIndex });\r\n        },\r\n        undefined,\r\n        'return'\r\n      );\r\n      tl.to(\r\n        elFront,\r\n        {\r\n          x: backSlot.x,\r\n          y: backSlot.y,\r\n          z: backSlot.z,\r\n          duration: config.durReturn,\r\n          ease: config.ease\r\n        },\r\n        'return'\r\n      );\r\n\r\n      tl.call(() => {\r\n        order.current = [...rest, front];\r\n      });\r\n    };\r\n\r\n    swap();\r\n    intervalRef.current = window.setInterval(swap, delay);\r\n\r\n    if (pauseOnHover) {\r\n      const node = container.current!;\r\n      const pause = () => {\r\n        tlRef.current?.pause();\r\n        clearInterval(intervalRef.current);\r\n      };\r\n      const resume = () => {\r\n        tlRef.current?.play();\r\n        intervalRef.current = window.setInterval(swap, delay);\r\n      };\r\n      node.addEventListener('mouseenter', pause);\r\n      node.addEventListener('mouseleave', resume);\r\n      return () => {\r\n        node.removeEventListener('mouseenter', pause);\r\n        node.removeEventListener('mouseleave', resume);\r\n        clearInterval(intervalRef.current);\r\n      };\r\n    }\r\n    return () => clearInterval(intervalRef.current);\r\n  }, [cardDistance, verticalDistance, delay, pauseOnHover, skewAmount, easing]);\r\n\r\n  const rendered = childArr.map((child, i) =>\r\n    isValidElement<CardProps>(child)\r\n      ? cloneElement(child, {\r\n          key: i,\r\n          ref: refs[i],\r\n          style: { width, height, ...(child.props.style ?? {}) },\r\n          onClick: e => {\r\n            child.props.onClick?.(e as React.MouseEvent<HTMLDivElement>);\r\n            onCardClick?.(i);\r\n          }\r\n        } as CardProps & React.RefAttributes<HTMLDivElement>)\r\n      : child\r\n  );\r\n\r\n  return (\r\n    <div\r\n      ref={container}\r\n      className=\"absolute bottom-0 right-0 transform translate-x-[5%] translate-y-[20%] origin-bottom-right perspective-[900px] overflow-visible max-[768px]:translate-x-[25%] max-[768px]:translate-y-[25%] max-[768px]:scale-[0.75] max-[480px]:translate-x-[25%] max-[480px]:translate-y-[25%] max-[480px]:scale-[0.55]\"\r\n      style={{ width, height }}\r\n    >\r\n      {rendered}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardSwap;\r\n",
      "type": "registry:component"
    }
  ]
}