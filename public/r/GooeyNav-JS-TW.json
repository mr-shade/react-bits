{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "GooeyNav-JS-TW",
  "type": "registry:block",
  "title": "GooeyNav",
  "description": "Navigation indicator morphs with gooey blob transitions between items.",
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Components/GooeyNav/GooeyNav.jsx",
      "content": "import { useRef, useEffect, useState } from 'react';\r\n\r\nconst GooeyNav = ({\r\n  items,\r\n  animationTime = 600,\r\n  particleCount = 15,\r\n  particleDistances = [90, 10],\r\n  particleR = 100,\r\n  timeVariance = 300,\r\n  colors = [1, 2, 3, 1, 2, 3, 1, 4],\r\n  initialActiveIndex = 0\r\n}) => {\r\n  const containerRef = useRef(null);\r\n  const navRef = useRef(null);\r\n  const filterRef = useRef(null);\r\n  const textRef = useRef(null);\r\n  const [activeIndex, setActiveIndex] = useState(initialActiveIndex);\r\n\r\n  const noise = (n = 1) => n / 2 - Math.random() * n;\r\n  const getXY = (distance, pointIndex, totalPoints) => {\r\n    const angle = ((360 + noise(8)) / totalPoints) * pointIndex * (Math.PI / 180);\r\n    return [distance * Math.cos(angle), distance * Math.sin(angle)];\r\n  };\r\n  const createParticle = (i, t, d, r) => {\r\n    let rotate = noise(r / 10);\r\n    return {\r\n      start: getXY(d[0], particleCount - i, particleCount),\r\n      end: getXY(d[1] + noise(7), particleCount - i, particleCount),\r\n      time: t,\r\n      scale: 1 + noise(0.2),\r\n      color: colors[Math.floor(Math.random() * colors.length)],\r\n      rotate: rotate > 0 ? (rotate + r / 20) * 10 : (rotate - r / 20) * 10\r\n    };\r\n  };\r\n  const makeParticles = element => {\r\n    const d = particleDistances;\r\n    const r = particleR;\r\n    const bubbleTime = animationTime * 2 + timeVariance;\r\n    element.style.setProperty('--time', `${bubbleTime}ms`);\r\n    for (let i = 0; i < particleCount; i++) {\r\n      const t = animationTime * 2 + noise(timeVariance * 2);\r\n      const p = createParticle(i, t, d, r);\r\n      element.classList.remove('active');\r\n      setTimeout(() => {\r\n        const particle = document.createElement('span');\r\n        const point = document.createElement('span');\r\n        particle.classList.add('particle');\r\n        particle.style.setProperty('--start-x', `${p.start[0]}px`);\r\n        particle.style.setProperty('--start-y', `${p.start[1]}px`);\r\n        particle.style.setProperty('--end-x', `${p.end[0]}px`);\r\n        particle.style.setProperty('--end-y', `${p.end[1]}px`);\r\n        particle.style.setProperty('--time', `${p.time}ms`);\r\n        particle.style.setProperty('--scale', `${p.scale}`);\r\n        particle.style.setProperty('--color', `var(--color-${p.color}, white)`);\r\n        particle.style.setProperty('--rotate', `${p.rotate}deg`);\r\n        point.classList.add('point');\r\n        particle.appendChild(point);\r\n        element.appendChild(particle);\r\n        requestAnimationFrame(() => {\r\n          element.classList.add('active');\r\n        });\r\n        setTimeout(() => {\r\n          try {\r\n            element.removeChild(particle);\r\n          } catch {\r\n            // do nothing\r\n          }\r\n        }, t);\r\n      }, 30);\r\n    }\r\n  };\r\n  const updateEffectPosition = element => {\r\n    if (!containerRef.current || !filterRef.current || !textRef.current) return;\r\n    const containerRect = containerRef.current.getBoundingClientRect();\r\n    const pos = element.getBoundingClientRect();\r\n    const styles = {\r\n      left: `${pos.x - containerRect.x}px`,\r\n      top: `${pos.y - containerRect.y}px`,\r\n      width: `${pos.width}px`,\r\n      height: `${pos.height}px`\r\n    };\r\n    Object.assign(filterRef.current.style, styles);\r\n    Object.assign(textRef.current.style, styles);\r\n    textRef.current.innerText = element.innerText;\r\n  };\r\n  const handleClick = (e, index) => {\r\n    const liEl = e.currentTarget;\r\n    if (activeIndex === index) return;\r\n    setActiveIndex(index);\r\n    updateEffectPosition(liEl);\r\n    if (filterRef.current) {\r\n      const particles = filterRef.current.querySelectorAll('.particle');\r\n      particles.forEach(p => filterRef.current.removeChild(p));\r\n    }\r\n    if (textRef.current) {\r\n      textRef.current.classList.remove('active');\r\n      void textRef.current.offsetWidth;\r\n      textRef.current.classList.add('active');\r\n    }\r\n    if (filterRef.current) {\r\n      makeParticles(filterRef.current);\r\n    }\r\n  };\r\n  const handleKeyDown = (e, index) => {\r\n    if (e.key === 'Enter' || e.key === ' ') {\r\n      e.preventDefault();\r\n      const liEl = e.currentTarget.parentElement;\r\n      if (liEl) {\r\n        handleClick({ currentTarget: liEl }, index);\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (!navRef.current || !containerRef.current) return;\r\n    const activeLi = navRef.current.querySelectorAll('li')[activeIndex];\r\n    if (activeLi) {\r\n      updateEffectPosition(activeLi);\r\n      textRef.current?.classList.add('active');\r\n    }\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      const currentActiveLi = navRef.current?.querySelectorAll('li')[activeIndex];\r\n      if (currentActiveLi) {\r\n        updateEffectPosition(currentActiveLi);\r\n      }\r\n    });\r\n    resizeObserver.observe(containerRef.current);\r\n    return () => resizeObserver.disconnect();\r\n  }, [activeIndex]);\r\n\r\n  return (\r\n    <>\r\n      {/* This effect is quite difficult to recreate faithfully using Tailwind, so a style tag is a necessary workaround */}\r\n      <style>\r\n        {`\r\n          :root {\r\n            --linear-ease: linear(0, 0.068, 0.19 2.7%, 0.804 8.1%, 1.037, 1.199 13.2%, 1.245, 1.27 15.8%, 1.274, 1.272 17.4%, 1.249 19.1%, 0.996 28%, 0.949, 0.928 33.3%, 0.926, 0.933 36.8%, 1.001 45.6%, 1.013, 1.019 50.8%, 1.018 54.4%, 1 63.1%, 0.995 68%, 1.001 85%, 1);\r\n          }\r\n          .effect {\r\n            position: absolute;\r\n            opacity: 1;\r\n            pointer-events: none;\r\n            display: grid;\r\n            place-items: center;\r\n            z-index: 1;\r\n          }\r\n          .effect.text {\r\n            color: white;\r\n            transition: color 0.3s ease;\r\n          }\r\n          .effect.text.active {\r\n            color: black;\r\n          }\r\n          .effect.filter {\r\n            filter: blur(7px) contrast(100) blur(0);\r\n            mix-blend-mode: lighten;\r\n          }\r\n          .effect.filter::before {\r\n            content: \"\";\r\n            position: absolute;\r\n            inset: -75px;\r\n            z-index: -2;\r\n            background: black;\r\n          }\r\n          .effect.filter::after {\r\n            content: \"\";\r\n            position: absolute;\r\n            inset: 0;\r\n            background: white;\r\n            transform: scale(0);\r\n            opacity: 0;\r\n            z-index: -1;\r\n            border-radius: 9999px;\r\n          }\r\n          .effect.active::after {\r\n            animation: pill 0.3s ease both;\r\n          }\r\n          @keyframes pill {\r\n            to {\r\n              transform: scale(1);\r\n              opacity: 1;\r\n            }\r\n          }\r\n          .particle,\r\n          .point {\r\n            display: block;\r\n            opacity: 0;\r\n            width: 20px;\r\n            height: 20px;\r\n            border-radius: 9999px;\r\n            transform-origin: center;\r\n          }\r\n          .particle {\r\n            --time: 5s;\r\n            position: absolute;\r\n            top: calc(50% - 8px);\r\n            left: calc(50% - 8px);\r\n            animation: particle calc(var(--time)) ease 1 -350ms;\r\n          }\r\n          .point {\r\n            background: var(--color);\r\n            opacity: 1;\r\n            animation: point calc(var(--time)) ease 1 -350ms;\r\n          }\r\n          @keyframes particle {\r\n            0% {\r\n              transform: rotate(0deg) translate(calc(var(--start-x)), calc(var(--start-y)));\r\n              opacity: 1;\r\n              animation-timing-function: cubic-bezier(0.55, 0, 1, 0.45);\r\n            }\r\n            70% {\r\n              transform: rotate(calc(var(--rotate) * 0.5)) translate(calc(var(--end-x) * 1.2), calc(var(--end-y) * 1.2));\r\n              opacity: 1;\r\n              animation-timing-function: ease;\r\n            }\r\n            85% {\r\n              transform: rotate(calc(var(--rotate) * 0.66)) translate(calc(var(--end-x)), calc(var(--end-y)));\r\n              opacity: 1;\r\n            }\r\n            100% {\r\n              transform: rotate(calc(var(--rotate) * 1.2)) translate(calc(var(--end-x) * 0.5), calc(var(--end-y) * 0.5));\r\n              opacity: 1;\r\n            }\r\n          }\r\n          @keyframes point {\r\n            0% {\r\n              transform: scale(0);\r\n              opacity: 0;\r\n              animation-timing-function: cubic-bezier(0.55, 0, 1, 0.45);\r\n            }\r\n            25% {\r\n              transform: scale(calc(var(--scale) * 0.25));\r\n            }\r\n            38% {\r\n              opacity: 1;\r\n            }\r\n            65% {\r\n              transform: scale(var(--scale));\r\n              opacity: 1;\r\n              animation-timing-function: ease;\r\n            }\r\n            85% {\r\n              transform: scale(var(--scale));\r\n              opacity: 1;\r\n            }\r\n            100% {\r\n              transform: scale(0);\r\n              opacity: 0;\r\n            }\r\n          }\r\n          li.active {\r\n            color: black;\r\n            text-shadow: none;\r\n          }\r\n          li.active::after {\r\n            opacity: 1;\r\n            transform: scale(1);\r\n          }\r\n          li::after {\r\n            content: \"\";\r\n            position: absolute;\r\n            inset: 0;\r\n            border-radius: 8px;\r\n            background: white;\r\n            opacity: 0;\r\n            transform: scale(0);\r\n            transition: all 0.3s ease;\r\n            z-index: -1;\r\n          }\r\n        `}\r\n      </style>\r\n      <div className=\"relative\" ref={containerRef}>\r\n        <nav className=\"flex relative\" style={{ transform: 'translate3d(0,0,0.01px)' }}>\r\n          <ul\r\n            ref={navRef}\r\n            className=\"flex gap-8 list-none p-0 px-4 m-0 relative z-[3]\"\r\n            style={{\r\n              color: 'white',\r\n              textShadow: '0 1px 1px hsl(205deg 30% 10% / 0.2)'\r\n            }}\r\n          >\r\n            {items.map((item, index) => (\r\n              <li\r\n                key={index}\r\n                className={`rounded-full relative cursor-pointer transition-[background-color_color_box-shadow] duration-300 ease shadow-[0_0_0.5px_1.5px_transparent] text-white ${\r\n                  activeIndex === index ? 'active' : ''\r\n                }`}\r\n              >\r\n                <a\r\n                  onClick={e => handleClick(e, index)}\r\n                  href={item.href}\r\n                  onKeyDown={e => handleKeyDown(e, index)}\r\n                  className=\"outline-none py-[0.6em] px-[1em] inline-block\"\r\n                >\r\n                  {item.label}\r\n                </a>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </nav>\r\n        <span className=\"effect filter\" ref={filterRef} />\r\n        <span className=\"effect text\" ref={textRef} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GooeyNav;\r\n",
      "type": "registry:component"
    }
  ]
}