{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Galaxy-TS-TW",
  "type": "registry:block",
  "title": "Galaxy",
  "description": "Parallax realistic starfield with pointer interactions.",
  "dependencies": [
    "ogl"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Backgrounds/Galaxy/Galaxy.tsx",
      "content": "import { Renderer, Program, Mesh, Color, Triangle } from 'ogl';\r\nimport { useEffect, useRef } from 'react';\r\n\r\nconst vertexShader = `\r\nattribute vec2 uv;\r\nattribute vec2 position;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n  vUv = uv;\r\n  gl_Position = vec4(position, 0, 1);\r\n}\r\n`;\r\n\r\nconst fragmentShader = `\r\nprecision highp float;\r\n\r\nuniform float uTime;\r\nuniform vec3 uResolution;\r\nuniform vec2 uFocal;\r\nuniform vec2 uRotation;\r\nuniform float uStarSpeed;\r\nuniform float uDensity;\r\nuniform float uHueShift;\r\nuniform float uSpeed;\r\nuniform vec2 uMouse;\r\nuniform float uGlowIntensity;\r\nuniform float uSaturation;\r\nuniform bool uMouseRepulsion;\r\nuniform float uTwinkleIntensity;\r\nuniform float uRotationSpeed;\r\nuniform float uRepulsionStrength;\r\nuniform float uMouseActiveFactor;\r\nuniform float uAutoCenterRepulsion;\r\nuniform bool uTransparent;\r\n\r\nvarying vec2 vUv;\r\n\r\n#define NUM_LAYER 4.0\r\n#define STAR_COLOR_CUTOFF 0.2\r\n#define MAT45 mat2(0.7071, -0.7071, 0.7071, 0.7071)\r\n#define PERIOD 3.0\r\n\r\nfloat Hash21(vec2 p) {\r\n  p = fract(p * vec2(123.34, 456.21));\r\n  p += dot(p, p + 45.32);\r\n  return fract(p.x * p.y);\r\n}\r\n\r\nfloat tri(float x) {\r\n  return abs(fract(x) * 2.0 - 1.0);\r\n}\r\n\r\nfloat tris(float x) {\r\n  float t = fract(x);\r\n  return 1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0));\r\n}\r\n\r\nfloat trisn(float x) {\r\n  float t = fract(x);\r\n  return 2.0 * (1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0))) - 1.0;\r\n}\r\n\r\nvec3 hsv2rgb(vec3 c) {\r\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\r\n}\r\n\r\nfloat Star(vec2 uv, float flare) {\r\n  float d = length(uv);\r\n  float m = (0.05 * uGlowIntensity) / d;\r\n  float rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\r\n  m += rays * flare * uGlowIntensity;\r\n  uv *= MAT45;\r\n  rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\r\n  m += rays * 0.3 * flare * uGlowIntensity;\r\n  m *= smoothstep(1.0, 0.2, d);\r\n  return m;\r\n}\r\n\r\nvec3 StarLayer(vec2 uv) {\r\n  vec3 col = vec3(0.0);\r\n\r\n  vec2 gv = fract(uv) - 0.5; \r\n  vec2 id = floor(uv);\r\n\r\n  for (int y = -1; y <= 1; y++) {\r\n    for (int x = -1; x <= 1; x++) {\r\n      vec2 offset = vec2(float(x), float(y));\r\n      vec2 si = id + vec2(float(x), float(y));\r\n      float seed = Hash21(si);\r\n      float size = fract(seed * 345.32);\r\n      float glossLocal = tri(uStarSpeed / (PERIOD * seed + 1.0));\r\n      float flareSize = smoothstep(0.9, 1.0, size) * glossLocal;\r\n\r\n      float red = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 1.0)) + STAR_COLOR_CUTOFF;\r\n      float blu = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 3.0)) + STAR_COLOR_CUTOFF;\r\n      float grn = min(red, blu) * seed;\r\n      vec3 base = vec3(red, grn, blu);\r\n      \r\n      float hue = atan(base.g - base.r, base.b - base.r) / (2.0 * 3.14159) + 0.5;\r\n      hue = fract(hue + uHueShift / 360.0);\r\n      float sat = length(base - vec3(dot(base, vec3(0.299, 0.587, 0.114)))) * uSaturation;\r\n      float val = max(max(base.r, base.g), base.b);\r\n      base = hsv2rgb(vec3(hue, sat, val));\r\n\r\n      vec2 pad = vec2(tris(seed * 34.0 + uTime * uSpeed / 10.0), tris(seed * 38.0 + uTime * uSpeed / 30.0)) - 0.5;\r\n\r\n      float star = Star(gv - offset - pad, flareSize);\r\n      vec3 color = base;\r\n\r\n      float twinkle = trisn(uTime * uSpeed + seed * 6.2831) * 0.5 + 1.0;\r\n      twinkle = mix(1.0, twinkle, uTwinkleIntensity);\r\n      star *= twinkle;\r\n      \r\n      col += star * size * color;\r\n    }\r\n  }\r\n\r\n  return col;\r\n}\r\n\r\nvoid main() {\r\n  vec2 focalPx = uFocal * uResolution.xy;\r\n  vec2 uv = (vUv * uResolution.xy - focalPx) / uResolution.y;\r\n\r\n  vec2 mouseNorm = uMouse - vec2(0.5);\r\n  \r\n  if (uAutoCenterRepulsion > 0.0) {\r\n    vec2 centerUV = vec2(0.0, 0.0);\r\n    float centerDist = length(uv - centerUV);\r\n    vec2 repulsion = normalize(uv - centerUV) * (uAutoCenterRepulsion / (centerDist + 0.1));\r\n    uv += repulsion * 0.05;\r\n  } else if (uMouseRepulsion) {\r\n    vec2 mousePosUV = (uMouse * uResolution.xy - focalPx) / uResolution.y;\r\n    float mouseDist = length(uv - mousePosUV);\r\n    vec2 repulsion = normalize(uv - mousePosUV) * (uRepulsionStrength / (mouseDist + 0.1));\r\n    uv += repulsion * 0.05 * uMouseActiveFactor;\r\n  } else {\r\n    vec2 mouseOffset = mouseNorm * 0.1 * uMouseActiveFactor;\r\n    uv += mouseOffset;\r\n  }\r\n\r\n  float autoRotAngle = uTime * uRotationSpeed;\r\n  mat2 autoRot = mat2(cos(autoRotAngle), -sin(autoRotAngle), sin(autoRotAngle), cos(autoRotAngle));\r\n  uv = autoRot * uv;\r\n\r\n  uv = mat2(uRotation.x, -uRotation.y, uRotation.y, uRotation.x) * uv;\r\n\r\n  vec3 col = vec3(0.0);\r\n\r\n  for (float i = 0.0; i < 1.0; i += 1.0 / NUM_LAYER) {\r\n    float depth = fract(i + uStarSpeed * uSpeed);\r\n    float scale = mix(20.0 * uDensity, 0.5 * uDensity, depth);\r\n    float fade = depth * smoothstep(1.0, 0.9, depth);\r\n    col += StarLayer(uv * scale + i * 453.32) * fade;\r\n  }\r\n\r\n  if (uTransparent) {\r\n    float alpha = length(col);\r\n    alpha = smoothstep(0.0, 0.3, alpha);\r\n    alpha = min(alpha, 1.0);\r\n    gl_FragColor = vec4(col, alpha);\r\n  } else {\r\n    gl_FragColor = vec4(col, 1.0);\r\n  }\r\n}\r\n`;\r\n\r\ninterface GalaxyProps {\r\n  focal?: [number, number];\r\n  rotation?: [number, number];\r\n  starSpeed?: number;\r\n  density?: number;\r\n  hueShift?: number;\r\n  disableAnimation?: boolean;\r\n  speed?: number;\r\n  mouseInteraction?: boolean;\r\n  glowIntensity?: number;\r\n  saturation?: number;\r\n  mouseRepulsion?: boolean;\r\n  twinkleIntensity?: number;\r\n  rotationSpeed?: number;\r\n  repulsionStrength?: number;\r\n  autoCenterRepulsion?: number;\r\n  transparent?: boolean;\r\n}\r\n\r\nexport default function Galaxy({\r\n  focal = [0.5, 0.5],\r\n  rotation = [1.0, 0.0],\r\n  starSpeed = 0.5,\r\n  density = 1,\r\n  hueShift = 140,\r\n  disableAnimation = false,\r\n  speed = 1.0,\r\n  mouseInteraction = true,\r\n  glowIntensity = 0.3,\r\n  saturation = 0.0,\r\n  mouseRepulsion = true,\r\n  repulsionStrength = 2,\r\n  twinkleIntensity = 0.3,\r\n  rotationSpeed = 0.1,\r\n  autoCenterRepulsion = 0,\r\n  transparent = true,\r\n  ...rest\r\n}: GalaxyProps) {\r\n  const ctnDom = useRef<HTMLDivElement>(null);\r\n  const targetMousePos = useRef({ x: 0.5, y: 0.5 });\r\n  const smoothMousePos = useRef({ x: 0.5, y: 0.5 });\r\n  const targetMouseActive = useRef(0.0);\r\n  const smoothMouseActive = useRef(0.0);\r\n\r\n  useEffect(() => {\r\n    if (!ctnDom.current) return;\r\n    const ctn = ctnDom.current;\r\n    const renderer = new Renderer({\r\n      alpha: transparent,\r\n      premultipliedAlpha: false\r\n    });\r\n    const gl = renderer.gl;\r\n\r\n    if (transparent) {\r\n      gl.enable(gl.BLEND);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n      gl.clearColor(0, 0, 0, 0);\r\n    } else {\r\n      gl.clearColor(0, 0, 0, 1);\r\n    }\r\n\r\n    let program: Program;\r\n\r\n    function resize() {\r\n      const scale = 1;\r\n      renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\r\n      if (program) {\r\n        program.uniforms.uResolution.value = new Color(\r\n          gl.canvas.width,\r\n          gl.canvas.height,\r\n          gl.canvas.width / gl.canvas.height\r\n        );\r\n      }\r\n    }\r\n    window.addEventListener('resize', resize, false);\r\n    resize();\r\n\r\n    const geometry = new Triangle(gl);\r\n    program = new Program(gl, {\r\n      vertex: vertexShader,\r\n      fragment: fragmentShader,\r\n      uniforms: {\r\n        uTime: { value: 0 },\r\n        uResolution: {\r\n          value: new Color(gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height)\r\n        },\r\n        uFocal: { value: new Float32Array(focal) },\r\n        uRotation: { value: new Float32Array(rotation) },\r\n        uStarSpeed: { value: starSpeed },\r\n        uDensity: { value: density },\r\n        uHueShift: { value: hueShift },\r\n        uSpeed: { value: speed },\r\n        uMouse: {\r\n          value: new Float32Array([smoothMousePos.current.x, smoothMousePos.current.y])\r\n        },\r\n        uGlowIntensity: { value: glowIntensity },\r\n        uSaturation: { value: saturation },\r\n        uMouseRepulsion: { value: mouseRepulsion },\r\n        uTwinkleIntensity: { value: twinkleIntensity },\r\n        uRotationSpeed: { value: rotationSpeed },\r\n        uRepulsionStrength: { value: repulsionStrength },\r\n        uMouseActiveFactor: { value: 0.0 },\r\n        uAutoCenterRepulsion: { value: autoCenterRepulsion },\r\n        uTransparent: { value: transparent }\r\n      }\r\n    });\r\n\r\n    const mesh = new Mesh(gl, { geometry, program });\r\n    let animateId: number;\r\n\r\n    function update(t: number) {\r\n      animateId = requestAnimationFrame(update);\r\n      if (!disableAnimation) {\r\n        program.uniforms.uTime.value = t * 0.001;\r\n        program.uniforms.uStarSpeed.value = (t * 0.001 * starSpeed) / 10.0;\r\n      }\r\n\r\n      const lerpFactor = 0.05;\r\n      smoothMousePos.current.x += (targetMousePos.current.x - smoothMousePos.current.x) * lerpFactor;\r\n      smoothMousePos.current.y += (targetMousePos.current.y - smoothMousePos.current.y) * lerpFactor;\r\n\r\n      smoothMouseActive.current += (targetMouseActive.current - smoothMouseActive.current) * lerpFactor;\r\n\r\n      program.uniforms.uMouse.value[0] = smoothMousePos.current.x;\r\n      program.uniforms.uMouse.value[1] = smoothMousePos.current.y;\r\n      program.uniforms.uMouseActiveFactor.value = smoothMouseActive.current;\r\n\r\n      renderer.render({ scene: mesh });\r\n    }\r\n    animateId = requestAnimationFrame(update);\r\n    ctn.appendChild(gl.canvas);\r\n\r\n    function handleMouseMove(e: MouseEvent) {\r\n      const rect = ctn.getBoundingClientRect();\r\n      const x = (e.clientX - rect.left) / rect.width;\r\n      const y = 1.0 - (e.clientY - rect.top) / rect.height;\r\n      targetMousePos.current = { x, y };\r\n      targetMouseActive.current = 1.0;\r\n    }\r\n\r\n    function handleMouseLeave() {\r\n      targetMouseActive.current = 0.0;\r\n    }\r\n\r\n    if (mouseInteraction) {\r\n      ctn.addEventListener('mousemove', handleMouseMove);\r\n      ctn.addEventListener('mouseleave', handleMouseLeave);\r\n    }\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animateId);\r\n      window.removeEventListener('resize', resize);\r\n      if (mouseInteraction) {\r\n        ctn.removeEventListener('mousemove', handleMouseMove);\r\n        ctn.removeEventListener('mouseleave', handleMouseLeave);\r\n      }\r\n      ctn.removeChild(gl.canvas);\r\n      gl.getExtension('WEBGL_lose_context')?.loseContext();\r\n    };\r\n  }, [\r\n    focal,\r\n    rotation,\r\n    starSpeed,\r\n    density,\r\n    hueShift,\r\n    disableAnimation,\r\n    speed,\r\n    mouseInteraction,\r\n    glowIntensity,\r\n    saturation,\r\n    mouseRepulsion,\r\n    twinkleIntensity,\r\n    rotationSpeed,\r\n    repulsionStrength,\r\n    autoCenterRepulsion,\r\n    transparent\r\n  ]);\r\n\r\n  return <div ref={ctnDom} className=\"w-full h-full relative\" {...rest} />;\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}