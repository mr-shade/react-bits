{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "CountUp-TS-CSS",
  "type": "registry:block",
  "title": "CountUp",
  "description": "Animated number counter supporting formatting and decimals.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/ts/default/src/ts-default/TextAnimations/CountUp/CountUp.tsx",
      "content": "import { useEffect, useRef } from 'react';\r\nimport { useInView, useMotionValue, useSpring } from 'motion/react';\r\n\r\ninterface CountUpProps {\r\n  to: number;\r\n  from?: number;\r\n  direction?: 'up' | 'down';\r\n  delay?: number;\r\n  duration?: number;\r\n  className?: string;\r\n  startWhen?: boolean;\r\n  separator?: string;\r\n  onStart?: () => void;\r\n  onEnd?: () => void;\r\n}\r\n\r\nexport default function CountUp({\r\n  to,\r\n  from = 0,\r\n  direction = 'up',\r\n  delay = 0,\r\n  duration = 2,\r\n  className = '',\r\n  startWhen = true,\r\n  separator = '',\r\n  onStart,\r\n  onEnd\r\n}: CountUpProps) {\r\n  const ref = useRef<HTMLSpanElement>(null);\r\n  const motionValue = useMotionValue(direction === 'down' ? to : from);\r\n\r\n  const damping = 20 + 40 * (1 / duration);\r\n  const stiffness = 100 * (1 / duration);\r\n\r\n  const springValue = useSpring(motionValue, {\r\n    damping,\r\n    stiffness\r\n  });\r\n\r\n  const isInView = useInView(ref, { once: true, margin: '0px' });\r\n\r\n  const getDecimalPlaces = (num: number): number => {\r\n    const str = num.toString();\r\n    if (str.includes('.')) {\r\n      const decimals = str.split('.')[1];\r\n      if (parseInt(decimals) !== 0) {\r\n        return decimals.length;\r\n      }\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const maxDecimals = Math.max(getDecimalPlaces(from), getDecimalPlaces(to));\r\n\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      ref.current.textContent = String(direction === 'down' ? to : from);\r\n    }\r\n  }, [from, to, direction]);\r\n\r\n  useEffect(() => {\r\n    if (isInView && startWhen) {\r\n      if (typeof onStart === 'function') {\r\n        onStart();\r\n      }\r\n\r\n      const timeoutId = setTimeout(() => {\r\n        motionValue.set(direction === 'down' ? from : to);\r\n      }, delay * 1000);\r\n\r\n      const durationTimeoutId = setTimeout(\r\n        () => {\r\n          if (typeof onEnd === 'function') {\r\n            onEnd();\r\n          }\r\n        },\r\n        delay * 1000 + duration * 1000\r\n      );\r\n\r\n      return () => {\r\n        clearTimeout(timeoutId);\r\n        clearTimeout(durationTimeoutId);\r\n      };\r\n    }\r\n  }, [isInView, startWhen, motionValue, direction, from, to, delay, onStart, onEnd, duration]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = springValue.on('change', latest => {\r\n      if (ref.current) {\r\n        const hasDecimals = maxDecimals > 0;\r\n\r\n        const options: Intl.NumberFormatOptions = {\r\n          useGrouping: !!separator,\r\n          minimumFractionDigits: hasDecimals ? maxDecimals : 0,\r\n          maximumFractionDigits: hasDecimals ? maxDecimals : 0\r\n        };\r\n\r\n        const formattedNumber = Intl.NumberFormat('en-US', options).format(latest);\r\n\r\n        ref.current.textContent = separator ? formattedNumber.replace(/,/g, separator) : formattedNumber;\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, [springValue, separator, maxDecimals]);\r\n\r\n  return <span className={className} ref={ref} />;\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}