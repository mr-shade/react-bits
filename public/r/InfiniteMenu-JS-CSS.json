{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "InfiniteMenu-JS-CSS",
  "type": "registry:block",
  "title": "InfiniteMenu",
  "description": "Horizontally looping menu effect that scrolls endlessly with seamless wrap.",
  "dependencies": [
    "gl-matrix"
  ],
  "files": [
    {
      "path": "public/default/src/content/Components/InfiniteMenu/InfiniteMenu.jsx",
      "content": "import { useEffect, useRef, useState } from 'react';\r\nimport { mat4, quat, vec2, vec3 } from 'gl-matrix';\r\nimport './InfiniteMenu.css';\r\n\r\nconst discVertShaderSource = `#version 300 es\r\n\r\nuniform mat4 uWorldMatrix;\r\nuniform mat4 uViewMatrix;\r\nuniform mat4 uProjectionMatrix;\r\nuniform vec3 uCameraPosition;\r\nuniform vec4 uRotationAxisVelocity;\r\n\r\nin vec3 aModelPosition;\r\nin vec3 aModelNormal;\r\nin vec2 aModelUvs;\r\nin mat4 aInstanceMatrix;\r\n\r\nout vec2 vUvs;\r\nout float vAlpha;\r\nflat out int vInstanceId;\r\n\r\n#define PI 3.141593\r\n\r\nvoid main() {\r\n    vec4 worldPosition = uWorldMatrix * aInstanceMatrix * vec4(aModelPosition, 1.);\r\n\r\n    vec3 centerPos = (uWorldMatrix * aInstanceMatrix * vec4(0., 0., 0., 1.)).xyz;\r\n    float radius = length(centerPos.xyz);\r\n\r\n    if (gl_VertexID > 0) {\r\n        vec3 rotationAxis = uRotationAxisVelocity.xyz;\r\n        float rotationVelocity = min(.15, uRotationAxisVelocity.w * 15.);\r\n        vec3 stretchDir = normalize(cross(centerPos, rotationAxis));\r\n        vec3 relativeVertexPos = normalize(worldPosition.xyz - centerPos);\r\n        float strength = dot(stretchDir, relativeVertexPos);\r\n        float invAbsStrength = min(0., abs(strength) - 1.);\r\n        strength = rotationVelocity * sign(strength) * abs(invAbsStrength * invAbsStrength * invAbsStrength + 1.);\r\n        worldPosition.xyz += stretchDir * strength;\r\n    }\r\n\r\n    worldPosition.xyz = radius * normalize(worldPosition.xyz);\r\n\r\n    gl_Position = uProjectionMatrix * uViewMatrix * worldPosition;\r\n\r\n    vAlpha = smoothstep(0.5, 1., normalize(worldPosition.xyz).z) * .9 + .1;\r\n    vUvs = aModelUvs;\r\n    vInstanceId = gl_InstanceID;\r\n}\r\n`;\r\n\r\nconst discFragShaderSource = `#version 300 es\r\nprecision highp float;\r\n\r\nuniform sampler2D uTex;\r\nuniform int uItemCount;\r\nuniform int uAtlasSize;\r\n\r\nout vec4 outColor;\r\n\r\nin vec2 vUvs;\r\nin float vAlpha;\r\nflat in int vInstanceId;\r\n\r\nvoid main() {\r\n    int itemIndex = vInstanceId % uItemCount;\r\n    int cellsPerRow = uAtlasSize;\r\n    int cellX = itemIndex % cellsPerRow;\r\n    int cellY = itemIndex / cellsPerRow;\r\n    vec2 cellSize = vec2(1.0) / vec2(float(cellsPerRow));\r\n    vec2 cellOffset = vec2(float(cellX), float(cellY)) * cellSize;\r\n\r\n    ivec2 texSize = textureSize(uTex, 0);\r\n    float imageAspect = float(texSize.x) / float(texSize.y);\r\n    float containerAspect = 1.0;\r\n    \r\n    float scale = max(imageAspect / containerAspect, \r\n                     containerAspect / imageAspect);\r\n    \r\n    vec2 st = vec2(vUvs.x, 1.0 - vUvs.y);\r\n    st = (st - 0.5) * scale + 0.5;\r\n    \r\n    st = clamp(st, 0.0, 1.0);\r\n    \r\n    st = st * cellSize + cellOffset;\r\n    \r\n    outColor = texture(uTex, st);\r\n    outColor.a *= vAlpha;\r\n}\r\n`;\r\n\r\nclass Face {\r\n  constructor(a, b, c) {\r\n    this.a = a;\r\n    this.b = b;\r\n    this.c = c;\r\n  }\r\n}\r\n\r\nclass Vertex {\r\n  constructor(x, y, z) {\r\n    this.position = vec3.fromValues(x, y, z);\r\n    this.normal = vec3.create();\r\n    this.uv = vec2.create();\r\n  }\r\n}\r\n\r\nclass Geometry {\r\n  constructor() {\r\n    this.vertices = [];\r\n    this.faces = [];\r\n  }\r\n\r\n  addVertex(...args) {\r\n    for (let i = 0; i < args.length; i += 3) {\r\n      this.vertices.push(new Vertex(args[i], args[i + 1], args[i + 2]));\r\n    }\r\n    return this;\r\n  }\r\n\r\n  addFace(...args) {\r\n    for (let i = 0; i < args.length; i += 3) {\r\n      this.faces.push(new Face(args[i], args[i + 1], args[i + 2]));\r\n    }\r\n    return this;\r\n  }\r\n\r\n  get lastVertex() {\r\n    return this.vertices[this.vertices.length - 1];\r\n  }\r\n\r\n  subdivide(divisions = 1) {\r\n    const midPointCache = {};\r\n    let f = this.faces;\r\n\r\n    for (let div = 0; div < divisions; ++div) {\r\n      const newFaces = new Array(f.length * 4);\r\n\r\n      f.forEach((face, ndx) => {\r\n        const mAB = this.getMidPoint(face.a, face.b, midPointCache);\r\n        const mBC = this.getMidPoint(face.b, face.c, midPointCache);\r\n        const mCA = this.getMidPoint(face.c, face.a, midPointCache);\r\n\r\n        const i = ndx * 4;\r\n        newFaces[i + 0] = new Face(face.a, mAB, mCA);\r\n        newFaces[i + 1] = new Face(face.b, mBC, mAB);\r\n        newFaces[i + 2] = new Face(face.c, mCA, mBC);\r\n        newFaces[i + 3] = new Face(mAB, mBC, mCA);\r\n      });\r\n\r\n      f = newFaces;\r\n    }\r\n\r\n    this.faces = f;\r\n    return this;\r\n  }\r\n\r\n  spherize(radius = 1) {\r\n    this.vertices.forEach(vertex => {\r\n      vec3.normalize(vertex.normal, vertex.position);\r\n      vec3.scale(vertex.position, vertex.normal, radius);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  get data() {\r\n    return {\r\n      vertices: this.vertexData,\r\n      indices: this.indexData,\r\n      normals: this.normalData,\r\n      uvs: this.uvData\r\n    };\r\n  }\r\n\r\n  get vertexData() {\r\n    return new Float32Array(this.vertices.flatMap(v => Array.from(v.position)));\r\n  }\r\n\r\n  get normalData() {\r\n    return new Float32Array(this.vertices.flatMap(v => Array.from(v.normal)));\r\n  }\r\n\r\n  get uvData() {\r\n    return new Float32Array(this.vertices.flatMap(v => Array.from(v.uv)));\r\n  }\r\n\r\n  get indexData() {\r\n    return new Uint16Array(this.faces.flatMap(f => [f.a, f.b, f.c]));\r\n  }\r\n\r\n  getMidPoint(ndxA, ndxB, cache) {\r\n    const cacheKey = ndxA < ndxB ? `k_${ndxB}_${ndxA}` : `k_${ndxA}_${ndxB}`;\r\n    if (Object.prototype.hasOwnProperty.call(cache, cacheKey)) {\r\n      return cache[cacheKey];\r\n    }\r\n    const a = this.vertices[ndxA].position;\r\n    const b = this.vertices[ndxB].position;\r\n    const ndx = this.vertices.length;\r\n    cache[cacheKey] = ndx;\r\n    this.addVertex((a[0] + b[0]) * 0.5, (a[1] + b[1]) * 0.5, (a[2] + b[2]) * 0.5);\r\n    return ndx;\r\n  }\r\n}\r\n\r\nclass IcosahedronGeometry extends Geometry {\r\n  constructor() {\r\n    super();\r\n    const t = Math.sqrt(5) * 0.5 + 0.5;\r\n    this.addVertex(\r\n      -1,\r\n      t,\r\n      0,\r\n      1,\r\n      t,\r\n      0,\r\n      -1,\r\n      -t,\r\n      0,\r\n      1,\r\n      -t,\r\n      0,\r\n      0,\r\n      -1,\r\n      t,\r\n      0,\r\n      1,\r\n      t,\r\n      0,\r\n      -1,\r\n      -t,\r\n      0,\r\n      1,\r\n      -t,\r\n      t,\r\n      0,\r\n      -1,\r\n      t,\r\n      0,\r\n      1,\r\n      -t,\r\n      0,\r\n      -1,\r\n      -t,\r\n      0,\r\n      1\r\n    ).addFace(\r\n      0,\r\n      11,\r\n      5,\r\n      0,\r\n      5,\r\n      1,\r\n      0,\r\n      1,\r\n      7,\r\n      0,\r\n      7,\r\n      10,\r\n      0,\r\n      10,\r\n      11,\r\n      1,\r\n      5,\r\n      9,\r\n      5,\r\n      11,\r\n      4,\r\n      11,\r\n      10,\r\n      2,\r\n      10,\r\n      7,\r\n      6,\r\n      7,\r\n      1,\r\n      8,\r\n      3,\r\n      9,\r\n      4,\r\n      3,\r\n      4,\r\n      2,\r\n      3,\r\n      2,\r\n      6,\r\n      3,\r\n      6,\r\n      8,\r\n      3,\r\n      8,\r\n      9,\r\n      4,\r\n      9,\r\n      5,\r\n      2,\r\n      4,\r\n      11,\r\n      6,\r\n      2,\r\n      10,\r\n      8,\r\n      6,\r\n      7,\r\n      9,\r\n      8,\r\n      1\r\n    );\r\n  }\r\n}\r\n\r\nclass DiscGeometry extends Geometry {\r\n  constructor(steps = 4, radius = 1) {\r\n    super();\r\n    steps = Math.max(4, steps);\r\n\r\n    const alpha = (2 * Math.PI) / steps;\r\n\r\n    this.addVertex(0, 0, 0);\r\n    this.lastVertex.uv[0] = 0.5;\r\n    this.lastVertex.uv[1] = 0.5;\r\n\r\n    for (let i = 0; i < steps; ++i) {\r\n      const x = Math.cos(alpha * i);\r\n      const y = Math.sin(alpha * i);\r\n      this.addVertex(radius * x, radius * y, 0);\r\n      this.lastVertex.uv[0] = x * 0.5 + 0.5;\r\n      this.lastVertex.uv[1] = y * 0.5 + 0.5;\r\n\r\n      if (i > 0) {\r\n        this.addFace(0, i, i + 1);\r\n      }\r\n    }\r\n    this.addFace(0, steps, 1);\r\n  }\r\n}\r\n\r\nfunction createShader(gl, type, source) {\r\n  const shader = gl.createShader(type);\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n\r\n  if (success) {\r\n    return shader;\r\n  }\r\n\r\n  console.error(gl.getShaderInfoLog(shader));\r\n  gl.deleteShader(shader);\r\n  return null;\r\n}\r\n\r\nfunction createProgram(gl, shaderSources, transformFeedbackVaryings, attribLocations) {\r\n  const program = gl.createProgram();\r\n\r\n  [gl.VERTEX_SHADER, gl.FRAGMENT_SHADER].forEach((type, ndx) => {\r\n    const shader = createShader(gl, type, shaderSources[ndx]);\r\n    if (shader) gl.attachShader(program, shader);\r\n  });\r\n\r\n  if (transformFeedbackVaryings) {\r\n    gl.transformFeedbackVaryings(program, transformFeedbackVaryings, gl.SEPARATE_ATTRIBS);\r\n  }\r\n\r\n  if (attribLocations) {\r\n    for (const attrib in attribLocations) {\r\n      gl.bindAttribLocation(program, attribLocations[attrib], attrib);\r\n    }\r\n  }\r\n\r\n  gl.linkProgram(program);\r\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n\r\n  if (success) {\r\n    return program;\r\n  }\r\n\r\n  console.error(gl.getProgramInfoLog(program));\r\n  gl.deleteProgram(program);\r\n  return null;\r\n}\r\n\r\nfunction makeVertexArray(gl, bufLocNumElmPairs, indices) {\r\n  const va = gl.createVertexArray();\r\n  gl.bindVertexArray(va);\r\n\r\n  for (const [buffer, loc, numElem] of bufLocNumElmPairs) {\r\n    if (loc === -1) continue;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.enableVertexAttribArray(loc);\r\n    gl.vertexAttribPointer(loc, numElem, gl.FLOAT, false, 0, 0);\r\n  }\r\n\r\n  if (indices) {\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\r\n  }\r\n\r\n  gl.bindVertexArray(null);\r\n  return va;\r\n}\r\n\r\nfunction resizeCanvasToDisplaySize(canvas) {\r\n  const dpr = Math.min(2, window.devicePixelRatio);\r\n  const displayWidth = Math.round(canvas.clientWidth * dpr);\r\n  const displayHeight = Math.round(canvas.clientHeight * dpr);\r\n  const needResize = canvas.width !== displayWidth || canvas.height !== displayHeight;\r\n  if (needResize) {\r\n    canvas.width = displayWidth;\r\n    canvas.height = displayHeight;\r\n  }\r\n  return needResize;\r\n}\r\n\r\nfunction makeBuffer(gl, sizeOrData, usage) {\r\n  const buf = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, buf);\r\n  gl.bufferData(gl.ARRAY_BUFFER, sizeOrData, usage);\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n  return buf;\r\n}\r\n\r\nfunction createAndSetupTexture(gl, minFilter, magFilter, wrapS, wrapT) {\r\n  const texture = gl.createTexture();\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\r\n  return texture;\r\n}\r\n\r\nclass ArcballControl {\r\n  isPointerDown = false;\r\n  orientation = quat.create();\r\n  pointerRotation = quat.create();\r\n  rotationVelocity = 0;\r\n  rotationAxis = vec3.fromValues(1, 0, 0);\r\n  snapDirection = vec3.fromValues(0, 0, -1);\r\n  snapTargetDirection;\r\n  EPSILON = 0.1;\r\n  IDENTITY_QUAT = quat.create();\r\n\r\n  constructor(canvas, updateCallback) {\r\n    this.canvas = canvas;\r\n    this.updateCallback = updateCallback || (() => null);\r\n\r\n    this.pointerPos = vec2.create();\r\n    this.previousPointerPos = vec2.create();\r\n    this._rotationVelocity = 0;\r\n    this._combinedQuat = quat.create();\r\n\r\n    canvas.addEventListener('pointerdown', e => {\r\n      vec2.set(this.pointerPos, e.clientX, e.clientY);\r\n      vec2.copy(this.previousPointerPos, this.pointerPos);\r\n      this.isPointerDown = true;\r\n    });\r\n    canvas.addEventListener('pointerup', () => {\r\n      this.isPointerDown = false;\r\n    });\r\n    canvas.addEventListener('pointerleave', () => {\r\n      this.isPointerDown = false;\r\n    });\r\n    canvas.addEventListener('pointermove', e => {\r\n      if (this.isPointerDown) {\r\n        vec2.set(this.pointerPos, e.clientX, e.clientY);\r\n      }\r\n    });\r\n\r\n    canvas.style.touchAction = 'none';\r\n  }\r\n\r\n  update(deltaTime, targetFrameDuration = 16) {\r\n    const timeScale = deltaTime / targetFrameDuration + 0.00001;\r\n    let angleFactor = timeScale;\r\n    let snapRotation = quat.create();\r\n\r\n    if (this.isPointerDown) {\r\n      const INTENSITY = 0.3 * timeScale;\r\n      const ANGLE_AMPLIFICATION = 5 / timeScale;\r\n\r\n      const midPointerPos = vec2.sub(vec2.create(), this.pointerPos, this.previousPointerPos);\r\n      vec2.scale(midPointerPos, midPointerPos, INTENSITY);\r\n\r\n      if (vec2.sqrLen(midPointerPos) > this.EPSILON) {\r\n        vec2.add(midPointerPos, this.previousPointerPos, midPointerPos);\r\n\r\n        const p = this.#project(midPointerPos);\r\n        const q = this.#project(this.previousPointerPos);\r\n        const a = vec3.normalize(vec3.create(), p);\r\n        const b = vec3.normalize(vec3.create(), q);\r\n\r\n        vec2.copy(this.previousPointerPos, midPointerPos);\r\n\r\n        angleFactor *= ANGLE_AMPLIFICATION;\r\n\r\n        this.quatFromVectors(a, b, this.pointerRotation, angleFactor);\r\n      } else {\r\n        quat.slerp(this.pointerRotation, this.pointerRotation, this.IDENTITY_QUAT, INTENSITY);\r\n      }\r\n    } else {\r\n      const INTENSITY = 0.1 * timeScale;\r\n      quat.slerp(this.pointerRotation, this.pointerRotation, this.IDENTITY_QUAT, INTENSITY);\r\n\r\n      if (this.snapTargetDirection) {\r\n        const SNAPPING_INTENSITY = 0.2;\r\n        const a = this.snapTargetDirection;\r\n        const b = this.snapDirection;\r\n        const sqrDist = vec3.squaredDistance(a, b);\r\n        const distanceFactor = Math.max(0.1, 1 - sqrDist * 10);\r\n        angleFactor *= SNAPPING_INTENSITY * distanceFactor;\r\n        this.quatFromVectors(a, b, snapRotation, angleFactor);\r\n      }\r\n    }\r\n\r\n    const combinedQuat = quat.multiply(quat.create(), snapRotation, this.pointerRotation);\r\n    this.orientation = quat.multiply(quat.create(), combinedQuat, this.orientation);\r\n    quat.normalize(this.orientation, this.orientation);\r\n\r\n    const RA_INTENSITY = 0.8 * timeScale;\r\n    quat.slerp(this._combinedQuat, this._combinedQuat, combinedQuat, RA_INTENSITY);\r\n    quat.normalize(this._combinedQuat, this._combinedQuat);\r\n\r\n    const rad = Math.acos(this._combinedQuat[3]) * 2.0;\r\n    const s = Math.sin(rad / 2.0);\r\n    let rv = 0;\r\n    if (s > 0.000001) {\r\n      rv = rad / (2 * Math.PI);\r\n      this.rotationAxis[0] = this._combinedQuat[0] / s;\r\n      this.rotationAxis[1] = this._combinedQuat[1] / s;\r\n      this.rotationAxis[2] = this._combinedQuat[2] / s;\r\n    }\r\n\r\n    const RV_INTENSITY = 0.5 * timeScale;\r\n    this._rotationVelocity += (rv - this._rotationVelocity) * RV_INTENSITY;\r\n    this.rotationVelocity = this._rotationVelocity / timeScale;\r\n\r\n    this.updateCallback(deltaTime);\r\n  }\r\n\r\n  quatFromVectors(a, b, out, angleFactor = 1) {\r\n    const axis = vec3.cross(vec3.create(), a, b);\r\n    vec3.normalize(axis, axis);\r\n    const d = Math.max(-1, Math.min(1, vec3.dot(a, b)));\r\n    const angle = Math.acos(d) * angleFactor;\r\n    quat.setAxisAngle(out, axis, angle);\r\n    return { q: out, axis, angle };\r\n  }\r\n\r\n  #project(pos) {\r\n    const r = 2;\r\n    const w = this.canvas.clientWidth;\r\n    const h = this.canvas.clientHeight;\r\n    const s = Math.max(w, h) - 1;\r\n\r\n    const x = (2 * pos[0] - w - 1) / s;\r\n    const y = (2 * pos[1] - h - 1) / s;\r\n    let z = 0;\r\n    const xySq = x * x + y * y;\r\n    const rSq = r * r;\r\n\r\n    if (xySq <= rSq / 2.0) {\r\n      z = Math.sqrt(rSq - xySq);\r\n    } else {\r\n      z = rSq / Math.sqrt(xySq);\r\n    }\r\n    return vec3.fromValues(-x, y, z);\r\n  }\r\n}\r\n\r\nclass InfiniteGridMenu {\r\n  TARGET_FRAME_DURATION = 1000 / 60;\r\n  SPHERE_RADIUS = 2;\r\n\r\n  #time = 0;\r\n  #deltaTime = 0;\r\n  #deltaFrames = 0;\r\n  #frames = 0;\r\n\r\n  camera = {\r\n    matrix: mat4.create(),\r\n    near: 0.1,\r\n    far: 40,\r\n    fov: Math.PI / 4,\r\n    aspect: 1,\r\n    position: vec3.fromValues(0, 0, 3),\r\n    up: vec3.fromValues(0, 1, 0),\r\n    matrices: {\r\n      view: mat4.create(),\r\n      projection: mat4.create(),\r\n      inversProjection: mat4.create()\r\n    }\r\n  };\r\n\r\n  nearestVertexIndex = null;\r\n  smoothRotationVelocity = 0;\r\n  scaleFactor = 1.0;\r\n  movementActive = false;\r\n\r\n  constructor(canvas, items, onActiveItemChange, onMovementChange, onInit = null) {\r\n    this.canvas = canvas;\r\n    this.items = items || [];\r\n    this.onActiveItemChange = onActiveItemChange || (() => {});\r\n    this.onMovementChange = onMovementChange || (() => {});\r\n    this.#init(onInit);\r\n  }\r\n\r\n  resize() {\r\n    this.viewportSize = vec2.set(this.viewportSize || vec2.create(), this.canvas.clientWidth, this.canvas.clientHeight);\r\n\r\n    const gl = this.gl;\r\n    const needsResize = resizeCanvasToDisplaySize(gl.canvas);\r\n    if (needsResize) {\r\n      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n    }\r\n\r\n    this.#updateProjectionMatrix(gl);\r\n  }\r\n\r\n  run(time = 0) {\r\n    this.#deltaTime = Math.min(32, time - this.#time);\r\n    this.#time = time;\r\n    this.#deltaFrames = this.#deltaTime / this.TARGET_FRAME_DURATION;\r\n    this.#frames += this.#deltaFrames;\r\n\r\n    this.#animate(this.#deltaTime);\r\n    this.#render();\r\n\r\n    requestAnimationFrame(t => this.run(t));\r\n  }\r\n\r\n  #init(onInit) {\r\n    this.gl = this.canvas.getContext('webgl2', { antialias: true, alpha: false });\r\n    const gl = this.gl;\r\n    if (!gl) {\r\n      throw new Error('No WebGL 2 context!');\r\n    }\r\n\r\n    this.viewportSize = vec2.fromValues(this.canvas.clientWidth, this.canvas.clientHeight);\r\n    this.drawBufferSize = vec2.clone(this.viewportSize);\r\n\r\n    this.discProgram = createProgram(gl, [discVertShaderSource, discFragShaderSource], null, {\r\n      aModelPosition: 0,\r\n      aModelNormal: 1,\r\n      aModelUvs: 2,\r\n      aInstanceMatrix: 3\r\n    });\r\n\r\n    this.discLocations = {\r\n      aModelPosition: gl.getAttribLocation(this.discProgram, 'aModelPosition'),\r\n      aModelUvs: gl.getAttribLocation(this.discProgram, 'aModelUvs'),\r\n      aInstanceMatrix: gl.getAttribLocation(this.discProgram, 'aInstanceMatrix'),\r\n      uWorldMatrix: gl.getUniformLocation(this.discProgram, 'uWorldMatrix'),\r\n      uViewMatrix: gl.getUniformLocation(this.discProgram, 'uViewMatrix'),\r\n      uProjectionMatrix: gl.getUniformLocation(this.discProgram, 'uProjectionMatrix'),\r\n      uCameraPosition: gl.getUniformLocation(this.discProgram, 'uCameraPosition'),\r\n      uScaleFactor: gl.getUniformLocation(this.discProgram, 'uScaleFactor'),\r\n      uRotationAxisVelocity: gl.getUniformLocation(this.discProgram, 'uRotationAxisVelocity'),\r\n      uTex: gl.getUniformLocation(this.discProgram, 'uTex'),\r\n      uFrames: gl.getUniformLocation(this.discProgram, 'uFrames'),\r\n      uItemCount: gl.getUniformLocation(this.discProgram, 'uItemCount'),\r\n      uAtlasSize: gl.getUniformLocation(this.discProgram, 'uAtlasSize')\r\n    };\r\n\r\n    this.discGeo = new DiscGeometry(56, 1);\r\n    this.discBuffers = this.discGeo.data;\r\n    this.discVAO = makeVertexArray(\r\n      gl,\r\n      [\r\n        [makeBuffer(gl, this.discBuffers.vertices, gl.STATIC_DRAW), this.discLocations.aModelPosition, 3],\r\n        [makeBuffer(gl, this.discBuffers.uvs, gl.STATIC_DRAW), this.discLocations.aModelUvs, 2]\r\n      ],\r\n      this.discBuffers.indices\r\n    );\r\n\r\n    this.icoGeo = new IcosahedronGeometry();\r\n    this.icoGeo.subdivide(1).spherize(this.SPHERE_RADIUS);\r\n    this.instancePositions = this.icoGeo.vertices.map(v => v.position);\r\n    this.DISC_INSTANCE_COUNT = this.icoGeo.vertices.length;\r\n    this.#initDiscInstances(this.DISC_INSTANCE_COUNT);\r\n\r\n    this.worldMatrix = mat4.create();\r\n    this.#initTexture();\r\n\r\n    this.control = new ArcballControl(this.canvas, deltaTime => this.#onControlUpdate(deltaTime));\r\n\r\n    this.#updateCameraMatrix();\r\n    this.#updateProjectionMatrix(gl);\r\n    this.resize();\r\n\r\n    if (onInit) onInit(this);\r\n  }\r\n\r\n  #initTexture() {\r\n    const gl = this.gl;\r\n    this.tex = createAndSetupTexture(gl, gl.LINEAR, gl.LINEAR, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE);\r\n\r\n    const itemCount = Math.max(1, this.items.length);\r\n    this.atlasSize = Math.ceil(Math.sqrt(itemCount));\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const cellSize = 512;\r\n\r\n    canvas.width = this.atlasSize * cellSize;\r\n    canvas.height = this.atlasSize * cellSize;\r\n\r\n    Promise.all(\r\n      this.items.map(\r\n        item =>\r\n          new Promise(resolve => {\r\n            const img = new Image();\r\n            img.crossOrigin = 'anonymous';\r\n            img.onload = () => resolve(img);\r\n            img.src = item.image;\r\n          })\r\n      )\r\n    ).then(images => {\r\n      images.forEach((img, i) => {\r\n        const x = (i % this.atlasSize) * cellSize;\r\n        const y = Math.floor(i / this.atlasSize) * cellSize;\r\n        ctx.drawImage(img, x, y, cellSize, cellSize);\r\n      });\r\n\r\n      gl.bindTexture(gl.TEXTURE_2D, this.tex);\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n    });\r\n  }\r\n\r\n  #initDiscInstances(count) {\r\n    const gl = this.gl;\r\n    this.discInstances = {\r\n      matricesArray: new Float32Array(count * 16),\r\n      matrices: [],\r\n      buffer: gl.createBuffer()\r\n    };\r\n    for (let i = 0; i < count; ++i) {\r\n      const instanceMatrixArray = new Float32Array(this.discInstances.matricesArray.buffer, i * 16 * 4, 16);\r\n      instanceMatrixArray.set(mat4.create());\r\n      this.discInstances.matrices.push(instanceMatrixArray);\r\n    }\r\n    gl.bindVertexArray(this.discVAO);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.discInstances.buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, this.discInstances.matricesArray.byteLength, gl.DYNAMIC_DRAW);\r\n    const mat4AttribSlotCount = 4;\r\n    const bytesPerMatrix = 16 * 4;\r\n    for (let j = 0; j < mat4AttribSlotCount; ++j) {\r\n      const loc = this.discLocations.aInstanceMatrix + j;\r\n      gl.enableVertexAttribArray(loc);\r\n      gl.vertexAttribPointer(loc, 4, gl.FLOAT, false, bytesPerMatrix, j * 4 * 4);\r\n      gl.vertexAttribDivisor(loc, 1);\r\n    }\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.bindVertexArray(null);\r\n  }\r\n\r\n  #animate(deltaTime) {\r\n    const gl = this.gl;\r\n    this.control.update(deltaTime, this.TARGET_FRAME_DURATION);\r\n\r\n    let positions = this.instancePositions.map(p => vec3.transformQuat(vec3.create(), p, this.control.orientation));\r\n    const scale = 0.25;\r\n    const SCALE_INTENSITY = 0.6;\r\n    positions.forEach((p, ndx) => {\r\n      const s = (Math.abs(p[2]) / this.SPHERE_RADIUS) * SCALE_INTENSITY + (1 - SCALE_INTENSITY);\r\n      const finalScale = s * scale;\r\n      const matrix = mat4.create();\r\n      mat4.multiply(matrix, matrix, mat4.fromTranslation(mat4.create(), vec3.negate(vec3.create(), p)));\r\n      mat4.multiply(matrix, matrix, mat4.targetTo(mat4.create(), [0, 0, 0], p, [0, 1, 0]));\r\n      mat4.multiply(matrix, matrix, mat4.fromScaling(mat4.create(), [finalScale, finalScale, finalScale]));\r\n      mat4.multiply(matrix, matrix, mat4.fromTranslation(mat4.create(), [0, 0, -this.SPHERE_RADIUS]));\r\n\r\n      mat4.copy(this.discInstances.matrices[ndx], matrix);\r\n    });\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.discInstances.buffer);\r\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.discInstances.matricesArray);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n    this.smoothRotationVelocity = this.control.rotationVelocity;\r\n  }\r\n\r\n  #render() {\r\n    const gl = this.gl;\r\n    gl.useProgram(this.discProgram);\r\n\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.enable(gl.DEPTH_TEST);\r\n\r\n    gl.clearColor(0, 0, 0, 0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    gl.uniformMatrix4fv(this.discLocations.uWorldMatrix, false, this.worldMatrix);\r\n    gl.uniformMatrix4fv(this.discLocations.uViewMatrix, false, this.camera.matrices.view);\r\n    gl.uniformMatrix4fv(this.discLocations.uProjectionMatrix, false, this.camera.matrices.projection);\r\n    gl.uniform3f(\r\n      this.discLocations.uCameraPosition,\r\n      this.camera.position[0],\r\n      this.camera.position[1],\r\n      this.camera.position[2]\r\n    );\r\n    gl.uniform4f(\r\n      this.discLocations.uRotationAxisVelocity,\r\n      this.control.rotationAxis[0],\r\n      this.control.rotationAxis[1],\r\n      this.control.rotationAxis[2],\r\n      this.smoothRotationVelocity * 1.1\r\n    );\r\n\r\n    gl.uniform1i(this.discLocations.uItemCount, this.items.length);\r\n    gl.uniform1i(this.discLocations.uAtlasSize, this.atlasSize);\r\n\r\n    gl.uniform1f(this.discLocations.uFrames, this.#frames);\r\n    gl.uniform1f(this.discLocations.uScaleFactor, this.scaleFactor);\r\n    gl.uniform1i(this.discLocations.uTex, 0);\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.tex);\r\n\r\n    gl.bindVertexArray(this.discVAO);\r\n    gl.drawElementsInstanced(\r\n      gl.TRIANGLES,\r\n      this.discBuffers.indices.length,\r\n      gl.UNSIGNED_SHORT,\r\n      0,\r\n      this.DISC_INSTANCE_COUNT\r\n    );\r\n  }\r\n\r\n  #updateCameraMatrix() {\r\n    mat4.targetTo(this.camera.matrix, this.camera.position, [0, 0, 0], this.camera.up);\r\n    mat4.invert(this.camera.matrices.view, this.camera.matrix);\r\n  }\r\n\r\n  #updateProjectionMatrix(gl) {\r\n    this.camera.aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    const height = this.SPHERE_RADIUS * 0.35;\r\n    const distance = this.camera.position[2];\r\n    if (this.camera.aspect > 1) {\r\n      this.camera.fov = 2 * Math.atan(height / distance);\r\n    } else {\r\n      this.camera.fov = 2 * Math.atan(height / this.camera.aspect / distance);\r\n    }\r\n    mat4.perspective(\r\n      this.camera.matrices.projection,\r\n      this.camera.fov,\r\n      this.camera.aspect,\r\n      this.camera.near,\r\n      this.camera.far\r\n    );\r\n    mat4.invert(this.camera.matrices.inversProjection, this.camera.matrices.projection);\r\n  }\r\n\r\n  #onControlUpdate(deltaTime) {\r\n    const timeScale = deltaTime / this.TARGET_FRAME_DURATION + 0.0001;\r\n    let damping = 5 / timeScale;\r\n    let cameraTargetZ = 3;\r\n\r\n    const isMoving = this.control.isPointerDown || Math.abs(this.smoothRotationVelocity) > 0.01;\r\n\r\n    if (isMoving !== this.movementActive) {\r\n      this.movementActive = isMoving;\r\n      this.onMovementChange(isMoving);\r\n    }\r\n\r\n    if (!this.control.isPointerDown) {\r\n      const nearestVertexIndex = this.#findNearestVertexIndex();\r\n      const itemIndex = nearestVertexIndex % Math.max(1, this.items.length);\r\n      this.onActiveItemChange(itemIndex);\r\n      const snapDirection = vec3.normalize(vec3.create(), this.#getVertexWorldPosition(nearestVertexIndex));\r\n      this.control.snapTargetDirection = snapDirection;\r\n    } else {\r\n      cameraTargetZ += this.control.rotationVelocity * 80 + 2.5;\r\n      damping = 7 / timeScale;\r\n    }\r\n\r\n    this.camera.position[2] += (cameraTargetZ - this.camera.position[2]) / damping;\r\n    this.#updateCameraMatrix();\r\n  }\r\n\r\n  #findNearestVertexIndex() {\r\n    const n = this.control.snapDirection;\r\n    const inversOrientation = quat.conjugate(quat.create(), this.control.orientation);\r\n    const nt = vec3.transformQuat(vec3.create(), n, inversOrientation);\r\n\r\n    let maxD = -1;\r\n    let nearestVertexIndex;\r\n    for (let i = 0; i < this.instancePositions.length; ++i) {\r\n      const d = vec3.dot(nt, this.instancePositions[i]);\r\n      if (d > maxD) {\r\n        maxD = d;\r\n        nearestVertexIndex = i;\r\n      }\r\n    }\r\n    return nearestVertexIndex;\r\n  }\r\n\r\n  #getVertexWorldPosition(index) {\r\n    const nearestVertexPos = this.instancePositions[index];\r\n    return vec3.transformQuat(vec3.create(), nearestVertexPos, this.control.orientation);\r\n  }\r\n}\r\n\r\nconst defaultItems = [\r\n  {\r\n    image: 'https://picsum.photos/900/900?grayscale',\r\n    link: 'https://google.com/',\r\n    title: '',\r\n    description: ''\r\n  }\r\n];\r\n\r\nexport default function InfiniteMenu({ items = [] }) {\r\n  const canvasRef = useRef(null);\r\n  const [activeItem, setActiveItem] = useState(null);\r\n  const [isMoving, setIsMoving] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    let sketch;\r\n\r\n    const handleActiveItem = index => {\r\n      const itemIndex = index % items.length;\r\n      setActiveItem(items[itemIndex]);\r\n    };\r\n\r\n    if (canvas) {\r\n      sketch = new InfiniteGridMenu(canvas, items.length ? items : defaultItems, handleActiveItem, setIsMoving, sk =>\r\n        sk.run()\r\n      );\r\n    }\r\n\r\n    const handleResize = () => {\r\n      if (sketch) {\r\n        sketch.resize();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    handleResize();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, [items]);\r\n\r\n  const handleButtonClick = () => {\r\n    if (!activeItem?.link) return;\r\n    if (activeItem.link.startsWith('http')) {\r\n      window.open(activeItem.link, '_blank');\r\n    } else {\r\n      console.log('Internal route:', activeItem.link);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: 'relative', width: '100%', height: '100%' }}>\r\n      <canvas id=\"infinite-grid-menu-canvas\" ref={canvasRef} />\r\n\r\n      {activeItem && (\r\n        <>\r\n          <h2 className={`face-title ${isMoving ? 'inactive' : 'active'}`}>{activeItem.title}</h2>\r\n\r\n          <p className={`face-description ${isMoving ? 'inactive' : 'active'}`}> {activeItem.description}</p>\r\n\r\n          <div onClick={handleButtonClick} className={`action-button ${isMoving ? 'inactive' : 'active'}`}>\r\n            <p className=\"action-button-icon\">&#x2197;</p>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Components/InfiniteMenu/InfiniteMenu.css",
      "content": "/* Note: this CSS is only an example, you can overlay whatever you want using the activeItem logic */\r\n\r\n#infinite-grid-menu-canvas {\r\n  cursor: grab;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  position: relative;\r\n  outline: none;\r\n}\r\n\r\n#infinite-grid-menu-canvas:active {\r\n  cursor: grabbing;\r\n}\r\n\r\n.action-button {\r\n  position: absolute;\r\n  left: 50%;\r\n  z-index: 10;\r\n  width: 60px;\r\n  height: 60px;\r\n  display: grid;\r\n  place-items: center;\r\n  background: #5227ff;\r\n  border: none;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  border: 5px solid #000;\r\n}\r\n\r\n.face-title {\r\n  user-select: none;\r\n  position: absolute;\r\n  font-weight: 900;\r\n  font-size: 4rem;\r\n  left: 1.6em;\r\n  top: 50%;\r\n}\r\n\r\n.action-button-icon {\r\n  user-select: none;\r\n  position: relative;\r\n  color: #fff;\r\n  top: 2px;\r\n  font-size: 26px;\r\n}\r\n\r\n.face-title {\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translate(20%, -50%);\r\n}\r\n\r\n.face-title.active {\r\n  opacity: 1;\r\n  transform: translate(20%, -50%);\r\n  pointer-events: auto;\r\n  transition: 0.5s ease;\r\n}\r\n\r\n.face-title.inactive {\r\n  pointer-events: none;\r\n  opacity: 0;\r\n  transition: 0.1s ease;\r\n}\r\n\r\n.face-description {\r\n  user-select: none;\r\n  position: absolute;\r\n  max-width: 10ch;\r\n  top: 50%;\r\n  font-size: 1.5rem;\r\n  right: 1%;\r\n  transform: translate(0, -50%);\r\n}\r\n\r\n.face-description.active {\r\n  opacity: 1;\r\n  transform: translate(-90%, -50%);\r\n  pointer-events: auto;\r\n  transition: 0.5s ease;\r\n}\r\n\r\n.face-description.inactive {\r\n  pointer-events: none;\r\n  transform: translate(-60%, -50%);\r\n  opacity: 0;\r\n  transition: 0.1s ease;\r\n}\r\n\r\n.action-button {\r\n  position: absolute;\r\n  left: 50%;\r\n}\r\n\r\n.action-button.active {\r\n  bottom: 3.8em;\r\n  transform: translateX(-50%) scale(1);\r\n  opacity: 1;\r\n  pointer-events: auto;\r\n  transition: 0.5s ease;\r\n}\r\n\r\n.action-button.inactive {\r\n  bottom: -80px;\r\n  transform: translateX(-50%) scale(0);\r\n  opacity: 0;\r\n  pointer-events: none;\r\n  transition: 0.1s ease;\r\n}\r\n\r\n@media (max-width: 1500px) {\r\n  .face-title,\r\n  .face-description {\r\n    display: none;\r\n  }\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}