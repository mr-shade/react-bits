{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "DecayCard-TS-TW",
  "type": "registry:block",
  "title": "DecayCard",
  "description": "Hover parallax effect that disintegrates the content of a card.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Components/DecayCard/DecayCard.tsx",
      "content": "import React, { useEffect, useRef, ReactNode } from 'react';\r\nimport { gsap } from 'gsap';\r\n\r\ninterface DecayCardProps {\r\n  width?: number;\r\n  height?: number;\r\n  image?: string;\r\n  children?: ReactNode;\r\n}\r\n\r\nconst DecayCard: React.FC<DecayCardProps> = ({\r\n  width = 300,\r\n  height = 400,\r\n  image = 'https://picsum.photos/300/400?grayscale',\r\n  children\r\n}) => {\r\n  const svgRef = useRef<HTMLDivElement | null>(null);\r\n  const displacementMapRef = useRef<SVGFEDisplacementMapElement | null>(null);\r\n  const cursor = useRef<{ x: number; y: number }>({\r\n    x: window.innerWidth / 2,\r\n    y: window.innerHeight / 2\r\n  });\r\n  const cachedCursor = useRef<{ x: number; y: number }>({ ...cursor.current });\r\n  const winsize = useRef<{ width: number; height: number }>({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n  });\r\n\r\n  useEffect(() => {\r\n    const lerp = (a: number, b: number, n: number): number => (1 - n) * a + n * b;\r\n    const map = (x: number, a: number, b: number, c: number, d: number): number => ((x - a) * (d - c)) / (b - a) + c;\r\n    const distance = (x1: number, x2: number, y1: number, y2: number): number => Math.hypot(x1 - x2, y1 - y2);\r\n\r\n    const handleResize = (): void => {\r\n      winsize.current = {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n      };\r\n    };\r\n\r\n    const handleMouseMove = (ev: MouseEvent): void => {\r\n      cursor.current = { x: ev.clientX, y: ev.clientY };\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n\r\n    const imgValues = {\r\n      imgTransforms: { x: 0, y: 0, rz: 0 },\r\n      displacementScale: 0\r\n    };\r\n\r\n    const render = () => {\r\n      let targetX = lerp(imgValues.imgTransforms.x, map(cursor.current.x, 0, winsize.current.width, -120, 120), 0.1);\r\n      let targetY = lerp(imgValues.imgTransforms.y, map(cursor.current.y, 0, winsize.current.height, -120, 120), 0.1);\r\n      let targetRz = lerp(imgValues.imgTransforms.rz, map(cursor.current.x, 0, winsize.current.width, -10, 10), 0.1);\r\n\r\n      const bound = 50;\r\n      if (targetX > bound) targetX = bound + (targetX - bound) * 0.2;\r\n      if (targetX < -bound) targetX = -bound + (targetX + bound) * 0.2;\r\n      if (targetY > bound) targetY = bound + (targetY - bound) * 0.2;\r\n      if (targetY < -bound) targetY = -bound + (targetY + bound) * 0.2;\r\n\r\n      imgValues.imgTransforms.x = targetX;\r\n      imgValues.imgTransforms.y = targetY;\r\n      imgValues.imgTransforms.rz = targetRz;\r\n\r\n      if (svgRef.current) {\r\n        gsap.set(svgRef.current, {\r\n          x: imgValues.imgTransforms.x,\r\n          y: imgValues.imgTransforms.y,\r\n          rotateZ: imgValues.imgTransforms.rz\r\n        });\r\n      }\r\n\r\n      const cursorTravelledDistance = distance(\r\n        cachedCursor.current.x,\r\n        cursor.current.x,\r\n        cachedCursor.current.y,\r\n        cursor.current.y\r\n      );\r\n      imgValues.displacementScale = lerp(\r\n        imgValues.displacementScale,\r\n        map(cursorTravelledDistance, 0, 200, 0, 400),\r\n        0.06\r\n      );\r\n\r\n      if (displacementMapRef.current) {\r\n        gsap.set(displacementMapRef.current, {\r\n          attr: { scale: imgValues.displacementScale }\r\n        });\r\n      }\r\n\r\n      cachedCursor.current = { ...cursor.current };\r\n\r\n      requestAnimationFrame(render);\r\n    };\r\n\r\n    render();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={svgRef} className=\"relative\" style={{ width: `${width}px`, height: `${height}px` }}>\r\n      <svg\r\n        viewBox=\"-60 -75 720 900\"\r\n        preserveAspectRatio=\"xMidYMid slice\"\r\n        className=\"relative w-full h-full block [will-change:transform]\"\r\n      >\r\n        <filter id=\"imgFilter\">\r\n          <feTurbulence\r\n            type=\"turbulence\"\r\n            baseFrequency=\"0.015\"\r\n            numOctaves=\"5\"\r\n            seed=\"4\"\r\n            stitchTiles=\"stitch\"\r\n            x=\"0%\"\r\n            y=\"0%\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            result=\"turbulence1\"\r\n          />\r\n          <feDisplacementMap\r\n            ref={displacementMapRef}\r\n            in=\"SourceGraphic\"\r\n            in2=\"turbulence1\"\r\n            scale=\"0\"\r\n            xChannelSelector=\"R\"\r\n            yChannelSelector=\"B\"\r\n            x=\"0%\"\r\n            y=\"0%\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            result=\"displacementMap3\"\r\n          />\r\n        </filter>\r\n        <g>\r\n          <image\r\n            href={image}\r\n            x=\"0\"\r\n            y=\"0\"\r\n            width=\"600\"\r\n            height=\"750\"\r\n            filter=\"url(#imgFilter)\"\r\n            preserveAspectRatio=\"xMidYMid slice\"\r\n          />\r\n        </g>\r\n      </svg>\r\n      <div className=\"absolute bottom-[1.2em] left-[1em] tracking-[-0.5px] font-black text-[2.5rem] leading-[1.5em] first-line:text-[6rem]\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DecayCard;\r\n",
      "type": "registry:component"
    }
  ]
}