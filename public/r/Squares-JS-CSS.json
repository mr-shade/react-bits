{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Squares-JS-CSS",
  "type": "registry:block",
  "title": "Squares",
  "description": "Animated squares with scaling + direction customization.",
  "files": [
    {
      "path": "public/default/src/content/Backgrounds/Squares/Squares.jsx",
      "content": "import { useRef, useEffect } from 'react';\r\nimport './Squares.css';\r\n\r\nconst Squares = ({\r\n  direction = 'right',\r\n  speed = 1,\r\n  borderColor = '#999',\r\n  squareSize = 40,\r\n  hoverFillColor = '#222',\r\n  className = ''\r\n}) => {\r\n  const canvasRef = useRef(null);\r\n  const requestRef = useRef(null);\r\n  const numSquaresX = useRef();\r\n  const numSquaresY = useRef();\r\n  const gridOffset = useRef({ x: 0, y: 0 });\r\n  const hoveredSquare = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    const resizeCanvas = () => {\r\n      canvas.width = canvas.offsetWidth;\r\n      canvas.height = canvas.offsetHeight;\r\n      numSquaresX.current = Math.ceil(canvas.width / squareSize) + 1;\r\n      numSquaresY.current = Math.ceil(canvas.height / squareSize) + 1;\r\n    };\r\n\r\n    window.addEventListener('resize', resizeCanvas);\r\n    resizeCanvas();\r\n\r\n    const drawGrid = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      const startX = Math.floor(gridOffset.current.x / squareSize) * squareSize;\r\n      const startY = Math.floor(gridOffset.current.y / squareSize) * squareSize;\r\n\r\n      for (let x = startX; x < canvas.width + squareSize; x += squareSize) {\r\n        for (let y = startY; y < canvas.height + squareSize; y += squareSize) {\r\n          const squareX = x - (gridOffset.current.x % squareSize);\r\n          const squareY = y - (gridOffset.current.y % squareSize);\r\n\r\n          if (\r\n            hoveredSquare.current &&\r\n            Math.floor((x - startX) / squareSize) === hoveredSquare.current.x &&\r\n            Math.floor((y - startY) / squareSize) === hoveredSquare.current.y\r\n          ) {\r\n            ctx.fillStyle = hoverFillColor;\r\n            ctx.fillRect(squareX, squareY, squareSize, squareSize);\r\n          }\r\n\r\n          ctx.strokeStyle = borderColor;\r\n          ctx.strokeRect(squareX, squareY, squareSize, squareSize);\r\n        }\r\n      }\r\n\r\n      const gradient = ctx.createRadialGradient(\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        0,\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        Math.sqrt(canvas.width ** 2 + canvas.height ** 2) / 2\r\n      );\r\n      gradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\r\n\r\n      ctx.fillStyle = gradient;\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    };\r\n\r\n    const updateAnimation = () => {\r\n      const effectiveSpeed = Math.max(speed, 0.1);\r\n      switch (direction) {\r\n        case 'right':\r\n          gridOffset.current.x = (gridOffset.current.x - effectiveSpeed + squareSize) % squareSize;\r\n          break;\r\n        case 'left':\r\n          gridOffset.current.x = (gridOffset.current.x + effectiveSpeed + squareSize) % squareSize;\r\n          break;\r\n        case 'up':\r\n          gridOffset.current.y = (gridOffset.current.y + effectiveSpeed + squareSize) % squareSize;\r\n          break;\r\n        case 'down':\r\n          gridOffset.current.y = (gridOffset.current.y - effectiveSpeed + squareSize) % squareSize;\r\n          break;\r\n        case 'diagonal':\r\n          gridOffset.current.x = (gridOffset.current.x - effectiveSpeed + squareSize) % squareSize;\r\n          gridOffset.current.y = (gridOffset.current.y - effectiveSpeed + squareSize) % squareSize;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      drawGrid();\r\n      requestRef.current = requestAnimationFrame(updateAnimation);\r\n    };\r\n\r\n    const handleMouseMove = event => {\r\n      const rect = canvas.getBoundingClientRect();\r\n      const mouseX = event.clientX - rect.left;\r\n      const mouseY = event.clientY - rect.top;\r\n\r\n      const startX = Math.floor(gridOffset.current.x / squareSize) * squareSize;\r\n      const startY = Math.floor(gridOffset.current.y / squareSize) * squareSize;\r\n\r\n      const hoveredSquareX = Math.floor((mouseX + gridOffset.current.x - startX) / squareSize);\r\n      const hoveredSquareY = Math.floor((mouseY + gridOffset.current.y - startY) / squareSize);\r\n\r\n      if (\r\n        !hoveredSquare.current ||\r\n        hoveredSquare.current.x !== hoveredSquareX ||\r\n        hoveredSquare.current.y !== hoveredSquareY\r\n      ) {\r\n        hoveredSquare.current = { x: hoveredSquareX, y: hoveredSquareY };\r\n      }\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n      hoveredSquare.current = null;\r\n    };\r\n\r\n    canvas.addEventListener('mousemove', handleMouseMove);\r\n    canvas.addEventListener('mouseleave', handleMouseLeave);\r\n\r\n    requestRef.current = requestAnimationFrame(updateAnimation);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', resizeCanvas);\r\n      cancelAnimationFrame(requestRef.current);\r\n      canvas.removeEventListener('mousemove', handleMouseMove);\r\n      canvas.removeEventListener('mouseleave', handleMouseLeave);\r\n    };\r\n  }, [direction, speed, borderColor, hoverFillColor, squareSize]);\r\n\r\n  return <canvas ref={canvasRef} className={`squares-canvas ${className}`}></canvas>;\r\n};\r\n\r\nexport default Squares;\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Backgrounds/Squares/Squares.css",
      "content": ".squares-canvas {\r\n  width: 100%;\r\n  height: 100%;\r\n  border: none;\r\n  display: block;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}