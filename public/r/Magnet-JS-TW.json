{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Magnet-JS-TW",
  "type": "registry:block",
  "title": "Magnet",
  "description": "Elements magnetically ease toward the cursor then settle back with spring physics.",
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Animations/Magnet/Magnet.jsx",
      "content": "import { useState, useEffect, useRef } from 'react';\r\n\r\nconst Magnet = ({\r\n  children,\r\n  padding = 100,\r\n  disabled = false,\r\n  magnetStrength = 2,\r\n  activeTransition = 'transform 0.3s ease-out',\r\n  inactiveTransition = 'transform 0.5s ease-in-out',\r\n  wrapperClassName = '',\r\n  innerClassName = '',\r\n  ...props\r\n}) => {\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n  const magnetRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (disabled) {\r\n      setPosition({ x: 0, y: 0 });\r\n      return;\r\n    }\r\n\r\n    const handleMouseMove = e => {\r\n      if (!magnetRef.current) return;\r\n\r\n      const { left, top, width, height } = magnetRef.current.getBoundingClientRect();\r\n      const centerX = left + width / 2;\r\n      const centerY = top + height / 2;\r\n\r\n      const distX = Math.abs(centerX - e.clientX);\r\n      const distY = Math.abs(centerY - e.clientY);\r\n\r\n      if (distX < width / 2 + padding && distY < height / 2 + padding) {\r\n        setIsActive(true);\r\n\r\n        const offsetX = (e.clientX - centerX) / magnetStrength;\r\n        const offsetY = (e.clientY - centerY) / magnetStrength;\r\n        setPosition({ x: offsetX, y: offsetY });\r\n      } else {\r\n        setIsActive(false);\r\n        setPosition({ x: 0, y: 0 });\r\n      }\r\n    };\r\n\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n    };\r\n  }, [padding, disabled, magnetStrength]);\r\n\r\n  const transitionStyle = isActive ? activeTransition : inactiveTransition;\r\n\r\n  return (\r\n    <div\r\n      ref={magnetRef}\r\n      className={wrapperClassName}\r\n      style={{ position: 'relative', display: 'inline-block' }}\r\n      {...props}\r\n    >\r\n      <div\r\n        className={innerClassName}\r\n        style={{\r\n          transform: `translate3d(${position.x}px, ${position.y}px, 0)`,\r\n          transition: transitionStyle,\r\n          willChange: 'transform'\r\n        }}\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Magnet;\r\n",
      "type": "registry:component"
    }
  ]
}