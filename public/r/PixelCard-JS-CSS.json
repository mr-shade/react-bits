{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "PixelCard-JS-CSS",
  "type": "registry:block",
  "title": "PixelCard",
  "description": "Card content revealed through pixel expansion transition.",
  "files": [
    {
      "path": "public/default/src/content/Components/PixelCard/PixelCard.jsx",
      "content": "import { useEffect, useRef } from 'react';\r\nimport './PixelCard.css';\r\n\r\nclass Pixel {\r\n  constructor(canvas, context, x, y, color, speed, delay) {\r\n    this.width = canvas.width;\r\n    this.height = canvas.height;\r\n    this.ctx = context;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.color = color;\r\n    this.speed = this.getRandomValue(0.1, 0.9) * speed;\r\n    this.size = 0;\r\n    this.sizeStep = Math.random() * 0.4;\r\n    this.minSize = 0.5;\r\n    this.maxSizeInteger = 2;\r\n    this.maxSize = this.getRandomValue(this.minSize, this.maxSizeInteger);\r\n    this.delay = delay;\r\n    this.counter = 0;\r\n    this.counterStep = Math.random() * 4 + (this.width + this.height) * 0.01;\r\n    this.isIdle = false;\r\n    this.isReverse = false;\r\n    this.isShimmer = false;\r\n  }\r\n\r\n  getRandomValue(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n  }\r\n\r\n  draw() {\r\n    const centerOffset = this.maxSizeInteger * 0.5 - this.size * 0.5;\r\n    this.ctx.fillStyle = this.color;\r\n    this.ctx.fillRect(this.x + centerOffset, this.y + centerOffset, this.size, this.size);\r\n  }\r\n\r\n  appear() {\r\n    this.isIdle = false;\r\n    if (this.counter <= this.delay) {\r\n      this.counter += this.counterStep;\r\n      return;\r\n    }\r\n    if (this.size >= this.maxSize) {\r\n      this.isShimmer = true;\r\n    }\r\n    if (this.isShimmer) {\r\n      this.shimmer();\r\n    } else {\r\n      this.size += this.sizeStep;\r\n    }\r\n    this.draw();\r\n  }\r\n\r\n  disappear() {\r\n    this.isShimmer = false;\r\n    this.counter = 0;\r\n    if (this.size <= 0) {\r\n      this.isIdle = true;\r\n      return;\r\n    } else {\r\n      this.size -= 0.1;\r\n    }\r\n    this.draw();\r\n  }\r\n\r\n  shimmer() {\r\n    if (this.size >= this.maxSize) {\r\n      this.isReverse = true;\r\n    } else if (this.size <= this.minSize) {\r\n      this.isReverse = false;\r\n    }\r\n    if (this.isReverse) {\r\n      this.size -= this.speed;\r\n    } else {\r\n      this.size += this.speed;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getEffectiveSpeed(value, reducedMotion) {\r\n  const min = 0;\r\n  const max = 100;\r\n  const throttle = 0.001;\r\n  const parsed = parseInt(value, 10);\r\n\r\n  if (parsed <= min || reducedMotion) {\r\n    return min;\r\n  } else if (parsed >= max) {\r\n    return max * throttle;\r\n  } else {\r\n    return parsed * throttle;\r\n  }\r\n}\r\n\r\nconst VARIANTS = {\r\n  default: {\r\n    activeColor: null,\r\n    gap: 5,\r\n    speed: 35,\r\n    colors: '#f8fafc,#f1f5f9,#cbd5e1',\r\n    noFocus: false\r\n  },\r\n  blue: {\r\n    activeColor: '#e0f2fe',\r\n    gap: 10,\r\n    speed: 25,\r\n    colors: '#e0f2fe,#7dd3fc,#0ea5e9',\r\n    noFocus: false\r\n  },\r\n  yellow: {\r\n    activeColor: '#fef08a',\r\n    gap: 3,\r\n    speed: 20,\r\n    colors: '#fef08a,#fde047,#eab308',\r\n    noFocus: false\r\n  },\r\n  pink: {\r\n    activeColor: '#fecdd3',\r\n    gap: 6,\r\n    speed: 80,\r\n    colors: '#fecdd3,#fda4af,#e11d48',\r\n    noFocus: true\r\n  }\r\n};\r\n\r\nexport default function PixelCard({ variant = 'default', gap, speed, colors, noFocus, className = '', children }) {\r\n  const containerRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const pixelsRef = useRef([]);\r\n  const animationRef = useRef(null);\r\n  const timePreviousRef = useRef(performance.now());\r\n  const reducedMotion = useRef(window.matchMedia('(prefers-reduced-motion: reduce)').matches).current;\r\n\r\n  const variantCfg = VARIANTS[variant] || VARIANTS.default;\r\n  const finalGap = gap ?? variantCfg.gap;\r\n  const finalSpeed = speed ?? variantCfg.speed;\r\n  const finalColors = colors ?? variantCfg.colors;\r\n  const finalNoFocus = noFocus ?? variantCfg.noFocus;\r\n\r\n  const initPixels = () => {\r\n    if (!containerRef.current || !canvasRef.current) return;\r\n\r\n    const rect = containerRef.current.getBoundingClientRect();\r\n    const width = Math.floor(rect.width);\r\n    const height = Math.floor(rect.height);\r\n    const ctx = canvasRef.current.getContext('2d');\r\n\r\n    canvasRef.current.width = width;\r\n    canvasRef.current.height = height;\r\n    canvasRef.current.style.width = `${width}px`;\r\n    canvasRef.current.style.height = `${height}px`;\r\n\r\n    const colorsArray = finalColors.split(',');\r\n    const pxs = [];\r\n    for (let x = 0; x < width; x += parseInt(finalGap, 10)) {\r\n      for (let y = 0; y < height; y += parseInt(finalGap, 10)) {\r\n        const color = colorsArray[Math.floor(Math.random() * colorsArray.length)];\r\n\r\n        const dx = x - width / 2;\r\n        const dy = y - height / 2;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        const delay = reducedMotion ? 0 : distance;\r\n\r\n        pxs.push(new Pixel(canvasRef.current, ctx, x, y, color, getEffectiveSpeed(finalSpeed, reducedMotion), delay));\r\n      }\r\n    }\r\n    pixelsRef.current = pxs;\r\n  };\r\n\r\n  const doAnimate = fnName => {\r\n    animationRef.current = requestAnimationFrame(() => doAnimate(fnName));\r\n    const timeNow = performance.now();\r\n    const timePassed = timeNow - timePreviousRef.current;\r\n    const timeInterval = 1000 / 60;\r\n\r\n    if (timePassed < timeInterval) return;\r\n    timePreviousRef.current = timeNow - (timePassed % timeInterval);\r\n\r\n    const ctx = canvasRef.current?.getContext('2d');\r\n    if (!ctx || !canvasRef.current) return;\r\n\r\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n\r\n    let allIdle = true;\r\n    for (let i = 0; i < pixelsRef.current.length; i++) {\r\n      const pixel = pixelsRef.current[i];\r\n      pixel[fnName]();\r\n      if (!pixel.isIdle) {\r\n        allIdle = false;\r\n      }\r\n    }\r\n    if (allIdle) {\r\n      cancelAnimationFrame(animationRef.current);\r\n    }\r\n  };\r\n\r\n  const handleAnimation = name => {\r\n    cancelAnimationFrame(animationRef.current);\r\n    animationRef.current = requestAnimationFrame(() => doAnimate(name));\r\n  };\r\n\r\n  const onMouseEnter = () => handleAnimation('appear');\r\n  const onMouseLeave = () => handleAnimation('disappear');\r\n  const onFocus = e => {\r\n    if (e.currentTarget.contains(e.relatedTarget)) return;\r\n    handleAnimation('appear');\r\n  };\r\n  const onBlur = e => {\r\n    if (e.currentTarget.contains(e.relatedTarget)) return;\r\n    handleAnimation('disappear');\r\n  };\r\n\r\n  useEffect(() => {\r\n    initPixels();\r\n    const observer = new ResizeObserver(() => {\r\n      initPixels();\r\n    });\r\n    if (containerRef.current) {\r\n      observer.observe(containerRef.current);\r\n    }\r\n    return () => {\r\n      observer.disconnect();\r\n      cancelAnimationFrame(animationRef.current);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [finalGap, finalSpeed, finalColors, finalNoFocus]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={`pixel-card ${className}`}\r\n      onMouseEnter={onMouseEnter}\r\n      onMouseLeave={onMouseLeave}\r\n      onFocus={finalNoFocus ? undefined : onFocus}\r\n      onBlur={finalNoFocus ? undefined : onBlur}\r\n      tabIndex={finalNoFocus ? -1 : 0}\r\n    >\r\n      <canvas className=\"pixel-canvas\" ref={canvasRef} />\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Components/PixelCard/PixelCard.css",
      "content": ".pixel-canvas {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: block;\r\n}\r\n\r\n.pixel-card {\r\n  height: 400px;\r\n  width: 300px;\r\n  position: relative;\r\n  overflow: hidden;\r\n  display: grid;\r\n  place-items: center;\r\n  aspect-ratio: 4 / 5;\r\n  border: 1px solid #27272a;\r\n  border-radius: 25px;\r\n  isolation: isolate;\r\n  transition: border-color 200ms cubic-bezier(0.5, 1, 0.89, 1);\r\n  user-select: none;\r\n}\r\n\r\n.pixel-card::before {\r\n  content: '';\r\n  position: absolute;\r\n  inset: 0;\r\n  margin: auto;\r\n  aspect-ratio: 1;\r\n  background: radial-gradient(circle, #09090b, transparent 85%);\r\n  opacity: 0;\r\n  transition: opacity 800ms cubic-bezier(0.5, 1, 0.89, 1);\r\n}\r\n\r\n.pixel-card:hover::before,\r\n.pixel-card:focus-within::before {\r\n  opacity: 1;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}