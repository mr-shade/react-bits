{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ElasticSlider-JS-CSS",
  "type": "registry:block",
  "title": "ElasticSlider",
  "description": "Slider handle stretches elastically then snaps with spring physics.",
  "dependencies": [
    "@chakra-ui/react",
    "motion"
  ],
  "files": [
    {
      "path": "public/default/src/content/Components/ElasticSlider/ElasticSlider.jsx",
      "content": "import { animate, motion, useMotionValue, useMotionValueEvent, useTransform } from 'motion/react';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { Icon } from '@chakra-ui/react';\r\nimport { RiVolumeDownFill, RiVolumeUpFill } from 'react-icons/ri';\r\n\r\nimport './ElasticSlider.css';\r\n\r\nconst MAX_OVERFLOW = 50;\r\n\r\nexport default function ElasticSlider({\r\n  defaultValue = 50,\r\n  startingValue = 0,\r\n  maxValue = 100,\r\n  className = '',\r\n  isStepped = false,\r\n  stepSize = 1,\r\n  leftIcon = <Icon as={RiVolumeDownFill} />,\r\n  rightIcon = <Icon as={RiVolumeUpFill} />\r\n}) {\r\n  return (\r\n    <div className={`slider-container ${className}`}>\r\n      <Slider\r\n        defaultValue={defaultValue}\r\n        startingValue={startingValue}\r\n        maxValue={maxValue}\r\n        isStepped={isStepped}\r\n        stepSize={stepSize}\r\n        leftIcon={leftIcon}\r\n        rightIcon={rightIcon}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Slider({ defaultValue, startingValue, maxValue, isStepped, stepSize, leftIcon, rightIcon }) {\r\n  const [value, setValue] = useState(defaultValue);\r\n  const sliderRef = useRef(null);\r\n  const [region, setRegion] = useState('middle');\r\n  const clientX = useMotionValue(0);\r\n  const overflow = useMotionValue(0);\r\n  const scale = useMotionValue(1);\r\n\r\n  useEffect(() => {\r\n    setValue(defaultValue);\r\n  }, [defaultValue]);\r\n\r\n  useMotionValueEvent(clientX, 'change', latest => {\r\n    if (sliderRef.current) {\r\n      const { left, right } = sliderRef.current.getBoundingClientRect();\r\n      let newValue;\r\n\r\n      if (latest < left) {\r\n        setRegion('left');\r\n        newValue = left - latest;\r\n      } else if (latest > right) {\r\n        setRegion('right');\r\n        newValue = latest - right;\r\n      } else {\r\n        setRegion('middle');\r\n        newValue = 0;\r\n      }\r\n\r\n      overflow.jump(decay(newValue, MAX_OVERFLOW));\r\n    }\r\n  });\r\n\r\n  const handlePointerMove = e => {\r\n    if (e.buttons > 0 && sliderRef.current) {\r\n      const { left, width } = sliderRef.current.getBoundingClientRect();\r\n      let newValue = startingValue + ((e.clientX - left) / width) * (maxValue - startingValue);\r\n\r\n      if (isStepped) {\r\n        newValue = Math.round(newValue / stepSize) * stepSize;\r\n      }\r\n\r\n      newValue = Math.min(Math.max(newValue, startingValue), maxValue);\r\n      setValue(newValue);\r\n      clientX.jump(e.clientX);\r\n    }\r\n  };\r\n\r\n  const handlePointerDown = e => {\r\n    handlePointerMove(e);\r\n    e.currentTarget.setPointerCapture(e.pointerId);\r\n  };\r\n\r\n  const handlePointerUp = () => {\r\n    animate(overflow, 0, { type: 'spring', bounce: 0.5 });\r\n  };\r\n\r\n  const getRangePercentage = () => {\r\n    const totalRange = maxValue - startingValue;\r\n    if (totalRange === 0) return 0;\r\n\r\n    return ((value - startingValue) / totalRange) * 100;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <motion.div\r\n        onHoverStart={() => animate(scale, 1.2)}\r\n        onHoverEnd={() => animate(scale, 1)}\r\n        onTouchStart={() => animate(scale, 1.2)}\r\n        onTouchEnd={() => animate(scale, 1)}\r\n        style={{\r\n          scale,\r\n          opacity: useTransform(scale, [1, 1.2], [0.7, 1])\r\n        }}\r\n        className=\"slider-wrapper\"\r\n      >\r\n        <motion.div\r\n          animate={{\r\n            scale: region === 'left' ? [1, 1.4, 1] : 1,\r\n            transition: { duration: 0.25 }\r\n          }}\r\n          style={{\r\n            x: useTransform(() => (region === 'left' ? -overflow.get() / scale.get() : 0))\r\n          }}\r\n        >\r\n          {leftIcon}\r\n        </motion.div>\r\n\r\n        <div\r\n          ref={sliderRef}\r\n          className=\"slider-root\"\r\n          onPointerMove={handlePointerMove}\r\n          onPointerDown={handlePointerDown}\r\n          onPointerUp={handlePointerUp}\r\n        >\r\n          <motion.div\r\n            style={{\r\n              scaleX: useTransform(() => {\r\n                if (sliderRef.current) {\r\n                  const { width } = sliderRef.current.getBoundingClientRect();\r\n                  return 1 + overflow.get() / width;\r\n                }\r\n              }),\r\n              scaleY: useTransform(overflow, [0, MAX_OVERFLOW], [1, 0.8]),\r\n              transformOrigin: useTransform(() => {\r\n                if (sliderRef.current) {\r\n                  const { left, width } = sliderRef.current.getBoundingClientRect();\r\n                  return clientX.get() < left + width / 2 ? 'right' : 'left';\r\n                }\r\n              }),\r\n              height: useTransform(scale, [1, 1.2], [6, 12]),\r\n              marginTop: useTransform(scale, [1, 1.2], [0, -3]),\r\n              marginBottom: useTransform(scale, [1, 1.2], [0, -3])\r\n            }}\r\n            className=\"slider-track-wrapper\"\r\n          >\r\n            <div className=\"slider-track\">\r\n              <div className=\"slider-range\" style={{ width: `${getRangePercentage()}%` }} />\r\n            </div>\r\n          </motion.div>\r\n        </div>\r\n\r\n        <motion.div\r\n          animate={{\r\n            scale: region === 'right' ? [1, 1.4, 1] : 1,\r\n            transition: { duration: 0.25 }\r\n          }}\r\n          style={{\r\n            x: useTransform(() => (region === 'right' ? overflow.get() / scale.get() : 0))\r\n          }}\r\n        >\r\n          {rightIcon}\r\n        </motion.div>\r\n      </motion.div>\r\n      <p className=\"value-indicator\">{Math.round(value)}</p>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction decay(value, max) {\r\n  if (max === 0) {\r\n    return 0;\r\n  }\r\n\r\n  const entry = value / max;\r\n  const sigmoid = 2 * (1 / (1 + Math.exp(-entry)) - 0.5);\r\n\r\n  return sigmoid * max;\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Components/ElasticSlider/ElasticSlider.css",
      "content": ".slider-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  width: 12rem;\r\n}\r\n\r\n.slider-wrapper {\r\n  display: flex;\r\n  width: 100%;\r\n  touch-action: none;\r\n  user-select: none;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n}\r\n\r\n.slider-root {\r\n  position: relative;\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: 200px;\r\n  flex-grow: 1;\r\n  cursor: grab;\r\n  touch-action: none;\r\n  user-select: none;\r\n  align-items: center;\r\n  padding: 1rem 0;\r\n}\r\n\r\n.slider-root:active {\r\n  cursor: grabbing;\r\n}\r\n\r\n.slider-track-wrapper {\r\n  display: flex;\r\n  flex-grow: 1;\r\n}\r\n\r\n.slider-track {\r\n  position: relative;\r\n  height: 100%;\r\n  flex-grow: 1;\r\n  overflow: hidden;\r\n  border-radius: 9999px;\r\n  background-color: rgba(128, 128, 128, 0.4);\r\n}\r\n\r\n.slider-range {\r\n  position: absolute;\r\n  height: 100%;\r\n  background-color: #888;\r\n  border-radius: 9999px;\r\n}\r\n\r\n.value-indicator {\r\n  color: #808080;\r\n  position: absolute;\r\n  transform: translateY(-1rem);\r\n  font-size: 0.75rem;\r\n  font-weight: 500;\r\n  letter-spacing: 0.05em;\r\n}\r\n\r\n.icon {\r\n  width: 24px;\r\n  height: 24px;\r\n  color: #888;\r\n}\r\n\r\n.icon.dark {\r\n  color: #ddd;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}