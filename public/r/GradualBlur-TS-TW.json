{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "GradualBlur-TS-TW",
  "type": "registry:block",
  "title": "GradualBlur",
  "description": "Progressively un-blurs content based on scroll or trigger creating a cinematic reveal.",
  "dependencies": [
    "mathjs"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Animations/GradualBlur/GradualBlur.tsx",
      "content": "import React, { CSSProperties, useEffect, useRef, useState, useMemo, PropsWithChildren } from 'react';\r\nimport * as math from 'mathjs';\r\n\r\ntype GradualBlurProps = PropsWithChildren<{\r\n  position?: 'top' | 'bottom' | 'left' | 'right';\r\n  strength?: number;\r\n  height?: string;\r\n  width?: string;\r\n  divCount?: number;\r\n  exponential?: boolean;\r\n  zIndex?: number;\r\n  animated?: boolean | 'scroll';\r\n  duration?: string;\r\n  easing?: string;\r\n  opacity?: number;\r\n  curve?: 'linear' | 'bezier' | 'ease-in' | 'ease-out' | 'ease-in-out';\r\n  responsive?: boolean;\r\n  mobileHeight?: string;\r\n  tabletHeight?: string;\r\n  desktopHeight?: string;\r\n  mobileWidth?: string;\r\n  tabletWidth?: string;\r\n  desktopWidth?: string;\r\n\r\n  preset?:\r\n    | 'top'\r\n    | 'bottom'\r\n    | 'left'\r\n    | 'right'\r\n    | 'subtle'\r\n    | 'intense'\r\n    | 'smooth'\r\n    | 'sharp'\r\n    | 'header'\r\n    | 'footer'\r\n    | 'sidebar'\r\n    | 'page-header'\r\n    | 'page-footer';\r\n  gpuOptimized?: boolean;\r\n  hoverIntensity?: number;\r\n  target?: 'parent' | 'page';\r\n\r\n  onAnimationComplete?: () => void;\r\n  className?: string;\r\n  style?: CSSProperties;\r\n}>;\r\n\r\nconst DEFAULT_CONFIG: Partial<GradualBlurProps> = {\r\n  position: 'bottom',\r\n  strength: 2,\r\n  height: '6rem',\r\n  divCount: 5,\r\n  exponential: false,\r\n  zIndex: 1000,\r\n  animated: false,\r\n  duration: '0.3s',\r\n  easing: 'ease-out',\r\n  opacity: 1,\r\n  curve: 'linear',\r\n  responsive: false,\r\n  target: 'parent',\r\n  className: '',\r\n  style: {}\r\n};\r\n\r\nconst PRESETS: Record<string, Partial<GradualBlurProps>> = {\r\n  top: { position: 'top', height: '6rem' },\r\n  bottom: { position: 'bottom', height: '6rem' },\r\n  left: { position: 'left', height: '6rem' },\r\n  right: { position: 'right', height: '6rem' },\r\n\r\n  subtle: { height: '4rem', strength: 1, opacity: 0.8, divCount: 3 },\r\n  intense: { height: '10rem', strength: 4, divCount: 8, exponential: true },\r\n\r\n  smooth: { height: '8rem', curve: 'bezier', divCount: 10 },\r\n  sharp: { height: '5rem', curve: 'linear', divCount: 4 },\r\n\r\n  header: { position: 'top', height: '8rem', curve: 'ease-out' },\r\n  footer: { position: 'bottom', height: '8rem', curve: 'ease-out' },\r\n  sidebar: { position: 'left', height: '6rem', strength: 2.5 },\r\n\r\n  'page-header': {\r\n    position: 'top',\r\n    height: '10rem',\r\n    target: 'page',\r\n    strength: 3\r\n  },\r\n  'page-footer': {\r\n    position: 'bottom',\r\n    height: '10rem',\r\n    target: 'page',\r\n    strength: 3\r\n  }\r\n};\r\n\r\nconst CURVE_FUNCTIONS: Record<string, (p: number) => number> = {\r\n  linear: p => p,\r\n  bezier: p => p * p * (3 - 2 * p),\r\n  'ease-in': p => p * p,\r\n  'ease-out': p => 1 - Math.pow(1 - p, 2),\r\n  'ease-in-out': p => (p < 0.5 ? 2 * p * p : 1 - Math.pow(-2 * p + 2, 2) / 2)\r\n};\r\n\r\nconst mergeConfigs = (...configs: Partial<GradualBlurProps>[]): Partial<GradualBlurProps> => {\r\n  return configs.reduce((acc, config) => ({ ...acc, ...config }), {});\r\n};\r\n\r\nconst getGradientDirection = (position: string): string => {\r\n  const directions: Record<string, string> = {\r\n    top: 'to top',\r\n    bottom: 'to bottom',\r\n    left: 'to left',\r\n    right: 'to right'\r\n  };\r\n  return directions[position] || 'to bottom';\r\n};\r\n\r\nconst debounce = <T extends (...a: any[]) => void>(fn: T, wait: number) => {\r\n  let t: ReturnType<typeof setTimeout>;\r\n  return (...a: Parameters<T>) => {\r\n    clearTimeout(t);\r\n    t = setTimeout(() => fn(...a), wait);\r\n  };\r\n};\r\nconst useResponsiveDimension = (\r\n  responsive: boolean | undefined,\r\n  config: Partial<GradualBlurProps>,\r\n  key: keyof GradualBlurProps\r\n) => {\r\n  const [val, setVal] = useState<any>(config[key]);\r\n  useEffect(() => {\r\n    if (!responsive) return;\r\n    const calc = () => {\r\n      const w = window.innerWidth;\r\n      let v: any = config[key];\r\n      const cap = (s: string) => s.charAt(0).toUpperCase() + s.slice(1);\r\n      const k = cap(key as string);\r\n      if (w <= 480 && (config as any)['mobile' + k]) v = (config as any)['mobile' + k];\r\n      else if (w <= 768 && (config as any)['tablet' + k]) v = (config as any)['tablet' + k];\r\n      else if (w <= 1024 && (config as any)['desktop' + k]) v = (config as any)['desktop' + k];\r\n      setVal(v);\r\n    };\r\n    const deb = debounce(calc, 100);\r\n    calc();\r\n    window.addEventListener('resize', deb);\r\n    return () => window.removeEventListener('resize', deb);\r\n  }, [responsive, config, key]);\r\n  return responsive ? val : (config as any)[key];\r\n};\r\n\r\nconst useIntersectionObserver = (ref: React.RefObject<HTMLDivElement>, shouldObserve: boolean = false) => {\r\n  const [isVisible, setIsVisible] = useState(!shouldObserve);\r\n\r\n  useEffect(() => {\r\n    if (!shouldObserve || !ref.current) return;\r\n\r\n    const observer = new IntersectionObserver(([entry]) => setIsVisible(entry.isIntersecting), { threshold: 0.1 });\r\n\r\n    observer.observe(ref.current);\r\n    return () => observer.disconnect();\r\n  }, [ref, shouldObserve]);\r\n\r\n  return isVisible;\r\n};\r\n\r\nconst GradualBlur: React.FC<GradualBlurProps> = props => {\r\n  const containerRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  const config = useMemo(() => {\r\n    const presetConfig = props.preset && PRESETS[props.preset] ? PRESETS[props.preset] : {};\r\n    return mergeConfigs(DEFAULT_CONFIG, presetConfig, props) as Required<GradualBlurProps>;\r\n  }, [props]);\r\n\r\n  const responsiveHeight = useResponsiveDimension(config.responsive, config, 'height');\r\n  const responsiveWidth = useResponsiveDimension(config.responsive, config, 'width');\r\n\r\n  const isVisible = useIntersectionObserver(containerRef, config.animated === 'scroll');\r\n\r\n  const blurDivs = useMemo(() => {\r\n    const divs: React.ReactNode[] = [];\r\n    const increment = 100 / config.divCount;\r\n    const currentStrength =\r\n      isHovered && config.hoverIntensity ? config.strength * config.hoverIntensity : config.strength;\r\n\r\n    const curveFunc = CURVE_FUNCTIONS[config.curve] || CURVE_FUNCTIONS.linear;\r\n\r\n    for (let i = 1; i <= config.divCount; i++) {\r\n      let progress = i / config.divCount;\r\n      progress = curveFunc(progress);\r\n\r\n      let blurValue: number;\r\n      if (config.exponential) {\r\n        blurValue = Number(math.pow(2, progress * 4)) * 0.0625 * currentStrength;\r\n      } else {\r\n        blurValue = 0.0625 * (progress * config.divCount + 1) * currentStrength;\r\n      }\r\n\r\n      const p1 = math.round((increment * i - increment) * 10) / 10;\r\n      const p2 = math.round(increment * i * 10) / 10;\r\n      const p3 = math.round((increment * i + increment) * 10) / 10;\r\n      const p4 = math.round((increment * i + increment * 2) * 10) / 10;\r\n\r\n      let gradient = `transparent ${p1}%, black ${p2}%`;\r\n      if (p3 <= 100) gradient += `, black ${p3}%`;\r\n      if (p4 <= 100) gradient += `, transparent ${p4}%`;\r\n\r\n      const direction = getGradientDirection(config.position);\r\n\r\n      const divStyle: CSSProperties = {\r\n        maskImage: `linear-gradient(${direction}, ${gradient})`,\r\n        WebkitMaskImage: `linear-gradient(${direction}, ${gradient})`,\r\n        backdropFilter: `blur(${blurValue.toFixed(3)}rem)`,\r\n        opacity: config.opacity,\r\n        transition:\r\n          config.animated && config.animated !== 'scroll'\r\n            ? `backdrop-filter ${config.duration} ${config.easing}`\r\n            : undefined\r\n      };\r\n\r\n      divs.push(<div key={i} className=\"absolute inset-0\" style={divStyle} />);\r\n    }\r\n\r\n    return divs;\r\n  }, [config, isHovered]);\r\n\r\n  const containerStyle: CSSProperties = useMemo(() => {\r\n    const isVertical = ['top', 'bottom'].includes(config.position);\r\n    const isHorizontal = ['left', 'right'].includes(config.position);\r\n    const isPageTarget = config.target === 'page';\r\n\r\n    const baseStyle: CSSProperties = {\r\n      position: isPageTarget ? 'fixed' : 'absolute',\r\n      pointerEvents: config.hoverIntensity ? 'auto' : 'none',\r\n      opacity: isVisible ? 1 : 0,\r\n      transition: config.animated ? `opacity ${config.duration} ${config.easing}` : undefined,\r\n      zIndex: isPageTarget ? config.zIndex + 100 : config.zIndex,\r\n      ...config.style\r\n    };\r\n\r\n    if (isVertical) {\r\n      baseStyle.height = responsiveHeight;\r\n      baseStyle.width = responsiveWidth || '100%';\r\n      baseStyle[config.position] = 0;\r\n      baseStyle.left = 0;\r\n      baseStyle.right = 0;\r\n    } else if (isHorizontal) {\r\n      baseStyle.width = responsiveWidth || responsiveHeight;\r\n      baseStyle.height = '100%';\r\n      baseStyle[config.position] = 0;\r\n      baseStyle.top = 0;\r\n      baseStyle.bottom = 0;\r\n    }\r\n\r\n    return baseStyle;\r\n  }, [config, responsiveHeight, responsiveWidth, isVisible]);\r\n\r\n  const { hoverIntensity, animated, onAnimationComplete, duration } = config as any;\r\n  useEffect(() => {\r\n    if (isVisible && animated === 'scroll' && onAnimationComplete) {\r\n      const t = setTimeout(() => onAnimationComplete(), parseFloat(duration) * 1000);\r\n      return () => clearTimeout(t);\r\n    }\r\n  }, [isVisible, animated, onAnimationComplete, duration]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={`gradual-blur relative isolate ${config.target === 'page' ? 'gradual-blur-page' : 'gradual-blur-parent'} ${config.className}`}\r\n      style={containerStyle}\r\n      onMouseEnter={hoverIntensity ? () => setIsHovered(true) : undefined}\r\n      onMouseLeave={hoverIntensity ? () => setIsHovered(false) : undefined}\r\n    >\r\n      <div className=\"relative w-full h-full\">{blurDivs}</div>\r\n      {props.children && <div className=\"relative\">{props.children}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GradualBlurMemo = React.memo(GradualBlur);\r\nGradualBlurMemo.displayName = 'GradualBlur';\r\n(GradualBlurMemo as any).PRESETS = PRESETS;\r\n(GradualBlurMemo as any).CURVE_FUNCTIONS = CURVE_FUNCTIONS;\r\nexport default GradualBlurMemo;\r\n\r\nconst injectStyles = () => {\r\n  if (typeof document === 'undefined') return;\r\n  const id = 'gradual-blur-styles';\r\n  if (document.getElementById(id)) return;\r\n  const el = document.createElement('style');\r\n  el.id = id;\r\n  el.textContent = `.gradual-blur{pointer-events:none;transition:opacity .3s ease-out}.gradual-blur-inner{pointer-events:none}`;\r\n  document.head.appendChild(el);\r\n};\r\nif (typeof document !== 'undefined') {\r\n  injectStyles();\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}