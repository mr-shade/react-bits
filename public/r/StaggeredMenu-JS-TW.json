{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "StaggeredMenu-JS-TW",
  "type": "registry:block",
  "title": "StaggeredMenu",
  "description": "Menu with staggered item animations and smooth transitions on open/close.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Components/StaggeredMenu/StaggeredMenu.jsx",
      "content": "import React, { useCallback, useLayoutEffect, useRef, useState } from 'react';\r\nimport { gsap } from 'gsap';\r\n\r\nexport const StaggeredMenu = ({\r\n  position = 'right',\r\n  colors = ['#B19EEF', '#5227FF'],\r\n  items = [],\r\n  socialItems = [],\r\n  displaySocials = true,\r\n  displayItemNumbering = true,\r\n  className,\r\n  logoUrl = '/src/assets/logos/reactbits-gh-white.svg',\r\n  menuButtonColor = '#fff',\r\n  openMenuButtonColor = '#fff',\r\n  changeMenuColorOnOpen = true,\r\n  accentColor = '#5227FF',\r\n  onMenuOpen,\r\n  onMenuClose\r\n}) => {\r\n  const [open, setOpen] = useState(false);\r\n  const openRef = useRef(false);\r\n\r\n  const panelRef = useRef(null);\r\n  const preLayersRef = useRef(null);\r\n  const preLayerElsRef = useRef([]);\r\n\r\n  const plusHRef = useRef(null);\r\n  const plusVRef = useRef(null);\r\n  const iconRef = useRef(null);\r\n\r\n  const textInnerRef = useRef(null);\r\n  const textWrapRef = useRef(null);\r\n  const [textLines, setTextLines] = useState(['Menu', 'Close']);\r\n\r\n  const openTlRef = useRef(null);\r\n  const closeTweenRef = useRef(null);\r\n  const spinTweenRef = useRef(null);\r\n  const textCycleAnimRef = useRef(null);\r\n  const colorTweenRef = useRef(null);\r\n\r\n  const toggleBtnRef = useRef(null);\r\n  const busyRef = useRef(false);\r\n\r\n  const itemEntranceTweenRef = useRef(null);\r\n\r\n  useLayoutEffect(() => {\r\n    const ctx = gsap.context(() => {\r\n      const panel = panelRef.current;\r\n      const preContainer = preLayersRef.current;\r\n\r\n      const plusH = plusHRef.current;\r\n      const plusV = plusVRef.current;\r\n      const icon = iconRef.current;\r\n      const textInner = textInnerRef.current;\r\n\r\n      if (!panel || !plusH || !plusV || !icon || !textInner) return;\r\n\r\n      let preLayers = [];\r\n      if (preContainer) {\r\n        preLayers = Array.from(preContainer.querySelectorAll('.sm-prelayer'));\r\n      }\r\n      preLayerElsRef.current = preLayers;\r\n\r\n      const offscreen = position === 'left' ? -100 : 100;\r\n      gsap.set([panel, ...preLayers], { xPercent: offscreen });\r\n\r\n      gsap.set(plusH, { transformOrigin: '50% 50%', rotate: 0 });\r\n      gsap.set(plusV, { transformOrigin: '50% 50%', rotate: 90 });\r\n      gsap.set(icon, { rotate: 0, transformOrigin: '50% 50%' });\r\n\r\n      gsap.set(textInner, { yPercent: 0 });\r\n\r\n      if (toggleBtnRef.current) gsap.set(toggleBtnRef.current, { color: menuButtonColor });\r\n    });\r\n    return () => ctx.revert();\r\n  }, [menuButtonColor, position]);\r\n\r\n  const buildOpenTimeline = useCallback(() => {\r\n    const panel = panelRef.current;\r\n    const layers = preLayerElsRef.current;\r\n    if (!panel) return null;\r\n\r\n    openTlRef.current?.kill();\r\n    if (closeTweenRef.current) {\r\n      closeTweenRef.current.kill();\r\n      closeTweenRef.current = null;\r\n    }\r\n    itemEntranceTweenRef.current?.kill();\r\n\r\n    const itemEls = Array.from(panel.querySelectorAll('.sm-panel-itemLabel'));\r\n    const numberEls = Array.from(panel.querySelectorAll('.sm-panel-list[data-numbering] .sm-panel-item'));\r\n    const socialTitle = panel.querySelector('.sm-socials-title');\r\n    const socialLinks = Array.from(panel.querySelectorAll('.sm-socials-link'));\r\n\r\n    const layerStates = layers.map(el => ({ el, start: Number(gsap.getProperty(el, 'xPercent')) }));\r\n    const panelStart = Number(gsap.getProperty(panel, 'xPercent'));\r\n\r\n    if (itemEls.length) gsap.set(itemEls, { yPercent: 140, rotate: 10 });\r\n    if (numberEls.length) gsap.set(numberEls, { ['--sm-num-opacity']: 0 });\r\n    if (socialTitle) gsap.set(socialTitle, { opacity: 0 });\r\n    if (socialLinks.length) gsap.set(socialLinks, { y: 25, opacity: 0 });\r\n\r\n    const tl = gsap.timeline({ paused: true });\r\n\r\n    layerStates.forEach((ls, i) => {\r\n      tl.fromTo(ls.el, { xPercent: ls.start }, { xPercent: 0, duration: 0.5, ease: 'power4.out' }, i * 0.07);\r\n    });\r\n\r\n    const lastTime = layerStates.length ? (layerStates.length - 1) * 0.07 : 0;\r\n    const panelInsertTime = lastTime + (layerStates.length ? 0.08 : 0);\r\n    const panelDuration = 0.65;\r\n\r\n    tl.fromTo(\r\n      panel,\r\n      { xPercent: panelStart },\r\n      { xPercent: 0, duration: panelDuration, ease: 'power4.out' },\r\n      panelInsertTime\r\n    );\r\n\r\n    if (itemEls.length) {\r\n      const itemsStartRatio = 0.15;\r\n      const itemsStart = panelInsertTime + panelDuration * itemsStartRatio;\r\n\r\n      tl.to(\r\n        itemEls,\r\n        { yPercent: 0, rotate: 0, duration: 1, ease: 'power4.out', stagger: { each: 0.1, from: 'start' } },\r\n        itemsStart\r\n      );\r\n\r\n      if (numberEls.length) {\r\n        tl.to(\r\n          numberEls,\r\n          { duration: 0.6, ease: 'power2.out', ['--sm-num-opacity']: 1, stagger: { each: 0.08, from: 'start' } },\r\n          itemsStart + 0.1\r\n        );\r\n      }\r\n    }\r\n\r\n    if (socialTitle || socialLinks.length) {\r\n      const socialsStart = panelInsertTime + panelDuration * 0.4;\r\n\r\n      if (socialTitle) tl.to(socialTitle, { opacity: 1, duration: 0.5, ease: 'power2.out' }, socialsStart);\r\n      if (socialLinks.length) {\r\n        tl.to(\r\n          socialLinks,\r\n          {\r\n            y: 0,\r\n            opacity: 1,\r\n            duration: 0.55,\r\n            ease: 'power3.out',\r\n            stagger: { each: 0.08, from: 'start' },\r\n            onComplete: () => gsap.set(socialLinks, { clearProps: 'opacity' })\r\n          },\r\n          socialsStart + 0.04\r\n        );\r\n      }\r\n    }\r\n\r\n    openTlRef.current = tl;\r\n    return tl;\r\n  }, []);\r\n\r\n  const playOpen = useCallback(() => {\r\n    if (busyRef.current) return;\r\n    busyRef.current = true;\r\n    const tl = buildOpenTimeline();\r\n    if (tl) {\r\n      tl.eventCallback('onComplete', () => {\r\n        busyRef.current = false;\r\n      });\r\n      tl.play(0);\r\n    } else {\r\n      busyRef.current = false;\r\n    }\r\n  }, [buildOpenTimeline]);\r\n\r\n  const playClose = useCallback(() => {\r\n    openTlRef.current?.kill();\r\n    openTlRef.current = null;\r\n    itemEntranceTweenRef.current?.kill();\r\n\r\n    const panel = panelRef.current;\r\n    const layers = preLayerElsRef.current;\r\n    if (!panel) return;\r\n\r\n    const all = [...layers, panel];\r\n    closeTweenRef.current?.kill();\r\n\r\n    const offscreen = position === 'left' ? -100 : 100;\r\n\r\n    closeTweenRef.current = gsap.to(all, {\r\n      xPercent: offscreen,\r\n      duration: 0.32,\r\n      ease: 'power3.in',\r\n      overwrite: 'auto',\r\n      onComplete: () => {\r\n        const itemEls = Array.from(panel.querySelectorAll('.sm-panel-itemLabel'));\r\n        if (itemEls.length) gsap.set(itemEls, { yPercent: 140, rotate: 10 });\r\n\r\n        const numberEls = Array.from(panel.querySelectorAll('.sm-panel-list[data-numbering] .sm-panel-item'));\r\n        if (numberEls.length) gsap.set(numberEls, { ['--sm-num-opacity']: 0 });\r\n\r\n        const socialTitle = panel.querySelector('.sm-socials-title');\r\n        const socialLinks = Array.from(panel.querySelectorAll('.sm-socials-link'));\r\n        if (socialTitle) gsap.set(socialTitle, { opacity: 0 });\r\n        if (socialLinks.length) gsap.set(socialLinks, { y: 25, opacity: 0 });\r\n\r\n        busyRef.current = false;\r\n      }\r\n    });\r\n  }, [position]);\r\n\r\n  const animateIcon = useCallback(opening => {\r\n    const icon = iconRef.current;\r\n    const h = plusHRef.current;\r\n    const v = plusVRef.current;\r\n    if (!icon || !h || !v) return;\r\n\r\n    spinTweenRef.current?.kill();\r\n\r\n    if (opening) {\r\n      gsap.set(icon, { rotate: 0, transformOrigin: '50% 50%' });\r\n      spinTweenRef.current = gsap\r\n        .timeline({ defaults: { ease: 'power4.out' } })\r\n        .to(h, { rotate: 45, duration: 0.5 }, 0)\r\n        .to(v, { rotate: -45, duration: 0.5 }, 0);\r\n    } else {\r\n      spinTweenRef.current = gsap\r\n        .timeline({ defaults: { ease: 'power3.inOut' } })\r\n        .to(h, { rotate: 0, duration: 0.35 }, 0)\r\n        .to(v, { rotate: 90, duration: 0.35 }, 0)\r\n        .to(icon, { rotate: 0, duration: 0.001 }, 0);\r\n    }\r\n  }, []);\r\n\r\n  const animateColor = useCallback(\r\n    opening => {\r\n      const btn = toggleBtnRef.current;\r\n      if (!btn) return;\r\n      colorTweenRef.current?.kill();\r\n      if (changeMenuColorOnOpen) {\r\n        const targetColor = opening ? openMenuButtonColor : menuButtonColor;\r\n        colorTweenRef.current = gsap.to(btn, { color: targetColor, delay: 0.18, duration: 0.3, ease: 'power2.out' });\r\n      } else {\r\n        gsap.set(btn, { color: menuButtonColor });\r\n      }\r\n    },\r\n    [openMenuButtonColor, menuButtonColor, changeMenuColorOnOpen]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (toggleBtnRef.current) {\r\n      if (changeMenuColorOnOpen) {\r\n        const targetColor = openRef.current ? openMenuButtonColor : menuButtonColor;\r\n        gsap.set(toggleBtnRef.current, { color: targetColor });\r\n      } else {\r\n        gsap.set(toggleBtnRef.current, { color: menuButtonColor });\r\n      }\r\n    }\r\n  }, [changeMenuColorOnOpen, menuButtonColor, openMenuButtonColor]);\r\n\r\n  const animateText = useCallback(opening => {\r\n    const inner = textInnerRef.current;\r\n    if (!inner) return;\r\n\r\n    textCycleAnimRef.current?.kill();\r\n\r\n    const currentLabel = opening ? 'Menu' : 'Close';\r\n    const targetLabel = opening ? 'Close' : 'Menu';\r\n    const cycles = 3;\r\n\r\n    const seq = [currentLabel];\r\n    let last = currentLabel;\r\n    for (let i = 0; i < cycles; i++) {\r\n      last = last === 'Menu' ? 'Close' : 'Menu';\r\n      seq.push(last);\r\n    }\r\n    if (last !== targetLabel) seq.push(targetLabel);\r\n    seq.push(targetLabel);\r\n\r\n    setTextLines(seq);\r\n    gsap.set(inner, { yPercent: 0 });\r\n\r\n    const lineCount = seq.length;\r\n    const finalShift = ((lineCount - 1) / lineCount) * 100;\r\n\r\n    textCycleAnimRef.current = gsap.to(inner, {\r\n      yPercent: -finalShift,\r\n      duration: 0.5 + lineCount * 0.07,\r\n      ease: 'power4.out'\r\n    });\r\n  }, []);\r\n\r\n  const toggleMenu = useCallback(() => {\r\n    const target = !openRef.current;\r\n    openRef.current = target;\r\n    setOpen(target);\r\n\r\n    if (target) {\r\n      onMenuOpen?.();\r\n      playOpen();\r\n    } else {\r\n      onMenuClose?.();\r\n      playClose();\r\n    }\r\n\r\n    animateIcon(target);\r\n    animateColor(target);\r\n    animateText(target);\r\n  }, [playOpen, playClose, animateIcon, animateColor, animateText, onMenuOpen, onMenuClose]);\r\n\r\n  return (\r\n    <div className=\"sm-scope w-full h-full\">\r\n      <div\r\n        className={(className ? className + ' ' : '') + 'staggered-menu-wrapper relative w-full h-full z-40'}\r\n        style={accentColor ? { ['--sm-accent']: accentColor } : undefined}\r\n        data-position={position}\r\n        data-open={open || undefined}\r\n      >\r\n        <div\r\n          ref={preLayersRef}\r\n          className=\"sm-prelayers absolute top-0 right-0 bottom-0 pointer-events-none z-[5]\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          {(() => {\r\n            const raw = colors && colors.length ? colors.slice(0, 4) : ['#1e1e22', '#35353c'];\r\n            let arr = [...raw];\r\n            if (arr.length >= 3) {\r\n              const mid = Math.floor(arr.length / 2);\r\n              arr.splice(mid, 1);\r\n            }\r\n            return arr.map((c, i) => (\r\n              <div\r\n                key={i}\r\n                className=\"sm-prelayer absolute top-0 right-0 h-full w-full translate-x-0\"\r\n                style={{ background: c }}\r\n              />\r\n            ));\r\n          })()}\r\n        </div>\r\n\r\n        <header\r\n          className=\"staggered-menu-header absolute top-0 left-0 w-full flex items-center justify-between p-[2em] bg-transparent pointer-events-none z-20\"\r\n          aria-label=\"Main navigation header\"\r\n        >\r\n          <div className=\"sm-logo flex items-center select-none pointer-events-auto\" aria-label=\"Logo\">\r\n            <img\r\n              src={logoUrl || '/src/assets/logos/reactbits-gh-white.svg'}\r\n              alt=\"Logo\"\r\n              className=\"sm-logo-img block h-8 w-auto object-contain\"\r\n              draggable={false}\r\n              width={110}\r\n              height={24}\r\n            />\r\n          </div>\r\n\r\n          <button\r\n            ref={toggleBtnRef}\r\n            className=\"sm-toggle relative inline-flex items-center gap-[0.3rem] bg-transparent border-0 cursor-pointer text-[#e9e9ef] font-medium leading-none overflow-visible pointer-events-auto\"\r\n            aria-label={open ? 'Close menu' : 'Open menu'}\r\n            aria-expanded={open}\r\n            aria-controls=\"staggered-menu-panel\"\r\n            onClick={toggleMenu}\r\n            type=\"button\"\r\n          >\r\n            <span\r\n              ref={textWrapRef}\r\n              className=\"sm-toggle-textWrap relative inline-block h-[1em] overflow-hidden whitespace-nowrap w-[var(--sm-toggle-width,auto)] min-w-[var(--sm-toggle-width,auto)]\"\r\n              aria-hidden=\"true\"\r\n            >\r\n              <span ref={textInnerRef} className=\"sm-toggle-textInner flex flex-col leading-none\">\r\n                {textLines.map((l, i) => (\r\n                  <span className=\"sm-toggle-line block h-[1em] leading-none\" key={i}>\r\n                    {l}\r\n                  </span>\r\n                ))}\r\n              </span>\r\n            </span>\r\n\r\n            <span\r\n              ref={iconRef}\r\n              className=\"sm-icon relative w-[14px] h-[14px] shrink-0 inline-flex items-center justify-center [will-change:transform]\"\r\n              aria-hidden=\"true\"\r\n            >\r\n              <span\r\n                ref={plusHRef}\r\n                className=\"sm-icon-line absolute left-1/2 top-1/2 w-full h-[2px] bg-current rounded-[2px] -translate-x-1/2 -translate-y-1/2 [will-change:transform]\"\r\n              />\r\n              <span\r\n                ref={plusVRef}\r\n                className=\"sm-icon-line sm-icon-line-v absolute left-1/2 top-1/2 w-full h-[2px] bg-current rounded-[2px] -translate-x-1/2 -translate-y-1/2 [will-change:transform]\"\r\n              />\r\n            </span>\r\n          </button>\r\n        </header>\r\n\r\n        <aside\r\n          id=\"staggered-menu-panel\"\r\n          ref={panelRef}\r\n          className=\"staggered-menu-panel absolute top-0 right-0 h-full bg-white flex flex-col p-[6em_2em_2em_2em] overflow-y-auto z-10 backdrop-blur-[12px]\"\r\n          style={{ WebkitBackdropFilter: 'blur(12px)' }}\r\n          aria-hidden={!open}\r\n        >\r\n          <div className=\"sm-panel-inner flex-1 flex flex-col gap-5\">\r\n            <ul\r\n              className=\"sm-panel-list list-none m-0 p-0 flex flex-col gap-2\"\r\n              role=\"list\"\r\n              data-numbering={displayItemNumbering || undefined}\r\n            >\r\n              {items && items.length ? (\r\n                items.map((it, idx) => (\r\n                  <li className=\"sm-panel-itemWrap relative overflow-hidden leading-none\" key={it.label + idx}>\r\n                    <a\r\n                      className=\"sm-panel-item relative text-black font-semibold text-[4rem] cursor-pointer leading-none tracking-[-2px] uppercase transition-[background,color] duration-150 ease-linear inline-block no-underline pr-[1.4em]\"\r\n                      href={it.link}\r\n                      aria-label={it.ariaLabel}\r\n                      data-index={idx + 1}\r\n                    >\r\n                      <span className=\"sm-panel-itemLabel inline-block [transform-origin:50%_100%] will-change-transform\">\r\n                        {it.label}\r\n                      </span>\r\n                    </a>\r\n                  </li>\r\n                ))\r\n              ) : (\r\n                <li className=\"sm-panel-itemWrap relative overflow-hidden leading-none\" aria-hidden=\"true\">\r\n                  <span className=\"sm-panel-item relative text-black font-semibold text-[4rem] cursor-pointer leading-none tracking-[-2px] uppercase transition-[background,color] duration-150 ease-linear inline-block no-underline pr-[1.4em]\">\r\n                    <span className=\"sm-panel-itemLabel inline-block [transform-origin:50%_100%] will-change-transform\">\r\n                      No items\r\n                    </span>\r\n                  </span>\r\n                </li>\r\n              )}\r\n            </ul>\r\n\r\n            {displaySocials && socialItems && socialItems.length > 0 && (\r\n              <div className=\"sm-socials mt-auto pt-8 flex flex-col gap-3\" aria-label=\"Social links\">\r\n                <h3 className=\"sm-socials-title m-0 text-base font-medium [color:var(--sm-accent,#ff0000)]\">Socials</h3>\r\n                <ul\r\n                  className=\"sm-socials-list list-none m-0 p-0 flex flex-row items-center gap-4 flex-wrap\"\r\n                  role=\"list\"\r\n                >\r\n                  {socialItems.map((s, i) => (\r\n                    <li key={s.label + i} className=\"sm-socials-item\">\r\n                      <a\r\n                        href={s.link}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        className=\"sm-socials-link text-[1.2rem] font-medium text-[#111] no-underline relative inline-block py-[2px] transition-[color,opacity] duration-300 ease-linear\"\r\n                      >\r\n                        {s.label}\r\n                      </a>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </aside>\r\n      </div>\r\n\r\n      <style>{`\r\n.sm-scope .staggered-menu-wrapper { position: relative; width: 100%; height: 100%; z-index: 40; }\r\n.sm-scope .staggered-menu-header { position: absolute; top: 0; left: 0; width: 100%; display: flex; align-items: center; justify-content: space-between; padding: 2em; background: transparent; pointer-events: none; z-index: 20; }\r\n.sm-scope .staggered-menu-header > * { pointer-events: auto; }\r\n.sm-scope .sm-logo { display: flex; align-items: center; user-select: none; }\r\n.sm-scope .sm-logo-img { display: block; height: 32px; width: auto; object-fit: contain; }\r\n.sm-scope .sm-toggle { position: relative; display: inline-flex; align-items: center; gap: 0.3rem; background: transparent; border: none; cursor: pointer; color: #e9e9ef; font-weight: 500; line-height: 1; overflow: visible; }\r\n.sm-scope .sm-toggle:focus-visible { outline: 2px solid #ffffffaa; outline-offset: 4px; border-radius: 4px; }\r\n.sm-scope .sm-line:last-of-type { margin-top: 6px; }\r\n.sm-scope .sm-toggle-textWrap { position: relative; margin-right: 0.5em; display: inline-block; height: 1em; overflow: hidden; white-space: nowrap; width: var(--sm-toggle-width, auto); min-width: var(--sm-toggle-width, auto); }\r\n.sm-scope .sm-toggle-textInner { display: flex; flex-direction: column; line-height: 1; }\r\n.sm-scope .sm-toggle-line { display: block; height: 1em; line-height: 1; }\r\n.sm-scope .sm-icon { position: relative; width: 14px; height: 14px; flex: 0 0 14px; display: inline-flex; align-items: center; justify-content: center; will-change: transform; }\r\n.sm-scope .sm-panel-itemWrap { position: relative; overflow: hidden; line-height: 1; }\r\n.sm-scope .sm-icon-line { position: absolute; left: 50%; top: 50%; width: 100%; height: 2px; background: currentColor; border-radius: 2px; transform: translate(-50%, -50%); will-change: transform; }\r\n.sm-scope .sm-line { display: none !important; }\r\n.sm-scope .staggered-menu-panel { poimport StaggeredMenu from '../../../ts-default/Components/StaggeredMenu/StaggeredMenu';\r\nsition: absolute; top: 0; right: 0; width: clamp(260px, 38vw, 420px); height: 100%; background: white; backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px); display: flex; flex-direction: column; padding: 6em 2em 2em 2em; overflow-y: auto; z-index: 10; }\r\n.sm-scope [data-position='left'] .staggered-menu-panel { right: auto; left: 0; }\r\n.sm-scope .sm-prelayers { position: absolute; top: 0; right: 0; bottom: 0; width: clamp(260px, 38vw, 420px); pointer-events: none; z-index: 5; }\r\n.sm-scope [data-position='left'] .sm-prelayers { right: auto; left: 0; }\r\n.sm-scope .sm-prelayer { position: absolute; top: 0; right: 0; height: 100%; width: 100%; transform: translateX(0); }\r\n.sm-scope .sm-panel-inner { flex: 1; display: flex; flex-direction: column; gap: 1.25rem; }\r\n.sm-scope .sm-socials { margin-top: auto; padding-top: 2rem; display: flex; flex-direction: column; gap: 0.75rem; }\r\n.sm-scope .sm-socials-title { margin: 0; font-size: 1rem; font-weight: 500; color: var(--sm-accent, #ff0000); }\r\n.sm-scope .sm-socials-list { list-style: none; margin: 0; padding: 0; display: flex; flex-direction: row; align-items: center; gap: 1rem; flex-wrap: wrap; }\r\n.sm-scope .sm-socials-list .sm-socials-link { opacity: 1; transition: opacity 0.3s ease; }\r\n.sm-scope .sm-socials-list:hover .sm-socials-link:not(:hover) { opacity: 0.35; }\r\n.sm-scope .sm-socials-list:focus-within .sm-socials-link:not(:focus-visible) { opacity: 0.35; }\r\n.sm-scope .sm-socials-list .sm-socials-link:hover,\r\n.sm-scope .sm-socials-list .sm-socials-link:focus-visible { opacity: 1; }\r\n.sm-scope .sm-socials-link:focus-visible { outline: 2px solid var(--sm-accent, #ff0000); outline-offset: 3px; }\r\n.sm-scope .sm-socials-link { font-size: 1.2rem; font-weight: 500; color: #111; text-decoration: none; position: relative; padding: 2px 0; display: inline-block; transition: color 0.3s ease, opacity 0.3s ease; }\r\n.sm-scope .sm-socials-link:hover { color: var(--sm-accent, #ff0000); }\r\n.sm-scope .sm-panel-title { margin: 0; font-size: 1rem; font-weight: 600; color: #fff; text-transform: uppercase; }\r\n.sm-scope .sm-panel-list { list-style: none; margin: 0; padding: 0; display: flex; flex-direction: column; gap: 0.5rem; }\r\n.sm-scope .sm-panel-item { position: relative; color: #000; font-weight: 600; font-size: 4rem; cursor: pointer; line-height: 1; letter-spacing: -2px; text-transform: uppercase; transition: background 0.25s, color 0.25s; display: inline-block; text-decoration: none; padding-right: 1.4em; }\r\n.sm-scope .sm-panel-itemLabel { display: inline-block; will-change: transform; transform-origin: 50% 100%; }\r\n.sm-scope .sm-panel-item:hover { color: var(--sm-accent, #ff0000); }\r\n.sm-scope .sm-panel-list[data-numbering] { counter-reset: smItem; }\r\n.sm-scope .sm-panel-list[data-numbering] .sm-panel-item::after { counter-increment: smItem; content: counter(smItem, decimal-leading-zero); position: absolute; top: 0.1em; right: 3.2em; font-size: 18px; font-weight: 400; color: var(--sm-accent, #ff0000); letter-spacing: 0; pointer-events: none; user-select: none; opacity: var(--sm-num-opacity, 0); }\r\n@media (max-width: 1024px) { .sm-scope .staggered-menu-panel { width: 100%; left: 0; right: 0; } .sm-scope .staggered-menu-wrapper[data-open] .sm-logo-img { filter: invert(100%); } }\r\n@media (max-width: 640px) { .sm-scope .staggered-menu-panel { width: 100%; left: 0; right: 0; } .sm-scope .staggered-menu-wrapper[data-open] .sm-logo-img { filter: invert(100%); } }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StaggeredMenu;\r\n",
      "type": "registry:component"
    }
  ]
}