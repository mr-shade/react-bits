{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Counter-JS-TW",
  "type": "registry:block",
  "title": "Counter",
  "description": "Flexible animated counter supporting increments + easing.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Components/Counter/Counter.jsx",
      "content": "import { motion, useSpring, useTransform } from 'motion/react';\r\nimport { useEffect } from 'react';\r\n\r\nfunction Number({ mv, number, height }) {\r\n  let y = useTransform(mv, latest => {\r\n    let placeValue = latest % 10;\r\n    let offset = (10 + number - placeValue) % 10;\r\n    let memo = offset * height;\r\n    if (offset > 5) {\r\n      memo -= 10 * height;\r\n    }\r\n    return memo;\r\n  });\r\n\r\n  const style = {\r\n    position: 'absolute',\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  };\r\n\r\n  return <motion.span style={{ ...style, y }}>{number}</motion.span>;\r\n}\r\n\r\nfunction Digit({ place, value, height, digitStyle }) {\r\n  let valueRoundedToPlace = Math.floor(value / place);\r\n  let animatedValue = useSpring(valueRoundedToPlace);\r\n\r\n  useEffect(() => {\r\n    animatedValue.set(valueRoundedToPlace);\r\n  }, [animatedValue, valueRoundedToPlace]);\r\n\r\n  const defaultStyle = {\r\n    height,\r\n    position: 'relative',\r\n    width: '1ch',\r\n    fontVariantNumeric: 'tabular-nums'\r\n  };\r\n\r\n  return (\r\n    <div style={{ ...defaultStyle, ...digitStyle }}>\r\n      {Array.from({ length: 10 }, (_, i) => (\r\n        <Number key={i} mv={animatedValue} number={i} height={height} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Counter({\r\n  value,\r\n  fontSize = 100,\r\n  padding = 0,\r\n  places = [100, 10, 1],\r\n  gap = 8,\r\n  borderRadius = 4,\r\n  horizontalPadding = 8,\r\n  textColor = 'white',\r\n  fontWeight = 'bold',\r\n  containerStyle,\r\n  counterStyle,\r\n  digitStyle,\r\n  gradientHeight = 16,\r\n  gradientFrom = 'black',\r\n  gradientTo = 'transparent',\r\n  topGradientStyle,\r\n  bottomGradientStyle\r\n}) {\r\n  const height = fontSize + padding;\r\n\r\n  const defaultContainerStyle = {\r\n    position: 'relative',\r\n    display: 'inline-block'\r\n  };\r\n\r\n  const defaultCounterStyle = {\r\n    fontSize,\r\n    display: 'flex',\r\n    gap: gap,\r\n    overflow: 'hidden',\r\n    borderRadius: borderRadius,\r\n    paddingLeft: horizontalPadding,\r\n    paddingRight: horizontalPadding,\r\n    lineHeight: 1,\r\n    color: textColor,\r\n    fontWeight: fontWeight\r\n  };\r\n\r\n  const gradientContainerStyle = {\r\n    pointerEvents: 'none',\r\n    position: 'absolute',\r\n    top: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    right: 0\r\n  };\r\n\r\n  const defaultTopGradientStyle = {\r\n    height: gradientHeight,\r\n    background: `linear-gradient(to bottom, ${gradientFrom}, ${gradientTo})`\r\n  };\r\n\r\n  const defaultBottomGradientStyle = {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    width: '100%',\r\n    height: gradientHeight,\r\n    background: `linear-gradient(to top, ${gradientFrom}, ${gradientTo})`\r\n  };\r\n\r\n  return (\r\n    <div style={{ ...defaultContainerStyle, ...containerStyle }}>\r\n      <div style={{ ...defaultCounterStyle, ...counterStyle }}>\r\n        {places.map(place => (\r\n          <Digit key={place} place={place} value={value} height={height} digitStyle={digitStyle} />\r\n        ))}\r\n      </div>\r\n      <div style={gradientContainerStyle}>\r\n        <div style={topGradientStyle ? topGradientStyle : defaultTopGradientStyle} />\r\n        <div style={bottomGradientStyle ? bottomGradientStyle : defaultBottomGradientStyle} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}