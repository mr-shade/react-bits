{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "PillNav-JS-TW",
  "type": "registry:block",
  "title": "PillNav",
  "description": "Minimal pill nav with sliding active highlight + smooth easing.",
  "dependencies": [
    "gsap",
    "react-router-dom"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Components/PillNav/PillNav.jsx",
      "content": "import { useEffect, useRef, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { gsap } from 'gsap';\r\n\r\nconst PillNav = ({\r\n  logo,\r\n  logoAlt = 'Logo',\r\n  items,\r\n  activeHref,\r\n  className = '',\r\n  ease = 'power3.easeOut',\r\n  baseColor = '#fff',\r\n  pillColor = '#060010',\r\n  hoveredPillTextColor = '#060010',\r\n  pillTextColor,\r\n  onMobileMenuClick,\r\n  initialLoadAnimation = true\r\n}) => {\r\n  const resolvedPillTextColor = pillTextColor ?? baseColor;\r\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\r\n  const circleRefs = useRef([]);\r\n  const tlRefs = useRef([]);\r\n  const activeTweenRefs = useRef([]);\r\n  const logoImgRef = useRef(null);\r\n  const logoTweenRef = useRef(null);\r\n  const hamburgerRef = useRef(null);\r\n  const mobileMenuRef = useRef(null);\r\n  const navItemsRef = useRef(null);\r\n  const logoRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const layout = () => {\r\n      circleRefs.current.forEach(circle => {\r\n        if (!circle?.parentElement) return;\r\n\r\n        const pill = circle.parentElement;\r\n        const rect = pill.getBoundingClientRect();\r\n        const { width: w, height: h } = rect;\r\n        const R = ((w * w) / 4 + h * h) / (2 * h);\r\n        const D = Math.ceil(2 * R) + 2;\r\n        const delta = Math.ceil(R - Math.sqrt(Math.max(0, R * R - (w * w) / 4))) + 1;\r\n        const originY = D - delta;\r\n\r\n        circle.style.width = `${D}px`;\r\n        circle.style.height = `${D}px`;\r\n        circle.style.bottom = `-${delta}px`;\r\n\r\n        gsap.set(circle, {\r\n          xPercent: -50,\r\n          scale: 0,\r\n          transformOrigin: `50% ${originY}px`\r\n        });\r\n\r\n        const label = pill.querySelector('.pill-label');\r\n        const white = pill.querySelector('.pill-label-hover');\r\n\r\n        if (label) gsap.set(label, { y: 0 });\r\n        if (white) gsap.set(white, { y: h + 12, opacity: 0 });\r\n\r\n        const index = circleRefs.current.indexOf(circle);\r\n        if (index === -1) return;\r\n\r\n        tlRefs.current[index]?.kill();\r\n        const tl = gsap.timeline({ paused: true });\r\n\r\n        tl.to(circle, { scale: 1.2, xPercent: -50, duration: 2, ease, overwrite: 'auto' }, 0);\r\n\r\n        if (label) {\r\n          tl.to(label, { y: -(h + 8), duration: 2, ease, overwrite: 'auto' }, 0);\r\n        }\r\n\r\n        if (white) {\r\n          gsap.set(white, { y: Math.ceil(h + 100), opacity: 0 });\r\n          tl.to(white, { y: 0, opacity: 1, duration: 2, ease, overwrite: 'auto' }, 0);\r\n        }\r\n\r\n        tlRefs.current[index] = tl;\r\n      });\r\n    };\r\n\r\n    layout();\r\n\r\n    const onResize = () => layout();\r\n    window.addEventListener('resize', onResize);\r\n\r\n    if (document.fonts?.ready) {\r\n      document.fonts.ready.then(layout).catch(() => {});\r\n    }\r\n\r\n    const menu = mobileMenuRef.current;\r\n    if (menu) {\r\n      gsap.set(menu, { visibility: 'hidden', opacity: 0, scaleY: 1, y: 0 });\r\n    }\r\n\r\n    if (initialLoadAnimation) {\r\n      const logo = logoRef.current;\r\n      const navItems = navItemsRef.current;\r\n\r\n      if (logo) {\r\n        gsap.set(logo, { scale: 0 });\r\n        gsap.to(logo, {\r\n          scale: 1,\r\n          duration: 0.6,\r\n          ease\r\n        });\r\n      }\r\n\r\n      if (navItems) {\r\n        gsap.set(navItems, { width: 0, overflow: 'hidden' });\r\n        gsap.to(navItems, {\r\n          width: 'auto',\r\n          duration: 0.6,\r\n          ease\r\n        });\r\n      }\r\n    }\r\n\r\n    return () => window.removeEventListener('resize', onResize);\r\n  }, [items, ease, initialLoadAnimation]);\r\n\r\n  const handleEnter = i => {\r\n    const tl = tlRefs.current[i];\r\n    if (!tl) return;\r\n    activeTweenRefs.current[i]?.kill();\r\n    activeTweenRefs.current[i] = tl.tweenTo(tl.duration(), {\r\n      duration: 0.3,\r\n      ease,\r\n      overwrite: 'auto'\r\n    });\r\n  };\r\n\r\n  const handleLeave = i => {\r\n    const tl = tlRefs.current[i];\r\n    if (!tl) return;\r\n    activeTweenRefs.current[i]?.kill();\r\n    activeTweenRefs.current[i] = tl.tweenTo(0, {\r\n      duration: 0.2,\r\n      ease,\r\n      overwrite: 'auto'\r\n    });\r\n  };\r\n\r\n  const handleLogoEnter = () => {\r\n    const img = logoImgRef.current;\r\n    if (!img) return;\r\n    logoTweenRef.current?.kill();\r\n    gsap.set(img, { rotate: 0 });\r\n    logoTweenRef.current = gsap.to(img, {\r\n      rotate: 360,\r\n      duration: 0.2,\r\n      ease,\r\n      overwrite: 'auto'\r\n    });\r\n  };\r\n\r\n  const toggleMobileMenu = () => {\r\n    const newState = !isMobileMenuOpen;\r\n    setIsMobileMenuOpen(newState);\r\n\r\n    const hamburger = hamburgerRef.current;\r\n    const menu = mobileMenuRef.current;\r\n\r\n    if (hamburger) {\r\n      const lines = hamburger.querySelectorAll('.hamburger-line');\r\n      if (newState) {\r\n        gsap.to(lines[0], { rotation: 45, y: 3, duration: 0.3, ease });\r\n        gsap.to(lines[1], { rotation: -45, y: -3, duration: 0.3, ease });\r\n      } else {\r\n        gsap.to(lines[0], { rotation: 0, y: 0, duration: 0.3, ease });\r\n        gsap.to(lines[1], { rotation: 0, y: 0, duration: 0.3, ease });\r\n      }\r\n    }\r\n\r\n    if (menu) {\r\n      if (newState) {\r\n        gsap.set(menu, { visibility: 'visible' });\r\n        gsap.fromTo(\r\n          menu,\r\n          { opacity: 0, y: 10, scaleY: 1 },\r\n          {\r\n            opacity: 1,\r\n            y: 0,\r\n            scaleY: 1,\r\n            duration: 0.3,\r\n            ease,\r\n            transformOrigin: 'top center'\r\n          }\r\n        );\r\n      } else {\r\n        gsap.to(menu, {\r\n          opacity: 0,\r\n          y: 10,\r\n          scaleY: 1,\r\n          duration: 0.2,\r\n          ease,\r\n          transformOrigin: 'top center',\r\n          onComplete: () => {\r\n            gsap.set(menu, { visibility: 'hidden' });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    onMobileMenuClick?.();\r\n  };\r\n\r\n  const isExternalLink = href =>\r\n    href.startsWith('http://') ||\r\n    href.startsWith('https://') ||\r\n    href.startsWith('//') ||\r\n    href.startsWith('mailto:') ||\r\n    href.startsWith('tel:') ||\r\n    href.startsWith('#');\r\n\r\n  const isRouterLink = href => href && !isExternalLink(href);\r\n\r\n  const cssVars = {\r\n    ['--base']: baseColor,\r\n    ['--pill-bg']: pillColor,\r\n    ['--hover-text']: hoveredPillTextColor,\r\n    ['--pill-text']: resolvedPillTextColor,\r\n    ['--nav-h']: '42px',\r\n    ['--logo']: '36px',\r\n    ['--pill-pad-x']: '18px',\r\n    ['--pill-gap']: '3px'\r\n  };\r\n\r\n  return (\r\n    <div className=\"absolute top-[1em] z-[1000] w-full left-0 md:w-auto md:left-auto\">\r\n      <nav\r\n        className={`w-full md:w-max flex items-center justify-between md:justify-start box-border px-4 md:px-0 ${className}`}\r\n        aria-label=\"Primary\"\r\n        style={cssVars}\r\n      >\r\n        {isRouterLink(items?.[0]?.href) ? (\r\n          <Link\r\n            to={items[0].href}\r\n            aria-label=\"Home\"\r\n            onMouseEnter={handleLogoEnter}\r\n            role=\"menuitem\"\r\n            ref={el => {\r\n              logoRef.current = el;\r\n            }}\r\n            className=\"rounded-full p-2 inline-flex items-center justify-center overflow-hidden\"\r\n            style={{\r\n              width: 'var(--nav-h)',\r\n              height: 'var(--nav-h)',\r\n              background: 'var(--base, #000)'\r\n            }}\r\n          >\r\n            <img src={logo} alt={logoAlt} ref={logoImgRef} className=\"w-full h-full object-cover block\" />\r\n          </Link>\r\n        ) : (\r\n          <a\r\n            href={items?.[0]?.href || '#'}\r\n            aria-label=\"Home\"\r\n            onMouseEnter={handleLogoEnter}\r\n            ref={el => {\r\n              logoRef.current = el;\r\n            }}\r\n            className=\"rounded-full p-2 inline-flex items-center justify-center overflow-hidden\"\r\n            style={{\r\n              width: 'var(--nav-h)',\r\n              height: 'var(--nav-h)',\r\n              background: 'var(--base, #000)'\r\n            }}\r\n          >\r\n            <img src={logo} alt={logoAlt} ref={logoImgRef} className=\"w-full h-full object-cover block\" />\r\n          </a>\r\n        )}\r\n\r\n        <div\r\n          ref={navItemsRef}\r\n          className=\"relative items-center rounded-full hidden md:flex ml-2\"\r\n          style={{\r\n            height: 'var(--nav-h)',\r\n            background: 'var(--base, #000)'\r\n          }}\r\n        >\r\n          <ul\r\n            role=\"menubar\"\r\n            className=\"list-none flex items-stretch m-0 p-[3px] h-full\"\r\n            style={{ gap: 'var(--pill-gap)' }}\r\n          >\r\n            {items.map((item, i) => {\r\n              const isActive = activeHref === item.href;\r\n\r\n              const pillStyle = {\r\n                background: 'var(--pill-bg, #fff)',\r\n                color: 'var(--pill-text, var(--base, #000))',\r\n                paddingLeft: 'var(--pill-pad-x)',\r\n                paddingRight: 'var(--pill-pad-x)'\r\n              };\r\n\r\n              const PillContent = (\r\n                <>\r\n                  <span\r\n                    className=\"hover-circle absolute left-1/2 bottom-0 rounded-full z-[1] block pointer-events-none\"\r\n                    style={{\r\n                      background: 'var(--base, #000)',\r\n                      willChange: 'transform'\r\n                    }}\r\n                    aria-hidden=\"true\"\r\n                    ref={el => {\r\n                      circleRefs.current[i] = el;\r\n                    }}\r\n                  />\r\n                  <span className=\"label-stack relative inline-block leading-[1] z-[2]\">\r\n                    <span\r\n                      className=\"pill-label relative z-[2] inline-block leading-[1]\"\r\n                      style={{ willChange: 'transform' }}\r\n                    >\r\n                      {item.label}\r\n                    </span>\r\n                    <span\r\n                      className=\"pill-label-hover absolute left-0 top-0 z-[3] inline-block\"\r\n                      style={{\r\n                        color: 'var(--hover-text, #fff)',\r\n                        willChange: 'transform, opacity'\r\n                      }}\r\n                      aria-hidden=\"true\"\r\n                    >\r\n                      {item.label}\r\n                    </span>\r\n                  </span>\r\n                  {isActive && (\r\n                    <span\r\n                      className=\"absolute left-1/2 -bottom-[6px] -translate-x-1/2 w-3 h-3 rounded-full z-[4]\"\r\n                      style={{ background: 'var(--base, #000)' }}\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                  )}\r\n                </>\r\n              );\r\n\r\n              const basePillClasses =\r\n                'relative overflow-hidden inline-flex items-center justify-center h-full no-underline rounded-full box-border font-semibold text-[16px] leading-[0] uppercase tracking-[0.2px] whitespace-nowrap cursor-pointer px-0';\r\n\r\n              return (\r\n                <li key={item.href} role=\"none\" className=\"flex h-full\">\r\n                  {isRouterLink(item.href) ? (\r\n                    <Link\r\n                      role=\"menuitem\"\r\n                      to={item.href}\r\n                      className={basePillClasses}\r\n                      style={pillStyle}\r\n                      aria-label={item.ariaLabel || item.label}\r\n                      onMouseEnter={() => handleEnter(i)}\r\n                      onMouseLeave={() => handleLeave(i)}\r\n                    >\r\n                      {PillContent}\r\n                    </Link>\r\n                  ) : (\r\n                    <a\r\n                      role=\"menuitem\"\r\n                      href={item.href}\r\n                      className={basePillClasses}\r\n                      style={pillStyle}\r\n                      aria-label={item.ariaLabel || item.label}\r\n                      onMouseEnter={() => handleEnter(i)}\r\n                      onMouseLeave={() => handleLeave(i)}\r\n                    >\r\n                      {PillContent}\r\n                    </a>\r\n                  )}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n\r\n        <button\r\n          ref={hamburgerRef}\r\n          onClick={toggleMobileMenu}\r\n          aria-label=\"Toggle menu\"\r\n          aria-expanded={isMobileMenuOpen}\r\n          className=\"md:hidden rounded-full border-0 flex flex-col items-center justify-center gap-1 cursor-pointer p-0 relative\"\r\n          style={{\r\n            width: 'var(--nav-h)',\r\n            height: 'var(--nav-h)',\r\n            background: 'var(--base, #000)'\r\n          }}\r\n        >\r\n          <span\r\n            className=\"hamburger-line w-4 h-0.5 rounded origin-center transition-all duration-[10ms] ease-[cubic-bezier(0.25,0.1,0.25,1)]\"\r\n            style={{ background: 'var(--pill-bg, #fff)' }}\r\n          />\r\n          <span\r\n            className=\"hamburger-line w-4 h-0.5 rounded origin-center transition-all duration-[10ms] ease-[cubic-bezier(0.25,0.1,0.25,1)]\"\r\n            style={{ background: 'var(--pill-bg, #fff)' }}\r\n          />\r\n        </button>\r\n      </nav>\r\n\r\n      <div\r\n        ref={mobileMenuRef}\r\n        className=\"md:hidden absolute top-[3em] left-4 right-4 rounded-[27px] shadow-[0_8px_32px_rgba(0,0,0,0.12)] z-[998] origin-top\"\r\n        style={{\r\n          ...cssVars,\r\n          background: 'var(--base, #f0f0f0)'\r\n        }}\r\n      >\r\n        <ul className=\"list-none m-0 p-[3px] flex flex-col gap-[3px]\">\r\n          {items.map(item => {\r\n            const defaultStyle = {\r\n              background: 'var(--pill-bg, #fff)',\r\n              color: 'var(--pill-text, #fff)'\r\n            };\r\n            const hoverIn = e => {\r\n              e.currentTarget.style.background = 'var(--base)';\r\n              e.currentTarget.style.color = 'var(--hover-text, #fff)';\r\n            };\r\n            const hoverOut = e => {\r\n              e.currentTarget.style.background = 'var(--pill-bg, #fff)';\r\n              e.currentTarget.style.color = 'var(--pill-text, #fff)';\r\n            };\r\n\r\n            const linkClasses =\r\n              'block py-3 px-4 text-[16px] font-medium rounded-[50px] transition-all duration-200 ease-[cubic-bezier(0.25,0.1,0.25,1)]';\r\n\r\n            return (\r\n              <li key={item.href}>\r\n                {isRouterLink(item.href) ? (\r\n                  <Link\r\n                    to={item.href}\r\n                    className={linkClasses}\r\n                    style={defaultStyle}\r\n                    onMouseEnter={hoverIn}\r\n                    onMouseLeave={hoverOut}\r\n                    onClick={() => setIsMobileMenuOpen(false)}\r\n                  >\r\n                    {item.label}\r\n                  </Link>\r\n                ) : (\r\n                  <a\r\n                    href={item.href}\r\n                    className={linkClasses}\r\n                    style={defaultStyle}\r\n                    onMouseEnter={hoverIn}\r\n                    onMouseLeave={hoverOut}\r\n                    onClick={() => setIsMobileMenuOpen(false)}\r\n                  >\r\n                    {item.label}\r\n                  </a>\r\n                )}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PillNav;\r\n",
      "type": "registry:component"
    }
  ]
}