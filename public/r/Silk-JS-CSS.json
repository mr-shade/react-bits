{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Silk-JS-CSS",
  "type": "registry:block",
  "title": "Silk",
  "description": "Smooth waves background with soft lighting.",
  "dependencies": [
    "@react-three/fiber",
    "three"
  ],
  "files": [
    {
      "path": "public/default/src/content/Backgrounds/Silk/Silk.jsx",
      "content": "/* eslint-disable react/no-unknown-property */\r\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\r\nimport { forwardRef, useRef, useMemo, useLayoutEffect } from 'react';\r\nimport { Color } from 'three';\r\n\r\nconst hexToNormalizedRGB = hex => {\r\n  hex = hex.replace('#', '');\r\n  return [\r\n    parseInt(hex.slice(0, 2), 16) / 255,\r\n    parseInt(hex.slice(2, 4), 16) / 255,\r\n    parseInt(hex.slice(4, 6), 16) / 255\r\n  ];\r\n};\r\n\r\nconst vertexShader = `\r\nvarying vec2 vUv;\r\nvarying vec3 vPosition;\r\n\r\nvoid main() {\r\n  vPosition = position;\r\n  vUv = uv;\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}\r\n`;\r\n\r\nconst fragmentShader = `\r\nvarying vec2 vUv;\r\nvarying vec3 vPosition;\r\n\r\nuniform float uTime;\r\nuniform vec3  uColor;\r\nuniform float uSpeed;\r\nuniform float uScale;\r\nuniform float uRotation;\r\nuniform float uNoiseIntensity;\r\n\r\nconst float e = 2.71828182845904523536;\r\n\r\nfloat noise(vec2 texCoord) {\r\n  float G = e;\r\n  vec2  r = (G * sin(G * texCoord));\r\n  return fract(r.x * r.y * (1.0 + texCoord.x));\r\n}\r\n\r\nvec2 rotateUvs(vec2 uv, float angle) {\r\n  float c = cos(angle);\r\n  float s = sin(angle);\r\n  mat2  rot = mat2(c, -s, s, c);\r\n  return rot * uv;\r\n}\r\n\r\nvoid main() {\r\n  float rnd        = noise(gl_FragCoord.xy);\r\n  vec2  uv         = rotateUvs(vUv * uScale, uRotation);\r\n  vec2  tex        = uv * uScale;\r\n  float tOffset    = uSpeed * uTime;\r\n\r\n  tex.y += 0.03 * sin(8.0 * tex.x - tOffset);\r\n\r\n  float pattern = 0.6 +\r\n                  0.4 * sin(5.0 * (tex.x + tex.y +\r\n                                   cos(3.0 * tex.x + 5.0 * tex.y) +\r\n                                   0.02 * tOffset) +\r\n                           sin(20.0 * (tex.x + tex.y - 0.1 * tOffset)));\r\n\r\n  vec4 col = vec4(uColor, 1.0) * vec4(pattern) - rnd / 15.0 * uNoiseIntensity;\r\n  col.a = 1.0;\r\n  gl_FragColor = col;\r\n}\r\n`;\r\n\r\nconst SilkPlane = forwardRef(function SilkPlane({ uniforms }, ref) {\r\n  const { viewport } = useThree();\r\n\r\n  useLayoutEffect(() => {\r\n    if (ref.current) {\r\n      ref.current.scale.set(viewport.width, viewport.height, 1);\r\n    }\r\n  }, [ref, viewport]);\r\n\r\n  useFrame((_, delta) => {\r\n    ref.current.material.uniforms.uTime.value += 0.1 * delta;\r\n  });\r\n\r\n  return (\r\n    <mesh ref={ref}>\r\n      <planeGeometry args={[1, 1, 1, 1]} />\r\n      <shaderMaterial uniforms={uniforms} vertexShader={vertexShader} fragmentShader={fragmentShader} />\r\n    </mesh>\r\n  );\r\n});\r\nSilkPlane.displayName = 'SilkPlane';\r\n\r\nconst Silk = ({ speed = 5, scale = 1, color = '#7B7481', noiseIntensity = 1.5, rotation = 0 }) => {\r\n  const meshRef = useRef();\r\n\r\n  const uniforms = useMemo(\r\n    () => ({\r\n      uSpeed: { value: speed },\r\n      uScale: { value: scale },\r\n      uNoiseIntensity: { value: noiseIntensity },\r\n      uColor: { value: new Color(...hexToNormalizedRGB(color)) },\r\n      uRotation: { value: rotation },\r\n      uTime: { value: 0 }\r\n    }),\r\n    [speed, scale, noiseIntensity, color, rotation]\r\n  );\r\n\r\n  return (\r\n    <Canvas dpr={[1, 2]} frameloop=\"always\">\r\n      <SilkPlane ref={meshRef} uniforms={uniforms} />\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default Silk;\r\n",
      "type": "registry:component"
    }
  ]
}