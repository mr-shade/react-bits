{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "FallingText-JS-TW",
  "type": "registry:block",
  "title": "FallingText",
  "description": "Characters fall with gravity + bounce creating a playful entrance.",
  "dependencies": [
    "matter-js"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/TextAnimations/FallingText/FallingText.jsx",
      "content": "import { useRef, useState, useEffect } from 'react';\r\nimport Matter from 'matter-js';\r\n\r\nconst FallingText = ({\r\n  text = '',\r\n  highlightWords = [],\r\n  trigger = 'auto',\r\n  backgroundColor = 'transparent',\r\n  wireframes = false,\r\n  gravity = 1,\r\n  mouseConstraintStiffness = 0.2,\r\n  fontSize = '1rem'\r\n}) => {\r\n  const containerRef = useRef(null);\r\n  const textRef = useRef(null);\r\n  const canvasContainerRef = useRef(null);\r\n\r\n  const [effectStarted, setEffectStarted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!textRef.current) return;\r\n    const words = text.split(' ');\r\n\r\n    const newHTML = words\r\n      .map(word => {\r\n        const isHighlighted = highlightWords.some(hw => word.startsWith(hw));\r\n        return `<span\r\n          class=\"inline-block mx-[2px] select-none ${isHighlighted ? 'text-cyan-500 font-bold' : ''}\"\r\n        >\r\n          ${word}\r\n        </span>`;\r\n      })\r\n      .join(' ');\r\n\r\n    textRef.current.innerHTML = newHTML;\r\n  }, [text, highlightWords]);\r\n\r\n  useEffect(() => {\r\n    if (trigger === 'auto') {\r\n      setEffectStarted(true);\r\n      return;\r\n    }\r\n    if (trigger === 'scroll' && containerRef.current) {\r\n      const observer = new IntersectionObserver(\r\n        ([entry]) => {\r\n          if (entry.isIntersecting) {\r\n            setEffectStarted(true);\r\n            observer.disconnect();\r\n          }\r\n        },\r\n        { threshold: 0.1 }\r\n      );\r\n      observer.observe(containerRef.current);\r\n      return () => observer.disconnect();\r\n    }\r\n  }, [trigger]);\r\n\r\n  useEffect(() => {\r\n    if (!effectStarted) return;\r\n\r\n    const { Engine, Render, World, Bodies, Runner, Mouse, MouseConstraint } = Matter;\r\n\r\n    const containerRect = containerRef.current.getBoundingClientRect();\r\n    const width = containerRect.width;\r\n    const height = containerRect.height;\r\n\r\n    if (width <= 0 || height <= 0) return;\r\n\r\n    const engine = Engine.create();\r\n    engine.world.gravity.y = gravity;\r\n\r\n    const render = Render.create({\r\n      element: canvasContainerRef.current,\r\n      engine,\r\n      options: {\r\n        width,\r\n        height,\r\n        background: backgroundColor,\r\n        wireframes\r\n      }\r\n    });\r\n\r\n    const boundaryOptions = {\r\n      isStatic: true,\r\n      render: { fillStyle: 'transparent' }\r\n    };\r\n    const floor = Bodies.rectangle(width / 2, height + 25, width, 50, boundaryOptions);\r\n    const leftWall = Bodies.rectangle(-25, height / 2, 50, height, boundaryOptions);\r\n    const rightWall = Bodies.rectangle(width + 25, height / 2, 50, height, boundaryOptions);\r\n    const ceiling = Bodies.rectangle(width / 2, -25, width, 50, boundaryOptions);\r\n\r\n    const wordSpans = textRef.current.querySelectorAll('span');\r\n    const wordBodies = [...wordSpans].map(elem => {\r\n      const rect = elem.getBoundingClientRect();\r\n\r\n      const x = rect.left - containerRect.left + rect.width / 2;\r\n      const y = rect.top - containerRect.top + rect.height / 2;\r\n\r\n      const body = Bodies.rectangle(x, y, rect.width, rect.height, {\r\n        render: { fillStyle: 'transparent' },\r\n        restitution: 0.8,\r\n        frictionAir: 0.01,\r\n        friction: 0.2\r\n      });\r\n      Matter.Body.setVelocity(body, {\r\n        x: (Math.random() - 0.5) * 5,\r\n        y: 0\r\n      });\r\n      Matter.Body.setAngularVelocity(body, (Math.random() - 0.5) * 0.05);\r\n\r\n      return { elem, body };\r\n    });\r\n\r\n    wordBodies.forEach(({ elem, body }) => {\r\n      elem.style.position = 'absolute';\r\n      elem.style.left = `${body.position.x - body.bounds.max.x + body.bounds.min.x / 2}px`;\r\n      elem.style.top = `${body.position.y - body.bounds.max.y + body.bounds.min.y / 2}px`;\r\n      elem.style.transform = 'none';\r\n    });\r\n\r\n    const mouse = Mouse.create(containerRef.current);\r\n    const mouseConstraint = MouseConstraint.create(engine, {\r\n      mouse,\r\n      constraint: {\r\n        stiffness: mouseConstraintStiffness,\r\n        render: { visible: false }\r\n      }\r\n    });\r\n    render.mouse = mouse;\r\n\r\n    World.add(engine.world, [floor, leftWall, rightWall, ceiling, mouseConstraint, ...wordBodies.map(wb => wb.body)]);\r\n\r\n    const runner = Runner.create();\r\n    Runner.run(runner, engine);\r\n    Render.run(render);\r\n\r\n    const updateLoop = () => {\r\n      wordBodies.forEach(({ body, elem }) => {\r\n        const { x, y } = body.position;\r\n        elem.style.left = `${x}px`;\r\n        elem.style.top = `${y}px`;\r\n        elem.style.transform = `translate(-50%, -50%) rotate(${body.angle}rad)`;\r\n      });\r\n      Matter.Engine.update(engine);\r\n      requestAnimationFrame(updateLoop);\r\n    };\r\n    updateLoop();\r\n\r\n    return () => {\r\n      Render.stop(render);\r\n      Runner.stop(runner);\r\n      if (render.canvas && canvasContainerRef.current) {\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        canvasContainerRef.current.removeChild(render.canvas);\r\n      }\r\n      World.clear(engine.world);\r\n      Engine.clear(engine);\r\n    };\r\n  }, [effectStarted, gravity, wireframes, backgroundColor, mouseConstraintStiffness]);\r\n\r\n  const handleTrigger = () => {\r\n    if (!effectStarted && (trigger === 'click' || trigger === 'hover')) {\r\n      setEffectStarted(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className=\"relative z-[1] w-full h-full cursor-pointer text-center pt-8 overflow-hidden\"\r\n      onClick={trigger === 'click' ? handleTrigger : undefined}\r\n      onMouseEnter={trigger === 'hover' ? handleTrigger : undefined}\r\n    >\r\n      <div\r\n        ref={textRef}\r\n        className=\"inline-block\"\r\n        style={{\r\n          fontSize,\r\n          lineHeight: 1.4\r\n        }}\r\n      />\r\n\r\n      <div className=\"absolute top-0 left-0 z-0\" ref={canvasContainerRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FallingText;\r\n",
      "type": "registry:component"
    }
  ]
}