{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Iridescence-JS-CSS",
  "type": "registry:block",
  "title": "Iridescence",
  "description": "Slick iridescent shader with shifting waves.",
  "dependencies": [
    "ogl"
  ],
  "files": [
    {
      "path": "public/default/src/content/Backgrounds/Iridescence/Iridescence.jsx",
      "content": "import { Renderer, Program, Mesh, Color, Triangle } from 'ogl';\r\nimport { useEffect, useRef } from 'react';\r\n\r\nimport './Iridescence.css';\r\n\r\nconst vertexShader = `\r\nattribute vec2 uv;\r\nattribute vec2 position;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n  vUv = uv;\r\n  gl_Position = vec4(position, 0, 1);\r\n}\r\n`;\r\n\r\nconst fragmentShader = `\r\nprecision highp float;\r\n\r\nuniform float uTime;\r\nuniform vec3 uColor;\r\nuniform vec3 uResolution;\r\nuniform vec2 uMouse;\r\nuniform float uAmplitude;\r\nuniform float uSpeed;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n  float mr = min(uResolution.x, uResolution.y);\r\n  vec2 uv = (vUv.xy * 2.0 - 1.0) * uResolution.xy / mr;\r\n\r\n  uv += (uMouse - vec2(0.5)) * uAmplitude;\r\n\r\n  float d = -uTime * 0.5 * uSpeed;\r\n  float a = 0.0;\r\n  for (float i = 0.0; i < 8.0; ++i) {\r\n    a += cos(i - d - a * uv.x);\r\n    d += sin(uv.y * i + a);\r\n  }\r\n  d += uTime * 0.5 * uSpeed;\r\n  vec3 col = vec3(cos(uv * vec2(d, a)) * 0.6 + 0.4, cos(a + d) * 0.5 + 0.5);\r\n  col = cos(col * cos(vec3(d, a, 2.5)) * 0.5 + 0.5) * uColor;\r\n  gl_FragColor = vec4(col, 1.0);\r\n}\r\n`;\r\n\r\nexport default function Iridescence({ color = [1, 1, 1], speed = 1.0, amplitude = 0.1, mouseReact = true, ...rest }) {\r\n  const ctnDom = useRef(null);\r\n  const mousePos = useRef({ x: 0.5, y: 0.5 });\r\n\r\n  useEffect(() => {\r\n    if (!ctnDom.current) return;\r\n    const ctn = ctnDom.current;\r\n    const renderer = new Renderer();\r\n    const gl = renderer.gl;\r\n    gl.clearColor(1, 1, 1, 1);\r\n\r\n    let program;\r\n\r\n    function resize() {\r\n      const scale = 1;\r\n      renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\r\n      if (program) {\r\n        program.uniforms.uResolution.value = new Color(\r\n          gl.canvas.width,\r\n          gl.canvas.height,\r\n          gl.canvas.width / gl.canvas.height\r\n        );\r\n      }\r\n    }\r\n    window.addEventListener('resize', resize, false);\r\n    resize();\r\n\r\n    const geometry = new Triangle(gl);\r\n    program = new Program(gl, {\r\n      vertex: vertexShader,\r\n      fragment: fragmentShader,\r\n      uniforms: {\r\n        uTime: { value: 0 },\r\n        uColor: { value: new Color(...color) },\r\n        uResolution: {\r\n          value: new Color(gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height)\r\n        },\r\n        uMouse: { value: new Float32Array([mousePos.current.x, mousePos.current.y]) },\r\n        uAmplitude: { value: amplitude },\r\n        uSpeed: { value: speed }\r\n      }\r\n    });\r\n\r\n    const mesh = new Mesh(gl, { geometry, program });\r\n    let animateId;\r\n\r\n    function update(t) {\r\n      animateId = requestAnimationFrame(update);\r\n      program.uniforms.uTime.value = t * 0.001;\r\n      renderer.render({ scene: mesh });\r\n    }\r\n    animateId = requestAnimationFrame(update);\r\n    ctn.appendChild(gl.canvas);\r\n\r\n    function handleMouseMove(e) {\r\n      const rect = ctn.getBoundingClientRect();\r\n      const x = (e.clientX - rect.left) / rect.width;\r\n      const y = 1.0 - (e.clientY - rect.top) / rect.height;\r\n      mousePos.current = { x, y };\r\n      program.uniforms.uMouse.value[0] = x;\r\n      program.uniforms.uMouse.value[1] = y;\r\n    }\r\n    if (mouseReact) {\r\n      ctn.addEventListener('mousemove', handleMouseMove);\r\n    }\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animateId);\r\n      window.removeEventListener('resize', resize);\r\n      if (mouseReact) {\r\n        ctn.removeEventListener('mousemove', handleMouseMove);\r\n      }\r\n      ctn.removeChild(gl.canvas);\r\n      gl.getExtension('WEBGL_lose_context')?.loseContext();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [color, speed, amplitude, mouseReact]);\r\n\r\n  return <div ref={ctnDom} className=\"iridescence-container\" {...rest} />;\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Backgrounds/Iridescence/Iridescence.css",
      "content": ".iridescence-container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}