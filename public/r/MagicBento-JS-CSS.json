{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "MagicBento-JS-CSS",
  "type": "registry:block",
  "title": "MagicBento",
  "description": "Interactive bento grid tiles expand + animate with various options.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/default/src/content/Components/MagicBento/MagicBento.jsx",
      "content": "import { useRef, useEffect, useCallback, useState } from 'react';\r\nimport { gsap } from 'gsap';\r\nimport './MagicBento.css';\r\n\r\nconst DEFAULT_PARTICLE_COUNT = 12;\r\nconst DEFAULT_SPOTLIGHT_RADIUS = 300;\r\nconst DEFAULT_GLOW_COLOR = '132, 0, 255';\r\nconst MOBILE_BREAKPOINT = 768;\r\n\r\nconst cardData = [\r\n  {\r\n    color: '#060010',\r\n    title: 'Analytics',\r\n    description: 'Track user behavior',\r\n    label: 'Insights'\r\n  },\r\n  {\r\n    color: '#060010',\r\n    title: 'Dashboard',\r\n    description: 'Centralized data view',\r\n    label: 'Overview'\r\n  },\r\n  {\r\n    color: '#060010',\r\n    title: 'Collaboration',\r\n    description: 'Work together seamlessly',\r\n    label: 'Teamwork'\r\n  },\r\n  {\r\n    color: '#060010',\r\n    title: 'Automation',\r\n    description: 'Streamline workflows',\r\n    label: 'Efficiency'\r\n  },\r\n  {\r\n    color: '#060010',\r\n    title: 'Integration',\r\n    description: 'Connect favorite tools',\r\n    label: 'Connectivity'\r\n  },\r\n  {\r\n    color: '#060010',\r\n    title: 'Security',\r\n    description: 'Enterprise-grade protection',\r\n    label: 'Protection'\r\n  }\r\n];\r\n\r\nconst createParticleElement = (x, y, color = DEFAULT_GLOW_COLOR) => {\r\n  const el = document.createElement('div');\r\n  el.className = 'particle';\r\n  el.style.cssText = `\r\n    position: absolute;\r\n    width: 4px;\r\n    height: 4px;\r\n    border-radius: 50%;\r\n    background: rgba(${color}, 1);\r\n    box-shadow: 0 0 6px rgba(${color}, 0.6);\r\n    pointer-events: none;\r\n    z-index: 100;\r\n    left: ${x}px;\r\n    top: ${y}px;\r\n  `;\r\n  return el;\r\n};\r\n\r\nconst calculateSpotlightValues = radius => ({\r\n  proximity: radius * 0.5,\r\n  fadeDistance: radius * 0.75\r\n});\r\n\r\nconst updateCardGlowProperties = (card, mouseX, mouseY, glow, radius) => {\r\n  const rect = card.getBoundingClientRect();\r\n  const relativeX = ((mouseX - rect.left) / rect.width) * 100;\r\n  const relativeY = ((mouseY - rect.top) / rect.height) * 100;\r\n\r\n  card.style.setProperty('--glow-x', `${relativeX}%`);\r\n  card.style.setProperty('--glow-y', `${relativeY}%`);\r\n  card.style.setProperty('--glow-intensity', glow.toString());\r\n  card.style.setProperty('--glow-radius', `${radius}px`);\r\n};\r\n\r\nconst ParticleCard = ({\r\n  children,\r\n  className = '',\r\n  disableAnimations = false,\r\n  style,\r\n  particleCount = DEFAULT_PARTICLE_COUNT,\r\n  glowColor = DEFAULT_GLOW_COLOR,\r\n  enableTilt = true,\r\n  clickEffect = false,\r\n  enableMagnetism = false\r\n}) => {\r\n  const cardRef = useRef(null);\r\n  const particlesRef = useRef([]);\r\n  const timeoutsRef = useRef([]);\r\n  const isHoveredRef = useRef(false);\r\n  const memoizedParticles = useRef([]);\r\n  const particlesInitialized = useRef(false);\r\n  const magnetismAnimationRef = useRef(null);\r\n\r\n  const initializeParticles = useCallback(() => {\r\n    if (particlesInitialized.current || !cardRef.current) return;\r\n\r\n    const { width, height } = cardRef.current.getBoundingClientRect();\r\n    memoizedParticles.current = Array.from({ length: particleCount }, () =>\r\n      createParticleElement(Math.random() * width, Math.random() * height, glowColor)\r\n    );\r\n    particlesInitialized.current = true;\r\n  }, [particleCount, glowColor]);\r\n\r\n  const clearAllParticles = useCallback(() => {\r\n    timeoutsRef.current.forEach(clearTimeout);\r\n    timeoutsRef.current = [];\r\n    magnetismAnimationRef.current?.kill();\r\n\r\n    particlesRef.current.forEach(particle => {\r\n      gsap.to(particle, {\r\n        scale: 0,\r\n        opacity: 0,\r\n        duration: 0.3,\r\n        ease: 'back.in(1.7)',\r\n        onComplete: () => {\r\n          particle.parentNode?.removeChild(particle);\r\n        }\r\n      });\r\n    });\r\n    particlesRef.current = [];\r\n  }, []);\r\n\r\n  const animateParticles = useCallback(() => {\r\n    if (!cardRef.current || !isHoveredRef.current) return;\r\n\r\n    if (!particlesInitialized.current) {\r\n      initializeParticles();\r\n    }\r\n\r\n    memoizedParticles.current.forEach((particle, index) => {\r\n      const timeoutId = setTimeout(() => {\r\n        if (!isHoveredRef.current || !cardRef.current) return;\r\n\r\n        const clone = particle.cloneNode(true);\r\n        cardRef.current.appendChild(clone);\r\n        particlesRef.current.push(clone);\r\n\r\n        gsap.fromTo(clone, { scale: 0, opacity: 0 }, { scale: 1, opacity: 1, duration: 0.3, ease: 'back.out(1.7)' });\r\n\r\n        gsap.to(clone, {\r\n          x: (Math.random() - 0.5) * 100,\r\n          y: (Math.random() - 0.5) * 100,\r\n          rotation: Math.random() * 360,\r\n          duration: 2 + Math.random() * 2,\r\n          ease: 'none',\r\n          repeat: -1,\r\n          yoyo: true\r\n        });\r\n\r\n        gsap.to(clone, {\r\n          opacity: 0.3,\r\n          duration: 1.5,\r\n          ease: 'power2.inOut',\r\n          repeat: -1,\r\n          yoyo: true\r\n        });\r\n      }, index * 100);\r\n\r\n      timeoutsRef.current.push(timeoutId);\r\n    });\r\n  }, [initializeParticles]);\r\n\r\n  useEffect(() => {\r\n    if (disableAnimations || !cardRef.current) return;\r\n\r\n    const element = cardRef.current;\r\n\r\n    const handleMouseEnter = () => {\r\n      isHoveredRef.current = true;\r\n      animateParticles();\r\n\r\n      if (enableTilt) {\r\n        gsap.to(element, {\r\n          rotateX: 5,\r\n          rotateY: 5,\r\n          duration: 0.3,\r\n          ease: 'power2.out',\r\n          transformPerspective: 1000\r\n        });\r\n      }\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n      isHoveredRef.current = false;\r\n      clearAllParticles();\r\n\r\n      if (enableTilt) {\r\n        gsap.to(element, {\r\n          rotateX: 0,\r\n          rotateY: 0,\r\n          duration: 0.3,\r\n          ease: 'power2.out'\r\n        });\r\n      }\r\n\r\n      if (enableMagnetism) {\r\n        gsap.to(element, {\r\n          x: 0,\r\n          y: 0,\r\n          duration: 0.3,\r\n          ease: 'power2.out'\r\n        });\r\n      }\r\n    };\r\n\r\n    const handleMouseMove = e => {\r\n      if (!enableTilt && !enableMagnetism) return;\r\n\r\n      const rect = element.getBoundingClientRect();\r\n      const x = e.clientX - rect.left;\r\n      const y = e.clientY - rect.top;\r\n      const centerX = rect.width / 2;\r\n      const centerY = rect.height / 2;\r\n\r\n      if (enableTilt) {\r\n        const rotateX = ((y - centerY) / centerY) * -10;\r\n        const rotateY = ((x - centerX) / centerX) * 10;\r\n\r\n        gsap.to(element, {\r\n          rotateX,\r\n          rotateY,\r\n          duration: 0.1,\r\n          ease: 'power2.out',\r\n          transformPerspective: 1000\r\n        });\r\n      }\r\n\r\n      if (enableMagnetism) {\r\n        const magnetX = (x - centerX) * 0.05;\r\n        const magnetY = (y - centerY) * 0.05;\r\n\r\n        magnetismAnimationRef.current = gsap.to(element, {\r\n          x: magnetX,\r\n          y: magnetY,\r\n          duration: 0.3,\r\n          ease: 'power2.out'\r\n        });\r\n      }\r\n    };\r\n\r\n    const handleClick = e => {\r\n      if (!clickEffect) return;\r\n\r\n      const rect = element.getBoundingClientRect();\r\n      const x = e.clientX - rect.left;\r\n      const y = e.clientY - rect.top;\r\n\r\n      const maxDistance = Math.max(\r\n        Math.hypot(x, y),\r\n        Math.hypot(x - rect.width, y),\r\n        Math.hypot(x, y - rect.height),\r\n        Math.hypot(x - rect.width, y - rect.height)\r\n      );\r\n\r\n      const ripple = document.createElement('div');\r\n      ripple.style.cssText = `\r\n        position: absolute;\r\n        width: ${maxDistance * 2}px;\r\n        height: ${maxDistance * 2}px;\r\n        border-radius: 50%;\r\n        background: radial-gradient(circle, rgba(${glowColor}, 0.4) 0%, rgba(${glowColor}, 0.2) 30%, transparent 70%);\r\n        left: ${x - maxDistance}px;\r\n        top: ${y - maxDistance}px;\r\n        pointer-events: none;\r\n        z-index: 1000;\r\n      `;\r\n\r\n      element.appendChild(ripple);\r\n\r\n      gsap.fromTo(\r\n        ripple,\r\n        {\r\n          scale: 0,\r\n          opacity: 1\r\n        },\r\n        {\r\n          scale: 1,\r\n          opacity: 0,\r\n          duration: 0.8,\r\n          ease: 'power2.out',\r\n          onComplete: () => ripple.remove()\r\n        }\r\n      );\r\n    };\r\n\r\n    element.addEventListener('mouseenter', handleMouseEnter);\r\n    element.addEventListener('mouseleave', handleMouseLeave);\r\n    element.addEventListener('mousemove', handleMouseMove);\r\n    element.addEventListener('click', handleClick);\r\n\r\n    return () => {\r\n      isHoveredRef.current = false;\r\n      element.removeEventListener('mouseenter', handleMouseEnter);\r\n      element.removeEventListener('mouseleave', handleMouseLeave);\r\n      element.removeEventListener('mousemove', handleMouseMove);\r\n      element.removeEventListener('click', handleClick);\r\n      clearAllParticles();\r\n    };\r\n  }, [animateParticles, clearAllParticles, disableAnimations, enableTilt, enableMagnetism, clickEffect, glowColor]);\r\n\r\n  return (\r\n    <div\r\n      ref={cardRef}\r\n      className={`${className} particle-container`}\r\n      style={{ ...style, position: 'relative', overflow: 'hidden' }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GlobalSpotlight = ({\r\n  gridRef,\r\n  disableAnimations = false,\r\n  enabled = true,\r\n  spotlightRadius = DEFAULT_SPOTLIGHT_RADIUS,\r\n  glowColor = DEFAULT_GLOW_COLOR\r\n}) => {\r\n  const spotlightRef = useRef(null);\r\n  const isInsideSection = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (disableAnimations || !gridRef?.current || !enabled) return;\r\n\r\n    const spotlight = document.createElement('div');\r\n    spotlight.className = 'global-spotlight';\r\n    spotlight.style.cssText = `\r\n      position: fixed;\r\n      width: 800px;\r\n      height: 800px;\r\n      border-radius: 50%;\r\n      pointer-events: none;\r\n      background: radial-gradient(circle,\r\n        rgba(${glowColor}, 0.15) 0%,\r\n        rgba(${glowColor}, 0.08) 15%,\r\n        rgba(${glowColor}, 0.04) 25%,\r\n        rgba(${glowColor}, 0.02) 40%,\r\n        rgba(${glowColor}, 0.01) 65%,\r\n        transparent 70%\r\n      );\r\n      z-index: 200;\r\n      opacity: 0;\r\n      transform: translate(-50%, -50%);\r\n      mix-blend-mode: screen;\r\n    `;\r\n    document.body.appendChild(spotlight);\r\n    spotlightRef.current = spotlight;\r\n\r\n    const handleMouseMove = e => {\r\n      if (!spotlightRef.current || !gridRef.current) return;\r\n\r\n      const section = gridRef.current.closest('.bento-section');\r\n      const rect = section?.getBoundingClientRect();\r\n      const mouseInside =\r\n        rect && e.clientX >= rect.left && e.clientX <= rect.right && e.clientY >= rect.top && e.clientY <= rect.bottom;\r\n\r\n      isInsideSection.current = mouseInside || false;\r\n      const cards = gridRef.current.querySelectorAll('.card');\r\n\r\n      if (!mouseInside) {\r\n        gsap.to(spotlightRef.current, {\r\n          opacity: 0,\r\n          duration: 0.3,\r\n          ease: 'power2.out'\r\n        });\r\n        cards.forEach(card => {\r\n          card.style.setProperty('--glow-intensity', '0');\r\n        });\r\n        return;\r\n      }\r\n\r\n      const { proximity, fadeDistance } = calculateSpotlightValues(spotlightRadius);\r\n      let minDistance = Infinity;\r\n\r\n      cards.forEach(card => {\r\n        const cardElement = card;\r\n        const cardRect = cardElement.getBoundingClientRect();\r\n        const centerX = cardRect.left + cardRect.width / 2;\r\n        const centerY = cardRect.top + cardRect.height / 2;\r\n        const distance =\r\n          Math.hypot(e.clientX - centerX, e.clientY - centerY) - Math.max(cardRect.width, cardRect.height) / 2;\r\n        const effectiveDistance = Math.max(0, distance);\r\n\r\n        minDistance = Math.min(minDistance, effectiveDistance);\r\n\r\n        let glowIntensity = 0;\r\n        if (effectiveDistance <= proximity) {\r\n          glowIntensity = 1;\r\n        } else if (effectiveDistance <= fadeDistance) {\r\n          glowIntensity = (fadeDistance - effectiveDistance) / (fadeDistance - proximity);\r\n        }\r\n\r\n        updateCardGlowProperties(cardElement, e.clientX, e.clientY, glowIntensity, spotlightRadius);\r\n      });\r\n\r\n      gsap.to(spotlightRef.current, {\r\n        left: e.clientX,\r\n        top: e.clientY,\r\n        duration: 0.1,\r\n        ease: 'power2.out'\r\n      });\r\n\r\n      const targetOpacity =\r\n        minDistance <= proximity\r\n          ? 0.8\r\n          : minDistance <= fadeDistance\r\n            ? ((fadeDistance - minDistance) / (fadeDistance - proximity)) * 0.8\r\n            : 0;\r\n\r\n      gsap.to(spotlightRef.current, {\r\n        opacity: targetOpacity,\r\n        duration: targetOpacity > 0 ? 0.2 : 0.5,\r\n        ease: 'power2.out'\r\n      });\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n      isInsideSection.current = false;\r\n      gridRef.current?.querySelectorAll('.card').forEach(card => {\r\n        card.style.setProperty('--glow-intensity', '0');\r\n      });\r\n      if (spotlightRef.current) {\r\n        gsap.to(spotlightRef.current, {\r\n          opacity: 0,\r\n          duration: 0.3,\r\n          ease: 'power2.out'\r\n        });\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('mouseleave', handleMouseLeave);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousemove', handleMouseMove);\r\n      document.removeEventListener('mouseleave', handleMouseLeave);\r\n      spotlightRef.current?.parentNode?.removeChild(spotlightRef.current);\r\n    };\r\n  }, [gridRef, disableAnimations, enabled, spotlightRadius, glowColor]);\r\n\r\n  return null;\r\n};\r\n\r\nconst BentoCardGrid = ({ children, gridRef }) => (\r\n  <div className=\"card-grid bento-section\" ref={gridRef}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nconst useMobileDetection = () => {\r\n  const [isMobile, setIsMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkMobile = () => setIsMobile(window.innerWidth <= MOBILE_BREAKPOINT);\r\n\r\n    checkMobile();\r\n    window.addEventListener('resize', checkMobile);\r\n\r\n    return () => window.removeEventListener('resize', checkMobile);\r\n  }, []);\r\n\r\n  return isMobile;\r\n};\r\n\r\nconst MagicBento = ({\r\n  textAutoHide = true,\r\n  enableStars = true,\r\n  enableSpotlight = true,\r\n  enableBorderGlow = true,\r\n  disableAnimations = false,\r\n  spotlightRadius = DEFAULT_SPOTLIGHT_RADIUS,\r\n  particleCount = DEFAULT_PARTICLE_COUNT,\r\n  enableTilt = false,\r\n  glowColor = DEFAULT_GLOW_COLOR,\r\n  clickEffect = true,\r\n  enableMagnetism = true\r\n}) => {\r\n  const gridRef = useRef(null);\r\n  const isMobile = useMobileDetection();\r\n  const shouldDisableAnimations = disableAnimations || isMobile;\r\n\r\n  return (\r\n    <>\r\n      {enableSpotlight && (\r\n        <GlobalSpotlight\r\n          gridRef={gridRef}\r\n          disableAnimations={shouldDisableAnimations}\r\n          enabled={enableSpotlight}\r\n          spotlightRadius={spotlightRadius}\r\n          glowColor={glowColor}\r\n        />\r\n      )}\r\n\r\n      <BentoCardGrid gridRef={gridRef}>\r\n        {cardData.map((card, index) => {\r\n          const baseClassName = `card ${textAutoHide ? 'card--text-autohide' : ''} ${enableBorderGlow ? 'card--border-glow' : ''}`;\r\n          const cardProps = {\r\n            className: baseClassName,\r\n            style: {\r\n              backgroundColor: card.color,\r\n              '--glow-color': glowColor\r\n            }\r\n          };\r\n\r\n          if (enableStars) {\r\n            return (\r\n              <ParticleCard\r\n                key={index}\r\n                {...cardProps}\r\n                disableAnimations={shouldDisableAnimations}\r\n                particleCount={particleCount}\r\n                glowColor={glowColor}\r\n                enableTilt={enableTilt}\r\n                clickEffect={clickEffect}\r\n                enableMagnetism={enableMagnetism}\r\n              >\r\n                <div className=\"card__header\">\r\n                  <div className=\"card__label\">{card.label}</div>\r\n                </div>\r\n                <div className=\"card__content\">\r\n                  <h2 className=\"card__title\">{card.title}</h2>\r\n                  <p className=\"card__description\">{card.description}</p>\r\n                </div>\r\n              </ParticleCard>\r\n            );\r\n          }\r\n\r\n          return (\r\n            <div\r\n              key={index}\r\n              {...cardProps}\r\n              ref={el => {\r\n                if (!el) return;\r\n\r\n                const handleMouseMove = e => {\r\n                  if (shouldDisableAnimations) return;\r\n\r\n                  const rect = el.getBoundingClientRect();\r\n                  const x = e.clientX - rect.left;\r\n                  const y = e.clientY - rect.top;\r\n                  const centerX = rect.width / 2;\r\n                  const centerY = rect.height / 2;\r\n\r\n                  if (enableTilt) {\r\n                    const rotateX = ((y - centerY) / centerY) * -10;\r\n                    const rotateY = ((x - centerX) / centerX) * 10;\r\n                    gsap.to(el, {\r\n                      rotateX,\r\n                      rotateY,\r\n                      duration: 0.1,\r\n                      ease: 'power2.out',\r\n                      transformPerspective: 1000\r\n                    });\r\n                  }\r\n\r\n                  if (enableMagnetism) {\r\n                    const magnetX = (x - centerX) * 0.05;\r\n                    const magnetY = (y - centerY) * 0.05;\r\n                    gsap.to(el, {\r\n                      x: magnetX,\r\n                      y: magnetY,\r\n                      duration: 0.3,\r\n                      ease: 'power2.out'\r\n                    });\r\n                  }\r\n                };\r\n\r\n                const handleMouseLeave = () => {\r\n                  if (shouldDisableAnimations) return;\r\n\r\n                  if (enableTilt) {\r\n                    gsap.to(el, {\r\n                      rotateX: 0,\r\n                      rotateY: 0,\r\n                      duration: 0.3,\r\n                      ease: 'power2.out'\r\n                    });\r\n                  }\r\n\r\n                  if (enableMagnetism) {\r\n                    gsap.to(el, {\r\n                      x: 0,\r\n                      y: 0,\r\n                      duration: 0.3,\r\n                      ease: 'power2.out'\r\n                    });\r\n                  }\r\n                };\r\n\r\n                const handleClick = e => {\r\n                  if (!clickEffect || shouldDisableAnimations) return;\r\n\r\n                  const rect = el.getBoundingClientRect();\r\n                  const x = e.clientX - rect.left;\r\n                  const y = e.clientY - rect.top;\r\n\r\n                  const maxDistance = Math.max(\r\n                    Math.hypot(x, y),\r\n                    Math.hypot(x - rect.width, y),\r\n                    Math.hypot(x, y - rect.height),\r\n                    Math.hypot(x - rect.width, y - rect.height)\r\n                  );\r\n\r\n                  const ripple = document.createElement('div');\r\n                  ripple.style.cssText = `\r\n                    position: absolute;\r\n                    width: ${maxDistance * 2}px;\r\n                    height: ${maxDistance * 2}px;\r\n                    border-radius: 50%;\r\n                    background: radial-gradient(circle, rgba(${glowColor}, 0.4) 0%, rgba(${glowColor}, 0.2) 30%, transparent 70%);\r\n                    left: ${x - maxDistance}px;\r\n                    top: ${y - maxDistance}px;\r\n                    pointer-events: none;\r\n                    z-index: 1000;\r\n                  `;\r\n\r\n                  el.appendChild(ripple);\r\n\r\n                  gsap.fromTo(\r\n                    ripple,\r\n                    {\r\n                      scale: 0,\r\n                      opacity: 1\r\n                    },\r\n                    {\r\n                      scale: 1,\r\n                      opacity: 0,\r\n                      duration: 0.8,\r\n                      ease: 'power2.out',\r\n                      onComplete: () => ripple.remove()\r\n                    }\r\n                  );\r\n                };\r\n\r\n                el.addEventListener('mousemove', handleMouseMove);\r\n                el.addEventListener('mouseleave', handleMouseLeave);\r\n                el.addEventListener('click', handleClick);\r\n              }}\r\n            >\r\n              <div className=\"card__header\">\r\n                <div className=\"card__label\">{card.label}</div>\r\n              </div>\r\n              <div className=\"card__content\">\r\n                <h2 className=\"card__title\">{card.title}</h2>\r\n                <p className=\"card__description\">{card.description}</p>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </BentoCardGrid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MagicBento;\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Components/MagicBento/MagicBento.css",
      "content": ":root {\r\n  --hue: 27;\r\n  --sat: 69%;\r\n  --white: hsl(0, 0%, 100%);\r\n  --purple-primary: rgba(132, 0, 255, 1);\r\n  --purple-glow: rgba(132, 0, 255, 0.2);\r\n  --purple-border: rgba(132, 0, 255, 0.8);\r\n  --border-color: #392e4e;\r\n  --background-dark: #060010;\r\n  color-scheme: light dark;\r\n}\r\n\r\n.card-grid {\r\n  display: grid;\r\n  gap: 0.5em;\r\n  padding: 0.75em;\r\n  max-width: 54em;\r\n  font-size: clamp(1rem, 0.9rem + 0.5vw, 1.5rem);\r\n}\r\n\r\n.card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  position: relative;\r\n  aspect-ratio: 4/3;\r\n  min-height: 200px;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  padding: 1.25em;\r\n  border-radius: 20px;\r\n  border: 1px solid var(--border-color);\r\n  background: var(--background-dark);\r\n  font-weight: 300;\r\n  overflow: hidden;\r\n  transition: all 0.3s ease;\r\n\r\n  --glow-x: 50%;\r\n  --glow-y: 50%;\r\n  --glow-intensity: 0;\r\n  --glow-radius: 200px;\r\n}\r\n\r\n.card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.card__header,\r\n.card__content {\r\n  display: flex;\r\n  position: relative;\r\n  color: var(--white);\r\n}\r\n\r\n.card__header {\r\n  gap: 0.75em;\r\n  justify-content: space-between;\r\n}\r\n\r\n.card__content {\r\n  flex-direction: column;\r\n}\r\n\r\n.card__label {\r\n  font-size: 16px;\r\n}\r\n\r\n.card__title,\r\n.card__description {\r\n  --clamp-title: 1;\r\n  --clamp-desc: 2;\r\n}\r\n\r\n.card__title {\r\n  font-weight: 400;\r\n  font-size: 16px;\r\n  margin: 0 0 0.25em;\r\n}\r\n\r\n.card__description {\r\n  font-size: 12px;\r\n  line-height: 1.2;\r\n  opacity: 0.9;\r\n}\r\n\r\n.card--text-autohide .card__title,\r\n.card--text-autohide .card__description {\r\n  display: -webkit-box;\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.card--text-autohide .card__title {\r\n  -webkit-line-clamp: var(--clamp-title);\r\n  line-clamp: var(--clamp-title);\r\n}\r\n\r\n.card--text-autohide .card__description {\r\n  -webkit-line-clamp: var(--clamp-desc);\r\n  line-clamp: var(--clamp-desc);\r\n}\r\n\r\n@media (max-width: 599px) {\r\n  .card-grid {\r\n    grid-template-columns: 1fr;\r\n    width: 90%;\r\n    margin: 0 auto;\r\n    padding: 0.5em;\r\n  }\r\n\r\n  .card {\r\n    width: 100%;\r\n    min-height: 180px;\r\n  }\r\n}\r\n\r\n@media (min-width: 600px) {\r\n  .card-grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n}\r\n\r\n@media (min-width: 1024px) {\r\n  .card-grid {\r\n    grid-template-columns: repeat(4, 1fr);\r\n  }\r\n\r\n  .card:nth-child(3) {\r\n    grid-column: span 2;\r\n    grid-row: span 2;\r\n  }\r\n\r\n  .card:nth-child(4) {\r\n    grid-column: 1 / span 2;\r\n    grid-row: 2 / span 2;\r\n  }\r\n\r\n  .card:nth-child(6) {\r\n    grid-column: 4;\r\n    grid-row: 3;\r\n  }\r\n}\r\n\r\n/* Border glow effect */\r\n.card--border-glow::after {\r\n  content: '';\r\n  position: absolute;\r\n  inset: 0;\r\n  padding: 6px;\r\n  background: radial-gradient(\r\n    var(--glow-radius) circle at var(--glow-x) var(--glow-y),\r\n    rgba(132, 0, 255, calc(var(--glow-intensity) * 0.8)) 0%,\r\n    rgba(132, 0, 255, calc(var(--glow-intensity) * 0.4)) 30%,\r\n    transparent 60%\r\n  );\r\n  border-radius: inherit;\r\n  mask:\r\n    linear-gradient(#fff 0 0) content-box,\r\n    linear-gradient(#fff 0 0);\r\n  mask-composite: subtract;\r\n  -webkit-mask:\r\n    linear-gradient(#fff 0 0) content-box,\r\n    linear-gradient(#fff 0 0);\r\n  -webkit-mask-composite: xor;\r\n  pointer-events: none;\r\n  transition: opacity 0.3s ease;\r\n  z-index: 1;\r\n}\r\n\r\n.card--border-glow:hover::after {\r\n  opacity: 1;\r\n}\r\n\r\n.card--border-glow:hover {\r\n  box-shadow:\r\n    0 4px 20px rgba(46, 24, 78, 0.4),\r\n    0 0 30px var(--purple-glow);\r\n}\r\n\r\n.particle-container {\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.particle::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: -2px;\r\n  left: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  background: rgba(132, 0, 255, 0.2);\r\n  border-radius: 50%;\r\n  z-index: -1;\r\n}\r\n\r\n.particle-container:hover {\r\n  box-shadow:\r\n    0 4px 20px rgba(46, 24, 78, 0.2),\r\n    0 0 30px var(--purple-glow);\r\n}\r\n\r\n/* Global spotlight styles */\r\n.global-spotlight {\r\n  mix-blend-mode: screen;\r\n  will-change: transform, opacity;\r\n  z-index: 200 !important;\r\n  pointer-events: none;\r\n}\r\n\r\n.bento-section {\r\n  position: relative;\r\n  user-select: none;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}