{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "StaggeredMenu-TS-CSS",
  "type": "registry:block",
  "title": "StaggeredMenu",
  "description": "Menu with staggered item animations and smooth transitions on open/close.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/ts/default/src/ts-default/Components/StaggeredMenu/StaggeredMenu.tsx",
      "content": "import React, { useCallback, useLayoutEffect, useRef, useState } from 'react';\r\nimport { gsap } from 'gsap';\r\nimport './StaggeredMenu.css';\r\n\r\nexport interface StaggeredMenuItem {\r\n  label: string;\r\n  ariaLabel: string;\r\n  link: string;\r\n}\r\n\r\nexport interface StaggeredMenuSocialItem {\r\n  label: string;\r\n  link: string;\r\n}\r\n\r\nexport interface StaggeredMenuProps {\r\n  position?: 'left' | 'right';\r\n  colors?: string[];\r\n  items?: StaggeredMenuItem[];\r\n  socialItems?: StaggeredMenuSocialItem[];\r\n  displaySocials?: boolean;\r\n  displayItemNumbering?: boolean;\r\n  className?: string;\r\n  logoUrl?: string;\r\n  menuButtonColor?: string;\r\n  openMenuButtonColor?: string;\r\n  accentColor?: string;\r\n  changeMenuColorOnOpen?: boolean;\r\n  onMenuOpen?: () => void;\r\n  onMenuClose?: () => void;\r\n}\r\n\r\nexport const StaggeredMenu: React.FC<StaggeredMenuProps> = ({\r\n  position = 'right',\r\n  colors = ['#B19EEF', '#5227FF'],\r\n  items = [],\r\n  socialItems = [],\r\n  displaySocials = true,\r\n  displayItemNumbering = true,\r\n  className,\r\n  logoUrl = '/src/assets/logos/reactbits-gh-white.svg',\r\n  menuButtonColor = '#fff',\r\n  openMenuButtonColor = '#fff',\r\n  changeMenuColorOnOpen = true,\r\n  accentColor = '#5227FF',\r\n  onMenuOpen,\r\n  onMenuClose\r\n}: StaggeredMenuProps) => {\r\n  const [open, setOpen] = useState(false);\r\n  const openRef = useRef(false);\r\n  const panelRef = useRef<HTMLDivElement | null>(null);\r\n  const preLayersRef = useRef<HTMLDivElement | null>(null);\r\n  const preLayerElsRef = useRef<HTMLElement[]>([]);\r\n  const plusHRef = useRef<HTMLSpanElement | null>(null);\r\n  const plusVRef = useRef<HTMLSpanElement | null>(null);\r\n  const iconRef = useRef<HTMLSpanElement | null>(null);\r\n  const textInnerRef = useRef<HTMLSpanElement | null>(null);\r\n  const textWrapRef = useRef<HTMLSpanElement | null>(null);\r\n  const [textLines, setTextLines] = useState<string[]>(['Menu', 'Close']);\r\n\r\n  const openTlRef = useRef<gsap.core.Timeline | null>(null);\r\n  const closeTweenRef = useRef<gsap.core.Tween | null>(null);\r\n  const spinTweenRef = useRef<gsap.core.Tween | null>(null);\r\n  const textCycleAnimRef = useRef<gsap.core.Tween | null>(null);\r\n  const colorTweenRef = useRef<gsap.core.Tween | null>(null);\r\n  const toggleBtnRef = useRef<HTMLButtonElement | null>(null);\r\n  const busyRef = useRef(false);\r\n  const itemEntranceTweenRef = useRef<gsap.core.Tween | null>(null);\r\n\r\n  useLayoutEffect(() => {\r\n    const ctx = gsap.context(() => {\r\n      const panel = panelRef.current;\r\n      const preContainer = preLayersRef.current;\r\n      const plusH = plusHRef.current;\r\n      const plusV = plusVRef.current;\r\n      const icon = iconRef.current;\r\n      const textInner = textInnerRef.current;\r\n      if (!panel || !plusH || !plusV || !icon || !textInner) return;\r\n\r\n      let preLayers: HTMLElement[] = [];\r\n      if (preContainer) {\r\n        preLayers = Array.from(preContainer.querySelectorAll('.sm-prelayer')) as HTMLElement[];\r\n      }\r\n      preLayerElsRef.current = preLayers;\r\n\r\n      const offscreen = position === 'left' ? -100 : 100;\r\n      gsap.set([panel, ...preLayers], { xPercent: offscreen });\r\n      gsap.set(plusH, { transformOrigin: '50% 50%', rotate: 0 });\r\n      gsap.set(plusV, { transformOrigin: '50% 50%', rotate: 90 });\r\n      gsap.set(icon, { rotate: 0, transformOrigin: '50% 50%' });\r\n      gsap.set(textInner, { yPercent: 0 });\r\n      if (toggleBtnRef.current) gsap.set(toggleBtnRef.current, { color: menuButtonColor });\r\n    });\r\n    return () => ctx.revert();\r\n  }, [menuButtonColor, position]);\r\n\r\n  const buildOpenTimeline = useCallback(() => {\r\n    const panel = panelRef.current;\r\n    const layers = preLayerElsRef.current;\r\n    if (!panel) return null;\r\n\r\n    openTlRef.current?.kill();\r\n    if (closeTweenRef.current) {\r\n      closeTweenRef.current.kill();\r\n      closeTweenRef.current = null;\r\n    }\r\n    itemEntranceTweenRef.current?.kill();\r\n\r\n    const itemEls = Array.from(panel.querySelectorAll('.sm-panel-itemLabel')) as HTMLElement[];\r\n    const numberEls = Array.from(\r\n      panel.querySelectorAll('.sm-panel-list[data-numbering] .sm-panel-item')\r\n    ) as HTMLElement[];\r\n    const socialTitle = panel.querySelector('.sm-socials-title') as HTMLElement | null;\r\n    const socialLinks = Array.from(panel.querySelectorAll('.sm-socials-link')) as HTMLElement[];\r\n\r\n    const layerStates = layers.map(el => ({ el, start: Number(gsap.getProperty(el, 'xPercent')) }));\r\n    const panelStart = Number(gsap.getProperty(panel, 'xPercent'));\r\n\r\n    if (itemEls.length) {\r\n      gsap.set(itemEls, { yPercent: 140, rotate: 10 });\r\n    }\r\n    if (numberEls.length) {\r\n      gsap.set(numberEls, { '--sm-num-opacity': 0 });\r\n    }\r\n    if (socialTitle) {\r\n      gsap.set(socialTitle, { opacity: 0 });\r\n    }\r\n    if (socialLinks.length) {\r\n      gsap.set(socialLinks, { y: 25, opacity: 0 });\r\n    }\r\n\r\n    const tl = gsap.timeline({ paused: true });\r\n\r\n    layerStates.forEach((ls, i) => {\r\n      tl.fromTo(ls.el, { xPercent: ls.start }, { xPercent: 0, duration: 0.5, ease: 'power4.out' }, i * 0.07);\r\n    });\r\n    const lastTime = layerStates.length ? (layerStates.length - 1) * 0.07 : 0;\r\n    const panelInsertTime = lastTime + (layerStates.length ? 0.08 : 0);\r\n    const panelDuration = 0.65;\r\n    tl.fromTo(\r\n      panel,\r\n      { xPercent: panelStart },\r\n      { xPercent: 0, duration: panelDuration, ease: 'power4.out' },\r\n      panelInsertTime\r\n    );\r\n\r\n    if (itemEls.length) {\r\n      const itemsStartRatio = 0.15;\r\n      const itemsStart = panelInsertTime + panelDuration * itemsStartRatio;\r\n      tl.to(\r\n        itemEls,\r\n        {\r\n          yPercent: 0,\r\n          rotate: 0,\r\n          duration: 1,\r\n          ease: 'power4.out',\r\n          stagger: { each: 0.1, from: 'start' }\r\n        },\r\n        itemsStart\r\n      );\r\n      if (numberEls.length) {\r\n        tl.to(\r\n          numberEls,\r\n          {\r\n            duration: 0.6,\r\n            ease: 'power2.out',\r\n            '--sm-num-opacity': 1,\r\n            stagger: { each: 0.08, from: 'start' }\r\n          },\r\n          itemsStart + 0.1\r\n        );\r\n      }\r\n    }\r\n\r\n    if (socialTitle || socialLinks.length) {\r\n      const socialsStart = panelInsertTime + panelDuration * 0.4;\r\n      if (socialTitle) {\r\n        tl.to(\r\n          socialTitle,\r\n          {\r\n            opacity: 1,\r\n            duration: 0.5,\r\n            ease: 'power2.out'\r\n          },\r\n          socialsStart\r\n        );\r\n      }\r\n      if (socialLinks.length) {\r\n        tl.to(\r\n          socialLinks,\r\n          {\r\n            y: 0,\r\n            opacity: 1,\r\n            duration: 0.55,\r\n            ease: 'power3.out',\r\n            stagger: { each: 0.08, from: 'start' },\r\n            onComplete: () => {\r\n              gsap.set(socialLinks, { clearProps: 'opacity' });\r\n            }\r\n          },\r\n          socialsStart + 0.04\r\n        );\r\n      }\r\n    }\r\n\r\n    openTlRef.current = tl;\r\n    return tl;\r\n  }, [position]);\r\n\r\n  const playOpen = useCallback(() => {\r\n    if (busyRef.current) return;\r\n    busyRef.current = true;\r\n    const tl = buildOpenTimeline();\r\n    if (tl) {\r\n      tl.eventCallback('onComplete', () => {\r\n        busyRef.current = false;\r\n      });\r\n      tl.play(0);\r\n    } else {\r\n      busyRef.current = false;\r\n    }\r\n  }, [buildOpenTimeline]);\r\n\r\n  const playClose = useCallback(() => {\r\n    openTlRef.current?.kill();\r\n    openTlRef.current = null;\r\n    itemEntranceTweenRef.current?.kill();\r\n\r\n    const panel = panelRef.current;\r\n    const layers = preLayerElsRef.current;\r\n    if (!panel) return;\r\n\r\n    const all: HTMLElement[] = [...layers, panel];\r\n    closeTweenRef.current?.kill();\r\n    const offscreen = position === 'left' ? -100 : 100;\r\n    closeTweenRef.current = gsap.to(all, {\r\n      xPercent: offscreen,\r\n      duration: 0.32,\r\n      ease: 'power3.in',\r\n      overwrite: 'auto',\r\n      onComplete: () => {\r\n        const itemEls = Array.from(panel.querySelectorAll('.sm-panel-itemLabel')) as HTMLElement[];\r\n        if (itemEls.length) {\r\n          gsap.set(itemEls, { yPercent: 140, rotate: 10 });\r\n        }\r\n        const numberEls = Array.from(\r\n          panel.querySelectorAll('.sm-panel-list[data-numbering] .sm-panel-item')\r\n        ) as HTMLElement[];\r\n        if (numberEls.length) {\r\n          gsap.set(numberEls, { '--sm-num-opacity': 0 });\r\n        }\r\n        const socialTitle = panel.querySelector('.sm-socials-title') as HTMLElement | null;\r\n        const socialLinks = Array.from(panel.querySelectorAll('.sm-socials-link')) as HTMLElement[];\r\n        if (socialTitle) gsap.set(socialTitle, { opacity: 0 });\r\n        if (socialLinks.length) gsap.set(socialLinks, { y: 25, opacity: 0 });\r\n        busyRef.current = false;\r\n      }\r\n    });\r\n  }, [position]);\r\n\r\n  const animateIcon = useCallback((opening: boolean) => {\r\n    const icon = iconRef.current;\r\n    if (!icon) return;\r\n    spinTweenRef.current?.kill();\r\n    if (opening) {\r\n      spinTweenRef.current = gsap.to(icon, { rotate: 225, duration: 0.8, ease: 'power4.out', overwrite: 'auto' });\r\n    } else {\r\n      spinTweenRef.current = gsap.to(icon, { rotate: 0, duration: 0.35, ease: 'power3.inOut', overwrite: 'auto' });\r\n    }\r\n  }, []);\r\n\r\n  const animateColor = useCallback(\r\n    (opening: boolean) => {\r\n      const btn = toggleBtnRef.current;\r\n      if (!btn) return;\r\n      colorTweenRef.current?.kill();\r\n      if (changeMenuColorOnOpen) {\r\n        const targetColor = opening ? openMenuButtonColor : menuButtonColor;\r\n        colorTweenRef.current = gsap.to(btn, {\r\n          color: targetColor,\r\n          delay: 0.18,\r\n          duration: 0.3,\r\n          ease: 'power2.out'\r\n        });\r\n      } else {\r\n        gsap.set(btn, { color: menuButtonColor });\r\n      }\r\n    },\r\n    [openMenuButtonColor, menuButtonColor, changeMenuColorOnOpen]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (toggleBtnRef.current) {\r\n      if (changeMenuColorOnOpen) {\r\n        const targetColor = openRef.current ? openMenuButtonColor : menuButtonColor;\r\n        gsap.set(toggleBtnRef.current, { color: targetColor });\r\n      } else {\r\n        gsap.set(toggleBtnRef.current, { color: menuButtonColor });\r\n      }\r\n    }\r\n  }, [changeMenuColorOnOpen, menuButtonColor, openMenuButtonColor]);\r\n\r\n  const animateText = useCallback((opening: boolean) => {\r\n    const inner = textInnerRef.current;\r\n    if (!inner) return;\r\n    textCycleAnimRef.current?.kill();\r\n\r\n    const currentLabel = opening ? 'Menu' : 'Close';\r\n    const targetLabel = opening ? 'Close' : 'Menu';\r\n    const cycles = 3;\r\n    const seq: string[] = [currentLabel];\r\n    let last = currentLabel;\r\n    for (let i = 0; i < cycles; i++) {\r\n      last = last === 'Menu' ? 'Close' : 'Menu';\r\n      seq.push(last);\r\n    }\r\n    if (last !== targetLabel) seq.push(targetLabel);\r\n    seq.push(targetLabel);\r\n    setTextLines(seq);\r\n\r\n    gsap.set(inner, { yPercent: 0 });\r\n    const lineCount = seq.length;\r\n    const finalShift = ((lineCount - 1) / lineCount) * 100;\r\n    textCycleAnimRef.current = gsap.to(inner, {\r\n      yPercent: -finalShift,\r\n      duration: 0.5 + lineCount * 0.07,\r\n      ease: 'power4.out'\r\n    });\r\n  }, []);\r\n\r\n  const toggleMenu = useCallback(() => {\r\n    const target = !openRef.current;\r\n    openRef.current = target;\r\n    setOpen(target);\r\n    if (target) {\r\n      onMenuOpen?.();\r\n      playOpen();\r\n    } else {\r\n      onMenuClose?.();\r\n      playClose();\r\n    }\r\n    animateIcon(target);\r\n    animateColor(target);\r\n    animateText(target);\r\n  }, [playOpen, playClose, animateIcon, animateColor, animateText]);\r\n\r\n  return (\r\n    <div\r\n      className={(className ? className + ' ' : '') + 'staggered-menu-wrapper'}\r\n      style={accentColor ? { ['--sm-accent' as any]: accentColor } : undefined}\r\n      data-position={position}\r\n      data-open={open || undefined}\r\n    >\r\n      <div ref={preLayersRef} className=\"sm-prelayers\" aria-hidden=\"true\">\r\n        {(() => {\r\n          const raw = colors && colors.length ? colors.slice(0, 4) : ['#1e1e22', '#35353c'];\r\n          let arr = [...raw];\r\n          if (arr.length >= 3) {\r\n            const mid = Math.floor(arr.length / 2);\r\n            arr.splice(mid, 1);\r\n          }\r\n          return arr.map((c, i) => <div key={i} className=\"sm-prelayer\" style={{ background: c }} />);\r\n        })()}\r\n      </div>\r\n      <header className=\"staggered-menu-header\" aria-label=\"Main navigation header\">\r\n        <div className=\"sm-logo\" aria-label=\"Logo\">\r\n          <img\r\n            src={logoUrl || '/src/assets/logos/reactbits-gh-white.svg'}\r\n            alt=\"Logo\"\r\n            className=\"sm-logo-img\"\r\n            draggable={false}\r\n            width={110}\r\n            height={24}\r\n          />\r\n        </div>\r\n        <button\r\n          ref={toggleBtnRef}\r\n          className=\"sm-toggle\"\r\n          aria-label={open ? 'Close menu' : 'Open menu'}\r\n          aria-expanded={open}\r\n          aria-controls=\"staggered-menu-panel\"\r\n          onClick={toggleMenu}\r\n          type=\"button\"\r\n        >\r\n          <span ref={textWrapRef} className=\"sm-toggle-textWrap\" aria-hidden=\"true\">\r\n            <span ref={textInnerRef} className=\"sm-toggle-textInner\">\r\n              {textLines.map((l, i) => (\r\n                <span className=\"sm-toggle-line\" key={i}>\r\n                  {l}\r\n                </span>\r\n              ))}\r\n            </span>\r\n          </span>\r\n          <span ref={iconRef} className=\"sm-icon\" aria-hidden=\"true\">\r\n            <span ref={plusHRef} className=\"sm-icon-line\" />\r\n            <span ref={plusVRef} className=\"sm-icon-line sm-icon-line-v\" />\r\n          </span>\r\n        </button>\r\n      </header>\r\n\r\n      <aside id=\"staggered-menu-panel\" ref={panelRef} className=\"staggered-menu-panel\" aria-hidden={!open}>\r\n        <div className=\"sm-panel-inner\">\r\n          <ul className=\"sm-panel-list\" role=\"list\" data-numbering={displayItemNumbering || undefined}>\r\n            {items && items.length ? (\r\n              items.map((it, idx) => (\r\n                <li className=\"sm-panel-itemWrap\" key={it.label + idx}>\r\n                  <a className=\"sm-panel-item\" href={it.link} aria-label={it.ariaLabel} data-index={idx + 1}>\r\n                    <span className=\"sm-panel-itemLabel\">{it.label}</span>\r\n                  </a>\r\n                </li>\r\n              ))\r\n            ) : (\r\n              <li className=\"sm-panel-itemWrap\" aria-hidden=\"true\">\r\n                <span className=\"sm-panel-item\">\r\n                  <span className=\"sm-panel-itemLabel\">No items</span>\r\n                </span>\r\n              </li>\r\n            )}\r\n          </ul>\r\n          {displaySocials && socialItems && socialItems.length > 0 && (\r\n            <div className=\"sm-socials\" aria-label=\"Social links\">\r\n              <h3 className=\"sm-socials-title\">Socials</h3>\r\n              <ul className=\"sm-socials-list\" role=\"list\">\r\n                {socialItems.map((s, i) => (\r\n                  <li key={s.label + i} className=\"sm-socials-item\">\r\n                    <a href={s.link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"sm-socials-link\">\r\n                      {s.label}\r\n                    </a>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </aside>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StaggeredMenu;\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/ts/default/src/ts-default/Components/StaggeredMenu/StaggeredMenu.css",
      "content": ".staggered-menu-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 40;\r\n}\r\n\r\n.staggered-menu-header {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 2em;\r\n  background: transparent;\r\n  pointer-events: none;\r\n  z-index: 20;\r\n}\r\n\r\n.staggered-menu-header > * {\r\n  pointer-events: auto;\r\n}\r\n\r\n.sm-logo {\r\n  display: flex;\r\n  align-items: center;\r\n  user-select: none;\r\n}\r\n\r\n.sm-logo-img {\r\n  display: block;\r\n  height: 32px;\r\n  width: auto;\r\n  object-fit: contain;\r\n}\r\n\r\n.sm-toggle {\r\n  position: relative;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 0.3rem;\r\n  background: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n  color: #e9e9ef;\r\n  font-weight: 500;\r\n  line-height: 1;\r\n  overflow: visible;\r\n}\r\n\r\n.sm-toggle:focus-visible {\r\n  outline: 2px solid #ffffffaa;\r\n  outline-offset: 4px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.sm-line:last-of-type {\r\n  margin-top: 6px;\r\n}\r\n\r\n.sm-toggle-textWrap {\r\n  position: relative;\r\n  display: inline-block;\r\n  height: 1em;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  width: var(--sm-toggle-width, auto);\r\n  min-width: var(--sm-toggle-width, auto);\r\n}\r\n\r\n.sm-toggle-textInner {\r\n  display: flex;\r\n  flex-direction: column;\r\n  line-height: 1;\r\n}\r\n\r\n.sm-toggle-line {\r\n  display: block;\r\n  height: 1em;\r\n  line-height: 1;\r\n}\r\n\r\n.sm-icon {\r\n  position: relative;\r\n  width: 14px;\r\n  height: 14px;\r\n  flex: 0 0 14px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  will-change: transform;\r\n}\r\n\r\n.sm-panel-itemWrap {\r\n  position: relative;\r\n  overflow: hidden;\r\n  line-height: 1;\r\n}\r\n\r\n.sm-icon-line {\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  width: 100%;\r\n  height: 2px;\r\n  background: currentColor;\r\n  border-radius: 2px;\r\n  transform: translate(-50%, -50%);\r\n  will-change: transform;\r\n}\r\n\r\n.sm-line {\r\n  display: none !important;\r\n}\r\n\r\n.staggered-menu-panel {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  width: clamp(260px, 38vw, 420px);\r\n  height: 100%;\r\n  background: white;\r\n  backdrop-filter: blur(12px);\r\n  -webkit-backdrop-filter: blur(12px);\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 6em 2em 2em 2em;\r\n  overflow-y: auto;\r\n  z-index: 10;\r\n}\r\n\r\n[data-position='left'] .staggered-menu-panel {\r\n  right: auto;\r\n  left: 0;\r\n}\r\n\r\n.sm-prelayers {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  width: clamp(260px, 38vw, 420px);\r\n  pointer-events: none;\r\n  z-index: 5;\r\n}\r\n\r\n[data-position='left'] .sm-prelayers {\r\n  right: auto;\r\n  left: 0;\r\n}\r\n\r\n.sm-prelayer {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n  transform: translateX(0);\r\n}\r\n\r\n.sm-panel-inner {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.25rem;\r\n}\r\n\r\n.sm-socials {\r\n  margin-top: auto;\r\n  padding-top: 2rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.75rem;\r\n}\r\n\r\n.sm-socials-title {\r\n  margin: 0;\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n  color: var(--sm-accent, #ff0000);\r\n}\r\n\r\n.sm-socials-list {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.sm-socials-list .sm-socials-link {\r\n  opacity: 1;\r\n}\r\n\r\n.sm-socials-list:hover .sm-socials-link {\r\n  opacity: 0.35;\r\n}\r\n\r\n.sm-socials-list:hover .sm-socials-link:hover {\r\n  opacity: 1;\r\n}\r\n\r\n.sm-socials-link:focus-visible {\r\n  outline: 2px solid var(--sm-accent, #ff0000);\r\n  outline-offset: 3px;\r\n}\r\n\r\n.sm-socials-list:focus-within .sm-socials-link {\r\n  opacity: 0.35;\r\n}\r\n\r\n.sm-socials-list:focus-within .sm-socials-link:focus-visible {\r\n  opacity: 1;\r\n}\r\n\r\n.sm-socials-link {\r\n  font-size: 1.2rem;\r\n  font-weight: 500;\r\n  color: #111;\r\n  text-decoration: none;\r\n  position: relative;\r\n  padding: 2px 0;\r\n  display: inline-block;\r\n  transition:\r\n    color 0.3s ease,\r\n    opacity 0.3s ease;\r\n}\r\n\r\n.sm-socials-link:hover {\r\n  color: var(--sm-accent, #ff0000);\r\n}\r\n\r\n.sm-panel-title {\r\n  margin: 0;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n}\r\n\r\n.sm-panel-list {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.sm-panel-item {\r\n  position: relative;\r\n  color: #000;\r\n  font-weight: 600;\r\n  font-size: 4rem;\r\n  cursor: pointer;\r\n  line-height: 1;\r\n  letter-spacing: -2px;\r\n  text-transform: uppercase;\r\n  transition:\r\n    background 0.25s,\r\n    color 0.25s;\r\n  display: inline-block;\r\n  text-decoration: none;\r\n  padding-right: 1.4em;\r\n}\r\n\r\n.staggered-menu-panel .sm-socials-list .sm-socials-link {\r\n  opacity: 1;\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.staggered-menu-panel .sm-socials-list:hover .sm-socials-link:not(:hover) {\r\n  opacity: 0.35;\r\n}\r\n\r\n.staggered-menu-panel .sm-socials-list:focus-within .sm-socials-link:not(:focus-visible) {\r\n  opacity: 0.35;\r\n}\r\n\r\n.staggered-menu-panel .sm-socials-list .sm-socials-link:hover,\r\n.staggered-menu-panel .sm-socials-list .sm-socials-link:focus-visible {\r\n  opacity: 1;\r\n}\r\n\r\n.sm-panel-itemLabel {\r\n  display: inline-block;\r\n  will-change: transform;\r\n  transform-origin: 50% 100%;\r\n}\r\n\r\n.sm-panel-item:hover {\r\n  color: var(--sm-accent, #5227ff);\r\n}\r\n\r\n.sm-panel-list[data-numbering] {\r\n  counter-reset: smItem;\r\n}\r\n\r\n.sm-panel-list[data-numbering] .sm-panel-item::after {\r\n  counter-increment: smItem;\r\n  content: counter(smItem, decimal-leading-zero);\r\n  position: absolute;\r\n  top: 0.1em;\r\n  right: 3.2em;\r\n  font-size: 18px;\r\n  font-weight: 400;\r\n  color: var(--sm-accent, #5227ff);\r\n  letter-spacing: 0;\r\n  pointer-events: none;\r\n  user-select: none;\r\n  opacity: var(--sm-num-opacity, 0);\r\n}\r\n\r\n@media (max-width: 1024px) {\r\n  .staggered-menu-panel {\r\n    width: 100%;\r\n    left: 0;\r\n    right: 0;\r\n  }\r\n\r\n  .staggered-menu-wrapper[data-open] .sm-logo-img {\r\n    filter: invert(100%);\r\n  }\r\n}\r\n\r\n@media (max-width: 640px) {\r\n  .staggered-menu-panel {\r\n    width: 100%;\r\n    left: 0;\r\n    right: 0;\r\n  }\r\n\r\n  .staggered-menu-wrapper[data-open] .sm-logo-img {\r\n    filter: invert(100%);\r\n  }\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}