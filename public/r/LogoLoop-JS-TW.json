{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "LogoLoop-JS-TW",
  "type": "registry:block",
  "title": "LogoLoop",
  "description": "Continuously looping marquee of brand or tech logos with seamless repeat and hover pause.",
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Animations/LogoLoop/LogoLoop.jsx",
      "content": "import { useCallback, useEffect, useMemo, useRef, useState, memo } from 'react';\r\n\r\nconst ANIMATION_CONFIG = {\r\n  SMOOTH_TAU: 0.25,\r\n  MIN_COPIES: 2,\r\n  COPY_HEADROOM: 2\r\n};\r\n\r\nconst toCssLength = value => (typeof value === 'number' ? `${value}px` : (value ?? undefined));\r\n\r\nconst cx = (...parts) => parts.filter(Boolean).join(' ');\r\n\r\nconst useResizeObserver = (callback, elements, dependencies) => {\r\n  useEffect(() => {\r\n    if (!window.ResizeObserver) {\r\n      const handleResize = () => callback();\r\n      window.addEventListener('resize', handleResize);\r\n      callback();\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }\r\n\r\n    const observers = elements.map(ref => {\r\n      if (!ref.current) return null;\r\n      const observer = new ResizeObserver(callback);\r\n      observer.observe(ref.current);\r\n      return observer;\r\n    });\r\n\r\n    callback();\r\n\r\n    return () => {\r\n      observers.forEach(observer => observer?.disconnect());\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, dependencies);\r\n};\r\n\r\nconst useImageLoader = (seqRef, onLoad, dependencies) => {\r\n  useEffect(() => {\r\n    const images = seqRef.current?.querySelectorAll('img') ?? [];\r\n\r\n    if (images.length === 0) {\r\n      onLoad();\r\n      return;\r\n    }\r\n\r\n    let remainingImages = images.length;\r\n    const handleImageLoad = () => {\r\n      remainingImages -= 1;\r\n      if (remainingImages === 0) {\r\n        onLoad();\r\n      }\r\n    };\r\n\r\n    images.forEach(img => {\r\n      const htmlImg = img;\r\n      if (htmlImg.complete) {\r\n        handleImageLoad();\r\n      } else {\r\n        htmlImg.addEventListener('load', handleImageLoad, { once: true });\r\n        htmlImg.addEventListener('error', handleImageLoad, { once: true });\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      images.forEach(img => {\r\n        img.removeEventListener('load', handleImageLoad);\r\n        img.removeEventListener('error', handleImageLoad);\r\n      });\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, dependencies);\r\n};\r\n\r\nconst useAnimationLoop = (trackRef, targetVelocity, seqWidth, isHovered, pauseOnHover) => {\r\n  const rafRef = useRef(null);\r\n  const lastTimestampRef = useRef(null);\r\n  const offsetRef = useRef(0);\r\n  const velocityRef = useRef(0);\r\n\r\n  useEffect(() => {\r\n    const track = trackRef.current;\r\n    if (!track) return;\r\n\r\n    const prefersReduced =\r\n      typeof window !== 'undefined' &&\r\n      window.matchMedia &&\r\n      window.matchMedia('(prefers-reduced-motion: reduce)').matches;\r\n\r\n    if (seqWidth > 0) {\r\n      offsetRef.current = ((offsetRef.current % seqWidth) + seqWidth) % seqWidth;\r\n      track.style.transform = `translate3d(${-offsetRef.current}px, 0, 0)`;\r\n    }\r\n\r\n    if (prefersReduced) {\r\n      track.style.transform = 'translate3d(0, 0, 0)';\r\n      return () => {\r\n        lastTimestampRef.current = null;\r\n      };\r\n    }\r\n\r\n    const animate = timestamp => {\r\n      if (lastTimestampRef.current === null) {\r\n        lastTimestampRef.current = timestamp;\r\n      }\r\n\r\n      const deltaTime = Math.max(0, timestamp - lastTimestampRef.current) / 1000;\r\n      lastTimestampRef.current = timestamp;\r\n\r\n      const target = pauseOnHover && isHovered ? 0 : targetVelocity;\r\n\r\n      const easingFactor = 1 - Math.exp(-deltaTime / ANIMATION_CONFIG.SMOOTH_TAU);\r\n      velocityRef.current += (target - velocityRef.current) * easingFactor;\r\n\r\n      if (seqWidth > 0) {\r\n        let nextOffset = offsetRef.current + velocityRef.current * deltaTime;\r\n        nextOffset = ((nextOffset % seqWidth) + seqWidth) % seqWidth;\r\n        offsetRef.current = nextOffset;\r\n\r\n        const translateX = -offsetRef.current;\r\n        track.style.transform = `translate3d(${translateX}px, 0, 0)`;\r\n      }\r\n\r\n      rafRef.current = requestAnimationFrame(animate);\r\n    };\r\n\r\n    rafRef.current = requestAnimationFrame(animate);\r\n\r\n    return () => {\r\n      if (rafRef.current !== null) {\r\n        cancelAnimationFrame(rafRef.current);\r\n        rafRef.current = null;\r\n      }\r\n      lastTimestampRef.current = null;\r\n    };\r\n  }, [targetVelocity, seqWidth, isHovered, pauseOnHover, trackRef]);\r\n};\r\n\r\nexport const LogoLoop = memo(\r\n  ({\r\n    logos,\r\n    speed = 120,\r\n    direction = 'left',\r\n    width = '100%',\r\n    logoHeight = 28,\r\n    gap = 32,\r\n    pauseOnHover = true,\r\n    fadeOut = false,\r\n    fadeOutColor,\r\n    scaleOnHover = false,\r\n    ariaLabel = 'Partner logos',\r\n    className,\r\n    style\r\n  }) => {\r\n    const containerRef = useRef(null);\r\n    const trackRef = useRef(null);\r\n    const seqRef = useRef(null);\r\n\r\n    const [seqWidth, setSeqWidth] = useState(0);\r\n    const [copyCount, setCopyCount] = useState(ANIMATION_CONFIG.MIN_COPIES);\r\n    const [isHovered, setIsHovered] = useState(false);\r\n\r\n    const targetVelocity = useMemo(() => {\r\n      const magnitude = Math.abs(speed);\r\n      const directionMultiplier = direction === 'left' ? 1 : -1;\r\n      const speedMultiplier = speed < 0 ? -1 : 1;\r\n      return magnitude * directionMultiplier * speedMultiplier;\r\n    }, [speed, direction]);\r\n\r\n    const updateDimensions = useCallback(() => {\r\n      const containerWidth = containerRef.current?.clientWidth ?? 0;\r\n      const sequenceWidth = seqRef.current?.getBoundingClientRect?.()?.width ?? 0;\r\n\r\n      if (sequenceWidth > 0) {\r\n        setSeqWidth(Math.ceil(sequenceWidth));\r\n        const copiesNeeded = Math.ceil(containerWidth / sequenceWidth) + ANIMATION_CONFIG.COPY_HEADROOM;\r\n        setCopyCount(Math.max(ANIMATION_CONFIG.MIN_COPIES, copiesNeeded));\r\n      }\r\n    }, []);\r\n\r\n    useResizeObserver(updateDimensions, [containerRef, seqRef], [logos, gap, logoHeight]);\r\n\r\n    useImageLoader(seqRef, updateDimensions, [logos, gap, logoHeight]);\r\n\r\n    useAnimationLoop(trackRef, targetVelocity, seqWidth, isHovered, pauseOnHover);\r\n\r\n    const cssVariables = useMemo(\r\n      () => ({\r\n        '--logoloop-gap': `${gap}px`,\r\n        '--logoloop-logoHeight': `${logoHeight}px`,\r\n        ...(fadeOutColor && { '--logoloop-fadeColor': fadeOutColor })\r\n      }),\r\n      [gap, logoHeight, fadeOutColor]\r\n    );\r\n\r\n    const rootClasses = useMemo(\r\n      () =>\r\n        cx(\r\n          'relative overflow-x-hidden group',\r\n          '[--logoloop-gap:32px]',\r\n          '[--logoloop-logoHeight:28px]',\r\n          '[--logoloop-fadeColorAuto:#ffffff]',\r\n          'dark:[--logoloop-fadeColorAuto:#0b0b0b]',\r\n          scaleOnHover && 'py-[calc(var(--logoloop-logoHeight)*0.1)]',\r\n          className\r\n        ),\r\n      [scaleOnHover, className]\r\n    );\r\n\r\n    const handleMouseEnter = useCallback(() => {\r\n      if (pauseOnHover) setIsHovered(true);\r\n    }, [pauseOnHover]);\r\n\r\n    const handleMouseLeave = useCallback(() => {\r\n      if (pauseOnHover) setIsHovered(false);\r\n    }, [pauseOnHover]);\r\n\r\n    const renderLogoItem = useCallback(\r\n      (item, key) => {\r\n        const isNodeItem = 'node' in item;\r\n\r\n        const content = isNodeItem ? (\r\n          <span\r\n            className={cx(\r\n              'inline-flex items-center',\r\n              'motion-reduce:transition-none',\r\n              scaleOnHover &&\r\n                'transition-transform duration-300 ease-[cubic-bezier(0.4,0,0.2,1)] group-hover/item:scale-120'\r\n            )}\r\n            aria-hidden={!!item.href && !item.ariaLabel}\r\n          >\r\n            {item.node}\r\n          </span>\r\n        ) : (\r\n          <img\r\n            className={cx(\r\n              'h-[var(--logoloop-logoHeight)] w-auto block object-contain',\r\n              '[-webkit-user-drag:none] pointer-events-none',\r\n              '[image-rendering:-webkit-optimize-contrast]',\r\n              'motion-reduce:transition-none',\r\n              scaleOnHover &&\r\n                'transition-transform duration-300 ease-[cubic-bezier(0.4,0,0.2,1)] group-hover/item:scale-120'\r\n            )}\r\n            src={item.src}\r\n            srcSet={item.srcSet}\r\n            sizes={item.sizes}\r\n            width={item.width}\r\n            height={item.height}\r\n            alt={item.alt ?? ''}\r\n            title={item.title}\r\n            loading=\"lazy\"\r\n            decoding=\"async\"\r\n            draggable={false}\r\n          />\r\n        );\r\n\r\n        const itemAriaLabel = isNodeItem ? (item.ariaLabel ?? item.title) : (item.alt ?? item.title);\r\n\r\n        const inner = item.href ? (\r\n          <a\r\n            className={cx(\r\n              'inline-flex items-center no-underline rounded',\r\n              'transition-opacity duration-200 ease-linear',\r\n              'hover:opacity-80',\r\n              'focus-visible:outline focus-visible:outline-current focus-visible:outline-offset-2'\r\n            )}\r\n            href={item.href}\r\n            aria-label={itemAriaLabel || 'logo link'}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer noopener\"\r\n          >\r\n            {content}\r\n          </a>\r\n        ) : (\r\n          content\r\n        );\r\n\r\n        return (\r\n          <li\r\n            className={cx(\r\n              'flex-none mr-[var(--logoloop-gap)] text-[length:var(--logoloop-logoHeight)] leading-[1]',\r\n              scaleOnHover && 'overflow-visible group/item'\r\n            )}\r\n            key={key}\r\n            role=\"listitem\"\r\n          >\r\n            {inner}\r\n          </li>\r\n        );\r\n      },\r\n      [scaleOnHover]\r\n    );\r\n\r\n    const logoLists = useMemo(\r\n      () =>\r\n        Array.from({ length: copyCount }, (_, copyIndex) => (\r\n          <ul\r\n            className=\"flex items-center\"\r\n            key={`copy-${copyIndex}`}\r\n            role=\"list\"\r\n            aria-hidden={copyIndex > 0}\r\n            ref={copyIndex === 0 ? seqRef : undefined}\r\n          >\r\n            {logos.map((item, itemIndex) => renderLogoItem(item, `${copyIndex}-${itemIndex}`))}\r\n          </ul>\r\n        )),\r\n      [copyCount, logos, renderLogoItem]\r\n    );\r\n\r\n    const containerStyle = useMemo(\r\n      () => ({\r\n        width: toCssLength(width) ?? '100%',\r\n        ...cssVariables,\r\n        ...style\r\n      }),\r\n      [width, cssVariables, style]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        ref={containerRef}\r\n        className={rootClasses}\r\n        style={containerStyle}\r\n        role=\"region\"\r\n        aria-label={ariaLabel}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n      >\r\n        {fadeOut && (\r\n          <>\r\n            <div\r\n              aria-hidden\r\n              className={cx(\r\n                'pointer-events-none absolute inset-y-0 left-0 z-[1]',\r\n                'w-[clamp(24px,8%,120px)]',\r\n                'bg-[linear-gradient(to_right,var(--logoloop-fadeColor,var(--logoloop-fadeColorAuto))_0%,rgba(0,0,0,0)_100%)]'\r\n              )}\r\n            />\r\n            <div\r\n              aria-hidden\r\n              className={cx(\r\n                'pointer-events-none absolute inset-y-0 right-0 z-[1]',\r\n                'w-[clamp(24px,8%,120px)]',\r\n                'bg-[linear-gradient(to_left,var(--logoloop-fadeColor,var(--logoloop-fadeColorAuto))_0%,rgba(0,0,0,0)_100%)]'\r\n              )}\r\n            />\r\n          </>\r\n        )}\r\n\r\n        <div\r\n          className={cx('flex w-max will-change-transform select-none', 'motion-reduce:transform-none')}\r\n          ref={trackRef}\r\n        >\r\n          {logoLists}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nLogoLoop.displayName = 'LogoLoop';\r\n\r\nexport default LogoLoop;\r\n",
      "type": "registry:component"
    }
  ]
}