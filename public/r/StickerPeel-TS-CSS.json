{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "StickerPeel-TS-CSS",
  "type": "registry:block",
  "title": "StickerPeel",
  "description": "Sticker corner lift + peel interaction using 3D transform and shadow depth.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/ts/default/src/ts-default/Animations/StickerPeel/StickerPeel.tsx",
      "content": "import { useRef, useEffect, useMemo, CSSProperties } from 'react';\r\nimport { gsap } from 'gsap';\r\nimport { Draggable } from 'gsap/Draggable';\r\nimport './StickerPeel.css';\r\n\r\ngsap.registerPlugin(Draggable);\r\n\r\ninterface StickerPeelProps {\r\n  imageSrc: string;\r\n  rotate?: number;\r\n  peelBackHoverPct?: number;\r\n  peelBackActivePct?: number;\r\n  peelEasing?: string;\r\n  peelHoverEasing?: string;\r\n  width?: number;\r\n  shadowIntensity?: number;\r\n  lightingIntensity?: number;\r\n  initialPosition?: 'center' | 'random' | { x: number; y: number };\r\n  peelDirection?: number;\r\n  className?: string;\r\n}\r\n\r\ninterface CSSVars extends CSSProperties {\r\n  '--sticker-rotate'?: string;\r\n  '--sticker-p'?: string;\r\n  '--sticker-peelback-hover'?: string;\r\n  '--sticker-peelback-active'?: string;\r\n  '--sticker-peel-easing'?: string;\r\n  '--sticker-peel-hover-easing'?: string;\r\n  '--sticker-width'?: string;\r\n  '--sticker-shadow-opacity'?: number;\r\n  '--sticker-lighting-constant'?: number;\r\n  '--peel-direction'?: string;\r\n}\r\n\r\nconst StickerPeel: React.FC<StickerPeelProps> = ({\r\n  imageSrc,\r\n  rotate = 30,\r\n  peelBackHoverPct = 30,\r\n  peelBackActivePct = 40,\r\n  peelEasing = 'power3.out',\r\n  peelHoverEasing = 'power2.out',\r\n  width = 200,\r\n  shadowIntensity = 0.6,\r\n  lightingIntensity = 0.1,\r\n  initialPosition = 'center',\r\n  peelDirection = 0,\r\n  className = ''\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const dragTargetRef = useRef<HTMLDivElement>(null);\r\n  const pointLightRef = useRef<SVGFEPointLightElement>(null);\r\n  const pointLightFlippedRef = useRef<SVGFEPointLightElement>(null);\r\n  const draggableInstanceRef = useRef<Draggable | null>(null);\r\n\r\n  const defaultPadding = 10;\r\n\r\n  useEffect(() => {\r\n    const target = dragTargetRef.current;\r\n    if (!target) return;\r\n\r\n    let startX = 0,\r\n      startY = 0;\r\n\r\n    if (initialPosition === 'center') {\r\n      return;\r\n    }\r\n\r\n    if (typeof initialPosition === 'object' && initialPosition.x !== undefined && initialPosition.y !== undefined) {\r\n      startX = initialPosition.x;\r\n      startY = initialPosition.y;\r\n    }\r\n\r\n    gsap.set(target, { x: startX, y: startY });\r\n  }, [initialPosition]);\r\n\r\n  useEffect(() => {\r\n    const target = dragTargetRef.current;\r\n    if (!target) return;\r\n\r\n    const boundsEl = target.parentNode as HTMLElement;\r\n\r\n    const draggable = Draggable.create(target, {\r\n      type: 'x,y',\r\n      bounds: boundsEl,\r\n      inertia: true,\r\n      onDrag(this: Draggable) {\r\n        const rot = gsap.utils.clamp(-24, 24, this.deltaX * 0.4);\r\n        gsap.to(target, { rotation: rot, duration: 0.15, ease: 'power1.out' });\r\n      },\r\n      onDragEnd() {\r\n        const rotationEase = 'power2.out';\r\n        const duration = 0.8;\r\n        gsap.to(target, { rotation: 0, duration, ease: rotationEase });\r\n      }\r\n    });\r\n\r\n    draggableInstanceRef.current = draggable[0];\r\n\r\n    const handleResize = () => {\r\n      if (draggableInstanceRef.current) {\r\n        draggableInstanceRef.current.update();\r\n\r\n        const currentX = gsap.getProperty(target, 'x') as number;\r\n        const currentY = gsap.getProperty(target, 'y') as number;\r\n\r\n        const boundsRect = boundsEl.getBoundingClientRect();\r\n        const targetRect = target.getBoundingClientRect();\r\n\r\n        const maxX = boundsRect.width - targetRect.width;\r\n        const maxY = boundsRect.height - targetRect.height;\r\n\r\n        const newX = Math.max(0, Math.min(currentX, maxX));\r\n        const newY = Math.max(0, Math.min(currentY, maxY));\r\n\r\n        if (newX !== currentX || newY !== currentY) {\r\n          gsap.to(target, {\r\n            x: newX,\r\n            y: newY,\r\n            duration: 0.3,\r\n            ease: 'power2.out'\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    window.addEventListener('orientationchange', handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      window.removeEventListener('orientationchange', handleResize);\r\n      if (draggableInstanceRef.current) {\r\n        draggableInstanceRef.current.kill();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const updateLight = (e: Event) => {\r\n      const mouseEvent = e as MouseEvent;\r\n      const rect = containerRef.current?.getBoundingClientRect();\r\n      if (!rect) return;\r\n\r\n      const x = mouseEvent.clientX - rect.left;\r\n      const y = mouseEvent.clientY - rect.top;\r\n\r\n      if (pointLightRef.current) {\r\n        gsap.set(pointLightRef.current, { attr: { x, y } });\r\n      }\r\n\r\n      const normalizedAngle = Math.abs(peelDirection % 360);\r\n      if (pointLightFlippedRef.current) {\r\n        if (normalizedAngle !== 180) {\r\n          gsap.set(pointLightFlippedRef.current, {\r\n            attr: { x, y: rect.height - y }\r\n          });\r\n        } else {\r\n          gsap.set(pointLightFlippedRef.current, {\r\n            attr: { x: -1000, y: -1000 }\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    const container = containerRef.current;\r\n    const eventType = 'mousemove';\r\n\r\n    if (container) {\r\n      container.addEventListener(eventType, updateLight);\r\n      return () => container.removeEventListener(eventType, updateLight);\r\n    }\r\n  }, [peelDirection]);\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    if (!container) return;\r\n\r\n    const handleTouchStart = () => {\r\n      container.classList.add('touch-active');\r\n    };\r\n\r\n    const handleTouchEnd = () => {\r\n      container.classList.remove('touch-active');\r\n    };\r\n\r\n    container.addEventListener('touchstart', handleTouchStart);\r\n    container.addEventListener('touchend', handleTouchEnd);\r\n    container.addEventListener('touchcancel', handleTouchEnd);\r\n\r\n    return () => {\r\n      container.removeEventListener('touchstart', handleTouchStart);\r\n      container.removeEventListener('touchend', handleTouchEnd);\r\n      container.removeEventListener('touchcancel', handleTouchEnd);\r\n    };\r\n  }, []);\r\n\r\n  const cssVars: CSSVars = useMemo(\r\n    () => ({\r\n      '--sticker-rotate': `${rotate}deg`,\r\n      '--sticker-p': `${defaultPadding}px`,\r\n      '--sticker-peelback-hover': `${peelBackHoverPct}%`,\r\n      '--sticker-peelback-active': `${peelBackActivePct}%`,\r\n      '--sticker-peel-easing': peelEasing,\r\n      '--sticker-peel-hover-easing': peelHoverEasing,\r\n      '--sticker-width': `${width}px`,\r\n      '--sticker-shadow-opacity': shadowIntensity,\r\n      '--sticker-lighting-constant': lightingIntensity,\r\n      '--peel-direction': `${peelDirection}deg`\r\n    }),\r\n    [\r\n      rotate,\r\n      peelBackHoverPct,\r\n      peelBackActivePct,\r\n      peelEasing,\r\n      peelHoverEasing,\r\n      width,\r\n      shadowIntensity,\r\n      lightingIntensity,\r\n      peelDirection\r\n    ]\r\n  );\r\n\r\n  return (\r\n    <div className={`draggable ${className}`} ref={dragTargetRef} style={cssVars}>\r\n      <svg width=\"0\" height=\"0\">\r\n        <defs>\r\n          <filter id=\"pointLight\">\r\n            <feGaussianBlur stdDeviation=\"1\" result=\"blur\" />\r\n            <feSpecularLighting\r\n              result=\"spec\"\r\n              in=\"blur\"\r\n              specularExponent=\"100\"\r\n              specularConstant={lightingIntensity}\r\n              lightingColor=\"white\"\r\n            >\r\n              <fePointLight ref={pointLightRef} x=\"100\" y=\"100\" z=\"300\" />\r\n            </feSpecularLighting>\r\n            <feComposite in=\"spec\" in2=\"SourceGraphic\" result=\"lit\" />\r\n            <feComposite in=\"lit\" in2=\"SourceAlpha\" operator=\"in\" />\r\n          </filter>\r\n\r\n          <filter id=\"pointLightFlipped\">\r\n            <feGaussianBlur stdDeviation=\"10\" result=\"blur\" />\r\n            <feSpecularLighting\r\n              result=\"spec\"\r\n              in=\"blur\"\r\n              specularExponent=\"100\"\r\n              specularConstant={lightingIntensity * 7}\r\n              lightingColor=\"white\"\r\n            >\r\n              <fePointLight ref={pointLightFlippedRef} x=\"100\" y=\"100\" z=\"300\" />\r\n            </feSpecularLighting>\r\n            <feComposite in=\"spec\" in2=\"SourceGraphic\" result=\"lit\" />\r\n            <feComposite in=\"lit\" in2=\"SourceAlpha\" operator=\"in\" />\r\n          </filter>\r\n\r\n          <filter id=\"dropShadow\">\r\n            <feDropShadow\r\n              dx=\"2\"\r\n              dy=\"4\"\r\n              stdDeviation={3 * shadowIntensity}\r\n              floodColor=\"black\"\r\n              floodOpacity={shadowIntensity}\r\n            />\r\n          </filter>\r\n\r\n          <filter id=\"expandAndFill\">\r\n            <feOffset dx=\"0\" dy=\"0\" in=\"SourceAlpha\" result=\"shape\" />\r\n            <feFlood floodColor=\"rgb(179,179,179)\" result=\"flood\" />\r\n            <feComposite operator=\"in\" in=\"flood\" in2=\"shape\" />\r\n          </filter>\r\n        </defs>\r\n      </svg>\r\n\r\n      <div className=\"sticker-container\" ref={containerRef}>\r\n        <div className=\"sticker-main\">\r\n          <div className=\"sticker-lighting\">\r\n            <img\r\n              src={imageSrc}\r\n              alt=\"\"\r\n              className=\"sticker-image\"\r\n              draggable=\"false\"\r\n              onContextMenu={e => e.preventDefault()}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flap\">\r\n          <div className=\"flap-lighting\">\r\n            <img\r\n              src={imageSrc}\r\n              alt=\"\"\r\n              className=\"flap-image\"\r\n              draggable=\"false\"\r\n              onContextMenu={e => e.preventDefault()}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StickerPeel;\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/ts/default/src/ts-default/Animations/StickerPeel/StickerPeel.css",
      "content": ":root {\r\n  --sticker-rotate: 30deg;\r\n  --sticker-p: 10px;\r\n  --sticker-peelback-hover: 30%;\r\n  --sticker-peelback-active: 40%;\r\n  --sticker-peel-easing: power3.out;\r\n  --sticker-peel-hover-easing: power2.out;\r\n  --sticker-start: calc(-1 * var(--sticker-p));\r\n  --sticker-end: calc(100% + var(--sticker-p));\r\n  --sticker-shadow-opacity: 0.6;\r\n  --sticker-lighting-constant: 0.1;\r\n  --peel-direction: 0deg;\r\n}\r\n\r\n.sticker-container {\r\n  position: relative;\r\n  transform: rotate(var(--peel-direction));\r\n  transform-origin: center;\r\n}\r\n\r\n.sticker-container * {\r\n  -webkit-user-select: none;\r\n  user-select: none;\r\n  -webkit-touch-callout: none;\r\n  -webkit-tap-highlight-color: transparent;\r\n}\r\n\r\n.sticker-main {\r\n  clip-path: polygon(\r\n    var(--sticker-start) var(--sticker-start),\r\n    var(--sticker-end) var(--sticker-start),\r\n    var(--sticker-end) var(--sticker-end),\r\n    var(--sticker-start) var(--sticker-end)\r\n  );\r\n  transition: clip-path 0.6s ease-out;\r\n  filter: url(#dropShadow);\r\n}\r\n\r\n.sticker-main > * {\r\n  transform: rotate(calc(-1 * var(--peel-direction)));\r\n}\r\n\r\n.sticker-lighting {\r\n  filter: url(#pointLight);\r\n}\r\n\r\n.sticker-container:hover .sticker-main,\r\n.sticker-container.touch-active .sticker-main {\r\n  clip-path: polygon(\r\n    var(--sticker-start) var(--sticker-peelback-hover),\r\n    var(--sticker-end) var(--sticker-peelback-hover),\r\n    var(--sticker-end) var(--sticker-end),\r\n    var(--sticker-start) var(--sticker-end)\r\n  );\r\n}\r\n\r\n.sticker-container:active .sticker-main {\r\n  clip-path: polygon(\r\n    var(--sticker-start) var(--sticker-peelback-active),\r\n    var(--sticker-end) var(--sticker-peelback-active),\r\n    var(--sticker-end) var(--sticker-end),\r\n    var(--sticker-start) var(--sticker-end)\r\n  );\r\n}\r\n\r\n.sticker-image {\r\n  transform: rotate(var(--sticker-rotate));\r\n}\r\n\r\n.flap {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  left: 0;\r\n  top: calc(-100% - var(--sticker-p) - var(--sticker-p));\r\n  clip-path: polygon(\r\n    var(--sticker-start) var(--sticker-start),\r\n    var(--sticker-end) var(--sticker-start),\r\n    var(--sticker-end) var(--sticker-start),\r\n    var(--sticker-start) var(--sticker-start)\r\n  );\r\n  transform: scaleY(-1);\r\n  transition: all 0.6s ease-out;\r\n}\r\n\r\n.flap > * {\r\n  transform: rotate(calc(-1 * var(--peel-direction)));\r\n}\r\n\r\n.sticker-container:hover .flap,\r\n.sticker-container.touch-active .flap {\r\n  clip-path: polygon(\r\n    var(--sticker-start) var(--sticker-start),\r\n    var(--sticker-end) var(--sticker-start),\r\n    var(--sticker-end) var(--sticker-peelback-hover),\r\n    var(--sticker-start) var(--sticker-peelback-hover)\r\n  );\r\n  top: calc(-100% + 2 * var(--sticker-peelback-hover) - 1px);\r\n}\r\n\r\n.sticker-container:active .flap {\r\n  clip-path: polygon(\r\n    var(--sticker-start) var(--sticker-start),\r\n    var(--sticker-end) var(--sticker-start),\r\n    var(--sticker-end) var(--sticker-peelback-active),\r\n    var(--sticker-start) var(--sticker-peelback-active)\r\n  );\r\n  top: calc(-100% + 2 * var(--sticker-peelback-active) - 1px);\r\n}\r\n\r\n.flap-lighting {\r\n  filter: url(#pointLightFlipped);\r\n}\r\n\r\n.flap-image {\r\n  transform: rotate(var(--sticker-rotate));\r\n  filter: url(#expandAndFill);\r\n}\r\n\r\n.draggable {\r\n  position: absolute;\r\n  cursor: grab;\r\n  -webkit-transform: translateZ(0);\r\n  transform: translateZ(0);\r\n}\r\n\r\n.draggable:active {\r\n  cursor: grabbing;\r\n}\r\n\r\n@media (hover: none) and (pointer: coarse) {\r\n  .draggable {\r\n    cursor: default;\r\n  }\r\n\r\n  .sticker-container {\r\n    touch-action: none;\r\n  }\r\n}\r\n\r\n.sticker-image,\r\n.flap-image {\r\n  width: var(--sticker-width, 200px);\r\n}\r\n\r\n.sticker-main,\r\n.flap {\r\n  will-change: clip-path, transform;\r\n}\r\n\r\n.sticker-ripple {\r\n  position: absolute;\r\n  border-radius: 50%;\r\n  background: rgba(255, 255, 255, 0.6);\r\n  pointer-events: none;\r\n  z-index: 10;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}