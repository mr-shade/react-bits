{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ScrollStack-JS-TW",
  "type": "registry:block",
  "title": "ScrollStack",
  "description": "Overlapping card stack reveals on scroll with depth layering.",
  "dependencies": [
    "lenis"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Components/ScrollStack/ScrollStack.jsx",
      "content": "import { useLayoutEffect, useRef, useCallback } from 'react';\r\nimport Lenis from 'lenis';\r\n\r\nexport const ScrollStackItem = ({ children, itemClassName = '' }) => (\r\n  <div\r\n    className={`scroll-stack-card relative w-full h-80 my-8 p-12 rounded-[40px] shadow-[0_0_30px_rgba(0,0,0,0.1)] box-border origin-top will-change-transform ${itemClassName}`.trim()}\r\n    style={{\r\n      backfaceVisibility: 'hidden',\r\n      transformStyle: 'preserve-3d'\r\n    }}\r\n  >\r\n    {children}\r\n  </div>\r\n);\r\n\r\nconst ScrollStack = ({\r\n  children,\r\n  className = '',\r\n  itemDistance = 100,\r\n  itemScale = 0.03,\r\n  itemStackDistance = 30,\r\n  stackPosition = '20%',\r\n  scaleEndPosition = '10%',\r\n  baseScale = 0.85,\r\n  scaleDuration = 0.5,\r\n  rotationAmount = 0,\r\n  blurAmount = 0,\r\n  useWindowScroll = false,\r\n  onStackComplete\r\n}) => {\r\n  const scrollerRef = useRef(null);\r\n  const stackCompletedRef = useRef(false);\r\n  const animationFrameRef = useRef(null);\r\n  const lenisRef = useRef(null);\r\n  const cardsRef = useRef([]);\r\n  const lastTransformsRef = useRef(new Map());\r\n  const isUpdatingRef = useRef(false);\r\n\r\n  const calculateProgress = useCallback((scrollTop, start, end) => {\r\n    if (scrollTop < start) return 0;\r\n    if (scrollTop > end) return 1;\r\n    return (scrollTop - start) / (end - start);\r\n  }, []);\r\n\r\n  const parsePercentage = useCallback((value, containerHeight) => {\r\n    if (typeof value === 'string' && value.includes('%')) {\r\n      return (parseFloat(value) / 100) * containerHeight;\r\n    }\r\n    return parseFloat(value);\r\n  }, []);\r\n\r\n  const getScrollData = useCallback(() => {\r\n    if (useWindowScroll) {\r\n      return {\r\n        scrollTop: window.scrollY,\r\n        containerHeight: window.innerHeight,\r\n        scrollContainer: document.documentElement\r\n      };\r\n    } else {\r\n      const scroller = scrollerRef.current;\r\n      return {\r\n        scrollTop: scroller.scrollTop,\r\n        containerHeight: scroller.clientHeight,\r\n        scrollContainer: scroller\r\n      };\r\n    }\r\n  }, [useWindowScroll]);\r\n\r\n  const getElementOffset = useCallback(\r\n    element => {\r\n      if (useWindowScroll) {\r\n        const rect = element.getBoundingClientRect();\r\n        return rect.top + window.scrollY;\r\n      } else {\r\n        return element.offsetTop;\r\n      }\r\n    },\r\n    [useWindowScroll]\r\n  );\r\n\r\n  const updateCardTransforms = useCallback(() => {\r\n    if (!cardsRef.current.length || isUpdatingRef.current) return;\r\n\r\n    isUpdatingRef.current = true;\r\n\r\n    const { scrollTop, containerHeight, scrollContainer } = getScrollData();\r\n    const stackPositionPx = parsePercentage(stackPosition, containerHeight);\r\n    const scaleEndPositionPx = parsePercentage(scaleEndPosition, containerHeight);\r\n\r\n    const endElement = useWindowScroll\r\n      ? document.querySelector('.scroll-stack-end')\r\n      : scrollerRef.current?.querySelector('.scroll-stack-end');\r\n\r\n    const endElementTop = endElement ? getElementOffset(endElement) : 0;\r\n\r\n    cardsRef.current.forEach((card, i) => {\r\n      if (!card) return;\r\n\r\n      const cardTop = getElementOffset(card);\r\n      const triggerStart = cardTop - stackPositionPx - itemStackDistance * i;\r\n      const triggerEnd = cardTop - scaleEndPositionPx;\r\n      const pinStart = cardTop - stackPositionPx - itemStackDistance * i;\r\n      const pinEnd = endElementTop - containerHeight / 2;\r\n\r\n      const scaleProgress = calculateProgress(scrollTop, triggerStart, triggerEnd);\r\n      const targetScale = baseScale + i * itemScale;\r\n      const scale = 1 - scaleProgress * (1 - targetScale);\r\n      const rotation = rotationAmount ? i * rotationAmount * scaleProgress : 0;\r\n\r\n      let blur = 0;\r\n      if (blurAmount) {\r\n        let topCardIndex = 0;\r\n        for (let j = 0; j < cardsRef.current.length; j++) {\r\n          const jCardTop = getElementOffset(cardsRef.current[j]);\r\n          const jTriggerStart = jCardTop - stackPositionPx - itemStackDistance * j;\r\n          if (scrollTop >= jTriggerStart) {\r\n            topCardIndex = j;\r\n          }\r\n        }\r\n\r\n        if (i < topCardIndex) {\r\n          const depthInStack = topCardIndex - i;\r\n          blur = Math.max(0, depthInStack * blurAmount);\r\n        }\r\n      }\r\n\r\n      let translateY = 0;\r\n      const isPinned = scrollTop >= pinStart && scrollTop <= pinEnd;\r\n\r\n      if (isPinned) {\r\n        translateY = scrollTop - cardTop + stackPositionPx + itemStackDistance * i;\r\n      } else if (scrollTop > pinEnd) {\r\n        translateY = pinEnd - cardTop + stackPositionPx + itemStackDistance * i;\r\n      }\r\n\r\n      const newTransform = {\r\n        translateY: Math.round(translateY * 100) / 100,\r\n        scale: Math.round(scale * 1000) / 1000,\r\n        rotation: Math.round(rotation * 100) / 100,\r\n        blur: Math.round(blur * 100) / 100\r\n      };\r\n\r\n      const lastTransform = lastTransformsRef.current.get(i);\r\n      const hasChanged =\r\n        !lastTransform ||\r\n        Math.abs(lastTransform.translateY - newTransform.translateY) > 0.1 ||\r\n        Math.abs(lastTransform.scale - newTransform.scale) > 0.001 ||\r\n        Math.abs(lastTransform.rotation - newTransform.rotation) > 0.1 ||\r\n        Math.abs(lastTransform.blur - newTransform.blur) > 0.1;\r\n\r\n      if (hasChanged) {\r\n        const transform = `translate3d(0, ${newTransform.translateY}px, 0) scale(${newTransform.scale}) rotate(${newTransform.rotation}deg)`;\r\n        const filter = newTransform.blur > 0 ? `blur(${newTransform.blur}px)` : '';\r\n\r\n        card.style.transform = transform;\r\n        card.style.filter = filter;\r\n\r\n        lastTransformsRef.current.set(i, newTransform);\r\n      }\r\n\r\n      if (i === cardsRef.current.length - 1) {\r\n        const isInView = scrollTop >= pinStart && scrollTop <= pinEnd;\r\n        if (isInView && !stackCompletedRef.current) {\r\n          stackCompletedRef.current = true;\r\n          onStackComplete?.();\r\n        } else if (!isInView && stackCompletedRef.current) {\r\n          stackCompletedRef.current = false;\r\n        }\r\n      }\r\n    });\r\n\r\n    isUpdatingRef.current = false;\r\n  }, [\r\n    itemScale,\r\n    itemStackDistance,\r\n    stackPosition,\r\n    scaleEndPosition,\r\n    baseScale,\r\n    rotationAmount,\r\n    blurAmount,\r\n    useWindowScroll,\r\n    onStackComplete,\r\n    calculateProgress,\r\n    parsePercentage,\r\n    getScrollData,\r\n    getElementOffset\r\n  ]);\r\n\r\n  const handleScroll = useCallback(() => {\r\n    updateCardTransforms();\r\n  }, [updateCardTransforms]);\r\n\r\n  const setupLenis = useCallback(() => {\r\n    if (useWindowScroll) {\r\n      const lenis = new Lenis({\r\n        duration: 1.2,\r\n        easing: t => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\r\n        smoothWheel: true,\r\n        touchMultiplier: 2,\r\n        infinite: false,\r\n        wheelMultiplier: 1,\r\n        lerp: 0.1,\r\n        syncTouch: true,\r\n        syncTouchLerp: 0.075\r\n      });\r\n\r\n      lenis.on('scroll', handleScroll);\r\n\r\n      const raf = time => {\r\n        lenis.raf(time);\r\n        animationFrameRef.current = requestAnimationFrame(raf);\r\n      };\r\n      animationFrameRef.current = requestAnimationFrame(raf);\r\n\r\n      lenisRef.current = lenis;\r\n      return lenis;\r\n    } else {\r\n      const scroller = scrollerRef.current;\r\n      if (!scroller) return;\r\n\r\n      const lenis = new Lenis({\r\n        wrapper: scroller,\r\n        content: scroller.querySelector('.scroll-stack-inner'),\r\n        duration: 1.2,\r\n        easing: t => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\r\n        smoothWheel: true,\r\n        touchMultiplier: 2,\r\n        infinite: false,\r\n        wheelMultiplier: 1,\r\n        lerp: 0.1,\r\n        syncTouch: true,\r\n        syncTouchLerp: 0.075\r\n      });\r\n\r\n      lenis.on('scroll', handleScroll);\r\n\r\n      const raf = time => {\r\n        lenis.raf(time);\r\n        animationFrameRef.current = requestAnimationFrame(raf);\r\n      };\r\n      animationFrameRef.current = requestAnimationFrame(raf);\r\n\r\n      lenisRef.current = lenis;\r\n      return lenis;\r\n    }\r\n  }, [handleScroll, useWindowScroll]);\r\n\r\n  useLayoutEffect(() => {\r\n    const scroller = scrollerRef.current;\r\n    if (!scroller) return;\r\n\r\n    const cards = Array.from(\r\n      useWindowScroll\r\n        ? document.querySelectorAll('.scroll-stack-card')\r\n        : scroller.querySelectorAll('.scroll-stack-card')\r\n    );\r\n\r\n    cardsRef.current = cards;\r\n    const transformsCache = lastTransformsRef.current;\r\n\r\n    cards.forEach((card, i) => {\r\n      if (i < cards.length - 1) {\r\n        card.style.marginBottom = `${itemDistance}px`;\r\n      }\r\n      card.style.willChange = 'transform, filter';\r\n      card.style.transformOrigin = 'top center';\r\n      card.style.backfaceVisibility = 'hidden';\r\n      card.style.transform = 'translateZ(0)';\r\n      card.style.webkitTransform = 'translateZ(0)';\r\n      card.style.perspective = '1000px';\r\n      card.style.webkitPerspective = '1000px';\r\n    });\r\n\r\n    setupLenis();\r\n\r\n    updateCardTransforms();\r\n\r\n    return () => {\r\n      if (animationFrameRef.current) {\r\n        cancelAnimationFrame(animationFrameRef.current);\r\n      }\r\n      if (lenisRef.current) {\r\n        lenisRef.current.destroy();\r\n      }\r\n      stackCompletedRef.current = false;\r\n      cardsRef.current = [];\r\n      transformsCache.clear();\r\n      isUpdatingRef.current = false;\r\n    };\r\n  }, [\r\n    itemDistance,\r\n    itemScale,\r\n    itemStackDistance,\r\n    stackPosition,\r\n    scaleEndPosition,\r\n    baseScale,\r\n    scaleDuration,\r\n    rotationAmount,\r\n    blurAmount,\r\n    useWindowScroll,\r\n    onStackComplete,\r\n    setupLenis,\r\n    updateCardTransforms\r\n  ]);\r\n\r\n  // Container styles based on scroll mode\r\n  const containerStyles = useWindowScroll\r\n    ? {\r\n        // Global scroll mode - no overflow constraints\r\n        overscrollBehavior: 'contain',\r\n        WebkitOverflowScrolling: 'touch',\r\n        WebkitTransform: 'translateZ(0)',\r\n        transform: 'translateZ(0)'\r\n      }\r\n    : {\r\n        // Container scroll mode - original behavior\r\n        overscrollBehavior: 'contain',\r\n        WebkitOverflowScrolling: 'touch',\r\n        scrollBehavior: 'smooth',\r\n        WebkitTransform: 'translateZ(0)',\r\n        transform: 'translateZ(0)',\r\n        willChange: 'scroll-position'\r\n      };\r\n\r\n  const containerClassName = useWindowScroll\r\n    ? `relative w-full ${className}`.trim()\r\n    : `relative w-full h-full overflow-y-auto overflow-x-visible ${className}`.trim();\r\n\r\n  return (\r\n    <div className={containerClassName} ref={scrollerRef} style={containerStyles}>\r\n      <div className=\"scroll-stack-inner pt-[20vh] px-20 pb-[50rem] min-h-screen\">\r\n        {children}\r\n        {/* Spacer so the last pin can release cleanly */}\r\n        <div className=\"scroll-stack-end w-full h-px\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrollStack;\r\n",
      "type": "registry:component"
    }
  ]
}