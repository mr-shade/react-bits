{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ClickSpark-JS-CSS",
  "type": "registry:block",
  "title": "ClickSpark",
  "description": "Creates particle spark bursts at click position.",
  "files": [
    {
      "path": "public/default/src/content/Animations/ClickSpark/ClickSpark.jsx",
      "content": "import { useRef, useEffect, useCallback } from 'react';\r\n\r\nconst ClickSpark = ({\r\n  sparkColor = '#fff',\r\n  sparkSize = 10,\r\n  sparkRadius = 15,\r\n  sparkCount = 8,\r\n  duration = 400,\r\n  easing = 'ease-out',\r\n  extraScale = 1.0,\r\n  children\r\n}) => {\r\n  const canvasRef = useRef(null);\r\n  const sparksRef = useRef([]);\r\n  const startTimeRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const parent = canvas.parentElement;\r\n    if (!parent) return;\r\n\r\n    let resizeTimeout;\r\n\r\n    const resizeCanvas = () => {\r\n      const { width, height } = parent.getBoundingClientRect();\r\n      if (canvas.width !== width || canvas.height !== height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n      }\r\n    };\r\n\r\n    const handleResize = () => {\r\n      clearTimeout(resizeTimeout);\r\n      resizeTimeout = setTimeout(resizeCanvas, 100);\r\n    };\r\n\r\n    const ro = new ResizeObserver(handleResize);\r\n    ro.observe(parent);\r\n\r\n    resizeCanvas();\r\n\r\n    return () => {\r\n      ro.disconnect();\r\n      clearTimeout(resizeTimeout);\r\n    };\r\n  }, []);\r\n\r\n  const easeFunc = useCallback(\r\n    t => {\r\n      switch (easing) {\r\n        case 'linear':\r\n          return t;\r\n        case 'ease-in':\r\n          return t * t;\r\n        case 'ease-in-out':\r\n          return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\r\n        default:\r\n          return t * (2 - t);\r\n      }\r\n    },\r\n    [easing]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    let animationId;\r\n\r\n    const draw = timestamp => {\r\n      if (!startTimeRef.current) {\r\n        startTimeRef.current = timestamp;\r\n      }\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      sparksRef.current = sparksRef.current.filter(spark => {\r\n        const elapsed = timestamp - spark.startTime;\r\n        if (elapsed >= duration) {\r\n          return false;\r\n        }\r\n\r\n        const progress = elapsed / duration;\r\n        const eased = easeFunc(progress);\r\n\r\n        const distance = eased * sparkRadius * extraScale;\r\n        const lineLength = sparkSize * (1 - eased);\r\n\r\n        const x1 = spark.x + distance * Math.cos(spark.angle);\r\n        const y1 = spark.y + distance * Math.sin(spark.angle);\r\n        const x2 = spark.x + (distance + lineLength) * Math.cos(spark.angle);\r\n        const y2 = spark.y + (distance + lineLength) * Math.sin(spark.angle);\r\n\r\n        ctx.strokeStyle = sparkColor;\r\n        ctx.lineWidth = 2;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x1, y1);\r\n        ctx.lineTo(x2, y2);\r\n        ctx.stroke();\r\n\r\n        return true;\r\n      });\r\n\r\n      animationId = requestAnimationFrame(draw);\r\n    };\r\n\r\n    animationId = requestAnimationFrame(draw);\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animationId);\r\n    };\r\n  }, [sparkColor, sparkSize, sparkRadius, sparkCount, duration, easeFunc, extraScale]);\r\n\r\n  const handleClick = e => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n    const rect = canvas.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n\r\n    const now = performance.now();\r\n    const newSparks = Array.from({ length: sparkCount }, (_, i) => ({\r\n      x,\r\n      y,\r\n      angle: (2 * Math.PI * i) / sparkCount,\r\n      startTime: now\r\n    }));\r\n\r\n    sparksRef.current.push(...newSparks);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: '100%'\r\n      }}\r\n      onClick={handleClick}\r\n    >\r\n      <canvas\r\n        ref={canvasRef}\r\n        style={{\r\n          width: '100%',\r\n          height: '100%',\r\n          display: 'block',\r\n          userSelect: 'none',\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          pointerEvents: 'none'\r\n        }}\r\n      />\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClickSpark;\r\n",
      "type": "registry:component"
    }
  ]
}