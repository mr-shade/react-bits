{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Crosshair-TS-CSS",
  "type": "registry:block",
  "title": "Crosshair",
  "description": "Custom crosshair cursor with tracking, and link hover effects.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/ts/default/src/ts-default/Animations/Crosshair/Crosshair.tsx",
      "content": "import React, { useEffect, useRef, RefObject } from 'react';\r\nimport { gsap } from 'gsap';\r\n\r\nconst lerp = (a: number, b: number, n: number): number => (1 - n) * a + n * b;\r\n\r\nconst getMousePos = (e: Event, container?: HTMLElement | null): { x: number; y: number } => {\r\n  const mouseEvent = e as MouseEvent;\r\n  if (container) {\r\n    const bounds = container.getBoundingClientRect();\r\n    return {\r\n      x: mouseEvent.clientX - bounds.left,\r\n      y: mouseEvent.clientY - bounds.top\r\n    };\r\n  }\r\n  return { x: mouseEvent.clientX, y: mouseEvent.clientY };\r\n};\r\n\r\ninterface CrosshairProps {\r\n  color?: string;\r\n  containerRef?: RefObject<HTMLElement>;\r\n}\r\n\r\nconst Crosshair: React.FC<CrosshairProps> = ({ color = 'white', containerRef = null }) => {\r\n  const cursorRef = useRef<HTMLDivElement>(null);\r\n  const lineHorizontalRef = useRef<HTMLDivElement>(null);\r\n  const lineVerticalRef = useRef<HTMLDivElement>(null);\r\n  const filterXRef = useRef<SVGFETurbulenceElement>(null);\r\n  const filterYRef = useRef<SVGFETurbulenceElement>(null);\r\n\r\n  let mouse = { x: 0, y: 0 };\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = (ev: Event) => {\r\n      const mouseEvent = ev as MouseEvent;\r\n      mouse = getMousePos(mouseEvent, containerRef?.current);\r\n      if (containerRef?.current) {\r\n        const bounds = containerRef.current.getBoundingClientRect();\r\n        if (\r\n          mouseEvent.clientX < bounds.left ||\r\n          mouseEvent.clientX > bounds.right ||\r\n          mouseEvent.clientY < bounds.top ||\r\n          mouseEvent.clientY > bounds.bottom\r\n        ) {\r\n          gsap.to([lineHorizontalRef.current, lineVerticalRef.current].filter(Boolean), { opacity: 0 });\r\n        } else {\r\n          gsap.to([lineHorizontalRef.current, lineVerticalRef.current].filter(Boolean), { opacity: 1 });\r\n        }\r\n      }\r\n    };\r\n\r\n    const target: HTMLElement | Window = containerRef?.current || window;\r\n    target.addEventListener('mousemove', handleMouseMove);\r\n\r\n    const renderedStyles: {\r\n      [key: string]: { previous: number; current: number; amt: number };\r\n    } = {\r\n      tx: { previous: 0, current: 0, amt: 0.15 },\r\n      ty: { previous: 0, current: 0, amt: 0.15 }\r\n    };\r\n\r\n    gsap.set([lineHorizontalRef.current, lineVerticalRef.current].filter(Boolean), { opacity: 0 });\r\n\r\n    const onMouseMove = (_ev: Event) => {\r\n      renderedStyles.tx.previous = renderedStyles.tx.current = mouse.x;\r\n      renderedStyles.ty.previous = renderedStyles.ty.current = mouse.y;\r\n\r\n      gsap.to([lineHorizontalRef.current, lineVerticalRef.current].filter(Boolean), {\r\n        duration: 0.9,\r\n        ease: 'Power3.easeOut',\r\n        opacity: 1\r\n      });\r\n\r\n      requestAnimationFrame(render);\r\n\r\n      target.removeEventListener('mousemove', onMouseMove);\r\n    };\r\n\r\n    target.addEventListener('mousemove', onMouseMove);\r\n\r\n    const primitiveValues = { turbulence: 0 };\r\n\r\n    const tl = gsap\r\n      .timeline({\r\n        paused: true,\r\n        onStart: () => {\r\n          if (lineHorizontalRef.current) {\r\n            lineHorizontalRef.current.style.filter = 'url(#filter-noise-x)';\r\n          }\r\n          if (lineVerticalRef.current) {\r\n            lineVerticalRef.current.style.filter = 'url(#filter-noise-y)';\r\n          }\r\n        },\r\n        onUpdate: () => {\r\n          if (filterXRef.current && filterYRef.current) {\r\n            filterXRef.current.setAttribute('baseFrequency', primitiveValues.turbulence.toString());\r\n            filterYRef.current.setAttribute('baseFrequency', primitiveValues.turbulence.toString());\r\n          }\r\n        },\r\n        onComplete: () => {\r\n          if (lineHorizontalRef.current && lineVerticalRef.current) {\r\n            lineHorizontalRef.current.style.filter = 'none';\r\n            lineVerticalRef.current.style.filter = 'none';\r\n          }\r\n        }\r\n      })\r\n      .to(primitiveValues, {\r\n        duration: 0.5,\r\n        ease: 'power1',\r\n        startAt: { turbulence: 1 },\r\n        turbulence: 0\r\n      });\r\n\r\n    const enter = () => tl.restart();\r\n    const leave = () => {\r\n      tl.progress(1).kill();\r\n    };\r\n\r\n    const render = () => {\r\n      renderedStyles.tx.current = mouse.x;\r\n      renderedStyles.ty.current = mouse.y;\r\n\r\n      for (const key in renderedStyles) {\r\n        const style = renderedStyles[key];\r\n        style.previous = lerp(style.previous, style.current, style.amt);\r\n      }\r\n\r\n      if (lineHorizontalRef.current && lineVerticalRef.current) {\r\n        gsap.set(lineVerticalRef.current, { x: renderedStyles.tx.previous });\r\n        gsap.set(lineHorizontalRef.current, { y: renderedStyles.ty.previous });\r\n      }\r\n\r\n      requestAnimationFrame(render);\r\n    };\r\n\r\n    const links: NodeListOf<HTMLAnchorElement> = containerRef?.current\r\n      ? containerRef.current.querySelectorAll('a')\r\n      : document.querySelectorAll('a');\r\n\r\n    links.forEach(link => {\r\n      link.addEventListener('mouseenter', enter);\r\n      link.addEventListener('mouseleave', leave);\r\n    });\r\n\r\n    return () => {\r\n      target.removeEventListener('mousemove', handleMouseMove);\r\n      target.removeEventListener('mousemove', onMouseMove);\r\n      links.forEach(link => {\r\n        link.removeEventListener('mouseenter', enter);\r\n        link.removeEventListener('mouseleave', leave);\r\n      });\r\n    };\r\n  }, [containerRef]);\r\n\r\n  return (\r\n    <div\r\n      ref={cursorRef}\r\n      className=\"cursor\"\r\n      style={{\r\n        position: containerRef ? 'absolute' : 'fixed',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        pointerEvents: 'none',\r\n        zIndex: 10000\r\n      }}\r\n    >\r\n      <svg\r\n        style={{\r\n          position: 'absolute',\r\n          left: 0,\r\n          top: 0,\r\n          width: '100%',\r\n          height: '100%'\r\n        }}\r\n      >\r\n        <defs>\r\n          <filter id=\"filter-noise-x\">\r\n            <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.000001\" numOctaves=\"1\" ref={filterXRef} />\r\n            <feDisplacementMap in=\"SourceGraphic\" scale=\"40\" />\r\n          </filter>\r\n          <filter id=\"filter-noise-y\">\r\n            <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.000001\" numOctaves=\"1\" ref={filterYRef} />\r\n            <feDisplacementMap in=\"SourceGraphic\" scale=\"40\" />\r\n          </filter>\r\n        </defs>\r\n      </svg>\r\n      <div\r\n        ref={lineHorizontalRef}\r\n        style={{\r\n          position: 'absolute',\r\n          width: '100%',\r\n          height: '1px',\r\n          background: color,\r\n          pointerEvents: 'none',\r\n          transform: 'translateY(50%)',\r\n          opacity: 0\r\n        }}\r\n      />\r\n      <div\r\n        ref={lineVerticalRef}\r\n        style={{\r\n          position: 'absolute',\r\n          height: '100%',\r\n          width: '1px',\r\n          background: color,\r\n          pointerEvents: 'none',\r\n          transform: 'translateX(50%)',\r\n          opacity: 0\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Crosshair;\r\n",
      "type": "registry:component"
    }
  ]
}