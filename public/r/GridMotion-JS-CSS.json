{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "GridMotion-JS-CSS",
  "type": "registry:block",
  "title": "GridMotion",
  "description": "Perspective moving grid lines based on cusror position.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/default/src/content/Backgrounds/GridMotion/GridMotion.jsx",
      "content": "import { useEffect, useRef } from 'react';\r\nimport { gsap } from 'gsap';\r\nimport './GridMotion.css';\r\n\r\nconst GridMotion = ({ items = [], gradientColor = 'black' }) => {\r\n  const gridRef = useRef(null);\r\n  const rowRefs = useRef([]);\r\n  const mouseXRef = useRef(window.innerWidth / 2);\r\n\r\n  const totalItems = 28;\r\n  const defaultItems = Array.from({ length: totalItems }, (_, index) => `Item ${index + 1}`);\r\n  const combinedItems = items.length > 0 ? items.slice(0, totalItems) : defaultItems;\r\n\r\n  useEffect(() => {\r\n    gsap.ticker.lagSmoothing(0);\r\n\r\n    const handleMouseMove = e => {\r\n      mouseXRef.current = e.clientX;\r\n    };\r\n\r\n    const updateMotion = () => {\r\n      const maxMoveAmount = 300;\r\n      const baseDuration = 0.8;\r\n      const inertiaFactors = [0.6, 0.4, 0.3, 0.2];\r\n\r\n      rowRefs.current.forEach((row, index) => {\r\n        if (row) {\r\n          const direction = index % 2 === 0 ? 1 : -1;\r\n          const moveAmount = ((mouseXRef.current / window.innerWidth) * maxMoveAmount - maxMoveAmount / 2) * direction;\r\n\r\n          gsap.to(row, {\r\n            x: moveAmount,\r\n            duration: baseDuration + inertiaFactors[index % inertiaFactors.length],\r\n            ease: 'power3.out',\r\n            overwrite: 'auto'\r\n          });\r\n        }\r\n      });\r\n    };\r\n\r\n    const removeAnimationLoop = gsap.ticker.add(updateMotion);\r\n\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n\r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      removeAnimationLoop();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"noscroll loading\" ref={gridRef}>\r\n      <section\r\n        className=\"intro\"\r\n        style={{\r\n          background: `radial-gradient(circle, ${gradientColor} 0%, transparent 100%)`\r\n        }}\r\n      >\r\n        <div className=\"gridMotion-container\">\r\n          {[...Array(4)].map((_, rowIndex) => (\r\n            <div key={rowIndex} className=\"row\" ref={el => (rowRefs.current[rowIndex] = el)}>\r\n              {[...Array(7)].map((_, itemIndex) => {\r\n                const content = combinedItems[rowIndex * 7 + itemIndex];\r\n                return (\r\n                  <div key={itemIndex} className=\"row__item\">\r\n                    <div className=\"row__item-inner\" style={{ backgroundColor: '#111' }}>\r\n                      {typeof content === 'string' && content.startsWith('http') ? (\r\n                        <div\r\n                          className=\"row__item-img\"\r\n                          style={{\r\n                            backgroundImage: `url(${content})`\r\n                          }}\r\n                        ></div>\r\n                      ) : (\r\n                        <div className=\"row__item-content\">{content}</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"fullview\"></div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GridMotion;\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Backgrounds/GridMotion/GridMotion.css",
      "content": ".noscroll {\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.intro {\r\n  width: 100%;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.intro::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-size: 250px;\r\n  pointer-events: none;\r\n  z-index: 4;\r\n}\r\n\r\n.gridMotion-container {\r\n  gap: 1rem;\r\n  flex: none;\r\n  position: relative;\r\n  width: 150vw;\r\n  height: 150vh;\r\n  display: grid;\r\n  grid-template-rows: repeat(4, 1fr);\r\n  grid-template-columns: 100%;\r\n  transform: rotate(-15deg);\r\n  transform-origin: center center;\r\n  z-index: 2;\r\n}\r\n\r\n.row {\r\n  display: grid;\r\n  gap: 1rem;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  will-change: transform, filter;\r\n}\r\n\r\n.row__item {\r\n  position: relative;\r\n}\r\n\r\n.row__item-inner {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  border-radius: 10px;\r\n  background-color: #111;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.row__item-img {\r\n  width: 100%;\r\n  height: 100%;\r\n  background-size: cover;\r\n  background-position: 50% 50%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n.row__item-content {\r\n  padding: 1rem;\r\n  text-align: center;\r\n  z-index: 1;\r\n}\r\n\r\n.fullview {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n.fullview .row__item-inner {\r\n  border-radius: 0px;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}