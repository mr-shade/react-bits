{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Folder-TS-TW",
  "type": "registry:block",
  "title": "Folder",
  "description": "Interactive folder opens to reveal nested content smooth motion.",
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Components/Folder/Folder.tsx",
      "content": "import React, { useState } from 'react';\r\n\r\ninterface FolderProps {\r\n  color?: string;\r\n  size?: number;\r\n  items?: React.ReactNode[];\r\n  className?: string;\r\n}\r\n\r\nconst darkenColor = (hex: string, percent: number): string => {\r\n  let color = hex.startsWith('#') ? hex.slice(1) : hex;\r\n  if (color.length === 3) {\r\n    color = color\r\n      .split('')\r\n      .map(c => c + c)\r\n      .join('');\r\n  }\r\n  const num = parseInt(color, 16);\r\n  let r = (num >> 16) & 0xff;\r\n  let g = (num >> 8) & 0xff;\r\n  let b = num & 0xff;\r\n  r = Math.max(0, Math.min(255, Math.floor(r * (1 - percent))));\r\n  g = Math.max(0, Math.min(255, Math.floor(g * (1 - percent))));\r\n  b = Math.max(0, Math.min(255, Math.floor(b * (1 - percent))));\r\n  return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase();\r\n};\r\n\r\nconst Folder: React.FC<FolderProps> = ({ color = '#5227FF', size = 1, items = [], className = '' }) => {\r\n  const maxItems = 3;\r\n  const papers = items.slice(0, maxItems);\r\n  while (papers.length < maxItems) {\r\n    papers.push(null);\r\n  }\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [paperOffsets, setPaperOffsets] = useState<{ x: number; y: number }[]>(\r\n    Array.from({ length: maxItems }, () => ({ x: 0, y: 0 }))\r\n  );\r\n\r\n  const folderBackColor = darkenColor(color, 0.08);\r\n  const paper1 = darkenColor('#ffffff', 0.1);\r\n  const paper2 = darkenColor('#ffffff', 0.05);\r\n  const paper3 = '#ffffff';\r\n\r\n  const handleClick = () => {\r\n    setOpen(prev => !prev);\r\n    if (open) {\r\n      setPaperOffsets(Array.from({ length: maxItems }, () => ({ x: 0, y: 0 })));\r\n    }\r\n  };\r\n\r\n  const handlePaperMouseMove = (e: React.MouseEvent<HTMLDivElement, MouseEvent>, index: number) => {\r\n    if (!open) return;\r\n    const rect = e.currentTarget.getBoundingClientRect();\r\n    const centerX = rect.left + rect.width / 2;\r\n    const centerY = rect.top + rect.height / 2;\r\n    const offsetX = (e.clientX - centerX) * 0.15;\r\n    const offsetY = (e.clientY - centerY) * 0.15;\r\n    setPaperOffsets(prev => {\r\n      const newOffsets = [...prev];\r\n      newOffsets[index] = { x: offsetX, y: offsetY };\r\n      return newOffsets;\r\n    });\r\n  };\r\n\r\n  const handlePaperMouseLeave = (e: React.MouseEvent<HTMLDivElement, MouseEvent>, index: number) => {\r\n    setPaperOffsets(prev => {\r\n      const newOffsets = [...prev];\r\n      newOffsets[index] = { x: 0, y: 0 };\r\n      return newOffsets;\r\n    });\r\n  };\r\n\r\n  const folderStyle: React.CSSProperties = {\r\n    '--folder-color': color,\r\n    '--folder-back-color': folderBackColor,\r\n    '--paper-1': paper1,\r\n    '--paper-2': paper2,\r\n    '--paper-3': paper3\r\n  } as React.CSSProperties;\r\n\r\n  const scaleStyle = { transform: `scale(${size})` };\r\n\r\n  const getOpenTransform = (index: number) => {\r\n    if (index === 0) return 'translate(-120%, -70%) rotate(-15deg)';\r\n    if (index === 1) return 'translate(10%, -70%) rotate(15deg)';\r\n    if (index === 2) return 'translate(-50%, -100%) rotate(5deg)';\r\n    return '';\r\n  };\r\n\r\n  return (\r\n    <div style={scaleStyle} className={className}>\r\n      <div\r\n        className={`group relative transition-all duration-200 ease-in cursor-pointer ${\r\n          !open ? 'hover:-translate-y-2' : ''\r\n        }`}\r\n        style={{\r\n          ...folderStyle,\r\n          transform: open ? 'translateY(-8px)' : undefined\r\n        }}\r\n        onClick={handleClick}\r\n      >\r\n        <div\r\n          className=\"relative w-[100px] h-[80px] rounded-tl-0 rounded-tr-[10px] rounded-br-[10px] rounded-bl-[10px]\"\r\n          style={{ backgroundColor: folderBackColor }}\r\n        >\r\n          <span\r\n            className=\"absolute z-0 bottom-[98%] left-0 w-[30px] h-[10px] rounded-tl-[5px] rounded-tr-[5px] rounded-bl-0 rounded-br-0\"\r\n            style={{ backgroundColor: folderBackColor }}\r\n          ></span>\r\n          {papers.map((item, i) => {\r\n            let sizeClasses = '';\r\n            if (i === 0) sizeClasses = open ? 'w-[70%] h-[80%]' : 'w-[70%] h-[80%]';\r\n            if (i === 1) sizeClasses = open ? 'w-[80%] h-[80%]' : 'w-[80%] h-[70%]';\r\n            if (i === 2) sizeClasses = open ? 'w-[90%] h-[80%]' : 'w-[90%] h-[60%]';\r\n\r\n            const transformStyle = open\r\n              ? `${getOpenTransform(i)} translate(${paperOffsets[i].x}px, ${paperOffsets[i].y}px)`\r\n              : undefined;\r\n\r\n            return (\r\n              <div\r\n                key={i}\r\n                onMouseMove={e => handlePaperMouseMove(e, i)}\r\n                onMouseLeave={e => handlePaperMouseLeave(e, i)}\r\n                className={`absolute z-20 bottom-[10%] left-1/2 transition-all duration-300 ease-in-out ${\r\n                  !open ? 'transform -translate-x-1/2 translate-y-[10%] group-hover:translate-y-0' : 'hover:scale-110'\r\n                } ${sizeClasses}`}\r\n                style={{\r\n                  ...(!open ? {} : { transform: transformStyle }),\r\n                  backgroundColor: i === 0 ? paper1 : i === 1 ? paper2 : paper3,\r\n                  borderRadius: '10px'\r\n                }}\r\n              >\r\n                {item}\r\n              </div>\r\n            );\r\n          })}\r\n          <div\r\n            className={`absolute z-30 w-full h-full origin-bottom transition-all duration-300 ease-in-out ${\r\n              !open ? 'group-hover:[transform:skew(15deg)_scaleY(0.6)]' : ''\r\n            }`}\r\n            style={{\r\n              backgroundColor: color,\r\n              borderRadius: '5px 10px 10px 10px',\r\n              ...(open && { transform: 'skew(15deg) scaleY(0.6)' })\r\n            }}\r\n          ></div>\r\n          <div\r\n            className={`absolute z-30 w-full h-full origin-bottom transition-all duration-300 ease-in-out ${\r\n              !open ? 'group-hover:[transform:skew(-15deg)_scaleY(0.6)]' : ''\r\n            }`}\r\n            style={{\r\n              backgroundColor: color,\r\n              borderRadius: '5px 10px 10px 10px',\r\n              ...(open && { transform: 'skew(-15deg) scaleY(0.6)' })\r\n            }}\r\n          ></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Folder;\r\n",
      "type": "registry:component"
    }
  ]
}