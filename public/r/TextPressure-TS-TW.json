{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "TextPressure-TS-TW",
  "type": "registry:block",
  "title": "TextPressure",
  "description": "Characters scale / warp interactively based on pointer pressure zone.",
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/TextAnimations/TextPressure/TextPressure.tsx",
      "content": "// Component ported from https://codepen.io/JuanFuentes/full/rgXKGQ\r\n\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\ninterface TextPressureProps {\r\n  text?: string;\r\n  fontFamily?: string;\r\n  fontUrl?: string;\r\n  width?: boolean;\r\n  weight?: boolean;\r\n  italic?: boolean;\r\n  alpha?: boolean;\r\n  flex?: boolean;\r\n  stroke?: boolean;\r\n  scale?: boolean;\r\n  textColor?: string;\r\n  strokeColor?: string;\r\n  strokeWidth?: number;\r\n  className?: string;\r\n  minFontSize?: number;\r\n}\r\n\r\nconst TextPressure: React.FC<TextPressureProps> = ({\r\n  text = 'Compressa',\r\n  fontFamily = 'Compressa VF',\r\n  fontUrl = 'https://res.cloudinary.com/dr6lvwubh/raw/upload/v1529908256/CompressaPRO-GX.woff2',\r\n  width = true,\r\n  weight = true,\r\n  italic = true,\r\n  alpha = false,\r\n  flex = true,\r\n  stroke = false,\r\n  scale = false,\r\n  textColor = '#FFFFFF',\r\n  strokeColor = '#FF0000',\r\n  strokeWidth = 2,\r\n  className = '',\r\n  minFontSize = 24\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n  const titleRef = useRef<HTMLHeadingElement | null>(null);\r\n  const spansRef = useRef<(HTMLSpanElement | null)[]>([]);\r\n\r\n  const mouseRef = useRef({ x: 0, y: 0 });\r\n  const cursorRef = useRef({ x: 0, y: 0 });\r\n\r\n  const [fontSize, setFontSize] = useState(minFontSize);\r\n  const [scaleY, setScaleY] = useState(1);\r\n  const [lineHeight, setLineHeight] = useState(1);\r\n\r\n  const chars = text.split('');\r\n\r\n  const dist = (a: { x: number; y: number }, b: { x: number; y: number }) => {\r\n    const dx = b.x - a.x;\r\n    const dy = b.y - a.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      cursorRef.current.x = e.clientX;\r\n      cursorRef.current.y = e.clientY;\r\n    };\r\n    const handleTouchMove = (e: TouchEvent) => {\r\n      const t = e.touches[0];\r\n      cursorRef.current.x = t.clientX;\r\n      cursorRef.current.y = t.clientY;\r\n    };\r\n\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    window.addEventListener('touchmove', handleTouchMove, { passive: false });\r\n\r\n    if (containerRef.current) {\r\n      const { left, top, width, height } = containerRef.current.getBoundingClientRect();\r\n      mouseRef.current.x = left + width / 2;\r\n      mouseRef.current.y = top + height / 2;\r\n      cursorRef.current.x = mouseRef.current.x;\r\n      cursorRef.current.y = mouseRef.current.y;\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      window.removeEventListener('touchmove', handleTouchMove);\r\n    };\r\n  }, []);\r\n\r\n  const setSize = () => {\r\n    if (!containerRef.current || !titleRef.current) return;\r\n\r\n    const { width: containerW, height: containerH } = containerRef.current.getBoundingClientRect();\r\n\r\n    let newFontSize = containerW / (chars.length / 2);\r\n    newFontSize = Math.max(newFontSize, minFontSize);\r\n\r\n    setFontSize(newFontSize);\r\n    setScaleY(1);\r\n    setLineHeight(1);\r\n\r\n    requestAnimationFrame(() => {\r\n      if (!titleRef.current) return;\r\n      const textRect = titleRef.current.getBoundingClientRect();\r\n\r\n      if (scale && textRect.height > 0) {\r\n        const yRatio = containerH / textRect.height;\r\n        setScaleY(yRatio);\r\n        setLineHeight(yRatio);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSize();\r\n    window.addEventListener('resize', setSize);\r\n    return () => window.removeEventListener('resize', setSize);\r\n  }, [scale, text]);\r\n\r\n  useEffect(() => {\r\n    let rafId: number;\r\n    const animate = () => {\r\n      mouseRef.current.x += (cursorRef.current.x - mouseRef.current.x) / 15;\r\n      mouseRef.current.y += (cursorRef.current.y - mouseRef.current.y) / 15;\r\n\r\n      if (titleRef.current) {\r\n        const titleRect = titleRef.current.getBoundingClientRect();\r\n        const maxDist = titleRect.width / 2;\r\n\r\n        spansRef.current.forEach(span => {\r\n          if (!span) return;\r\n\r\n          const rect = span.getBoundingClientRect();\r\n          const charCenter = {\r\n            x: rect.x + rect.width / 2,\r\n            y: rect.y + rect.height / 2\r\n          };\r\n\r\n          const d = dist(mouseRef.current, charCenter);\r\n\r\n          const getAttr = (distance: number, minVal: number, maxVal: number) => {\r\n            const val = maxVal - Math.abs((maxVal * distance) / maxDist);\r\n            return Math.max(minVal, val + minVal);\r\n          };\r\n\r\n          const wdth = width ? Math.floor(getAttr(d, 5, 200)) : 100;\r\n          const wght = weight ? Math.floor(getAttr(d, 100, 900)) : 400;\r\n          const italVal = italic ? getAttr(d, 0, 1).toFixed(2) : '0';\r\n          const alphaVal = alpha ? getAttr(d, 0, 1).toFixed(2) : '1';\r\n\r\n          span.style.opacity = alphaVal;\r\n          span.style.fontVariationSettings = `'wght' ${wght}, 'wdth' ${wdth}, 'ital' ${italVal}`;\r\n        });\r\n      }\r\n\r\n      rafId = requestAnimationFrame(animate);\r\n    };\r\n\r\n    animate();\r\n    return () => cancelAnimationFrame(rafId);\r\n  }, [width, weight, italic, alpha, chars.length]);\r\n\r\n  return (\r\n    <div ref={containerRef} className=\"relative w-full h-full overflow-hidden bg-transparent\">\r\n      <style>{`\r\n        @font-face {\r\n          font-family: '${fontFamily}';\r\n          src: url('${fontUrl}');\r\n          font-style: normal;\r\n        }\r\n        .stroke span {\r\n          position: relative;\r\n          color: ${textColor};\r\n        }\r\n        .stroke span::after {\r\n          content: attr(data-char);\r\n          position: absolute;\r\n          left: 0;\r\n          top: 0;\r\n          color: transparent;\r\n          z-index: -1;\r\n          -webkit-text-stroke-width: ${strokeWidth}px;\r\n          -webkit-text-stroke-color: ${strokeColor};\r\n        }\r\n      `}</style>\r\n\r\n      <h1\r\n        ref={titleRef}\r\n        className={`text-pressure-title ${className} ${\r\n          flex ? 'flex justify-between' : ''\r\n        } ${stroke ? 'stroke' : ''} uppercase text-center`}\r\n        style={{\r\n          fontFamily,\r\n          fontSize: fontSize,\r\n          lineHeight,\r\n          transform: `scale(1, ${scaleY})`,\r\n          transformOrigin: 'center top',\r\n          margin: 0,\r\n          fontWeight: 100,\r\n          color: stroke ? undefined : textColor\r\n        }}\r\n      >\r\n        {chars.map((char, i) => (\r\n          <span\r\n            key={i}\r\n            ref={el => {\r\n              spansRef.current[i] = el;\r\n            }}\r\n            data-char={char}\r\n            className=\"inline-block\"\r\n          >\r\n            {char}\r\n          </span>\r\n        ))}\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextPressure;\r\n",
      "type": "registry:component"
    }
  ]
}