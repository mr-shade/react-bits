{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Stepper-TS-TW",
  "type": "registry:block",
  "title": "Stepper",
  "description": "Animated multi-step progress indicator with active state transitions.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Components/Stepper/Stepper.tsx",
      "content": "import React, { useState, Children, useRef, useLayoutEffect, HTMLAttributes, ReactNode } from 'react';\r\nimport { motion, AnimatePresence, Variants } from 'motion/react';\r\n\r\ninterface StepperProps extends HTMLAttributes<HTMLDivElement> {\r\n  children: ReactNode;\r\n  initialStep?: number;\r\n  onStepChange?: (step: number) => void;\r\n  onFinalStepCompleted?: () => void;\r\n  stepCircleContainerClassName?: string;\r\n  stepContainerClassName?: string;\r\n  contentClassName?: string;\r\n  footerClassName?: string;\r\n  backButtonProps?: React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n  nextButtonProps?: React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n  backButtonText?: string;\r\n  nextButtonText?: string;\r\n  disableStepIndicators?: boolean;\r\n  renderStepIndicator?: (props: {\r\n    step: number;\r\n    currentStep: number;\r\n    onStepClick: (clicked: number) => void;\r\n  }) => ReactNode;\r\n}\r\n\r\nexport default function Stepper({\r\n  children,\r\n  initialStep = 1,\r\n  onStepChange = () => {},\r\n  onFinalStepCompleted = () => {},\r\n  stepCircleContainerClassName = '',\r\n  stepContainerClassName = '',\r\n  contentClassName = '',\r\n  footerClassName = '',\r\n  backButtonProps = {},\r\n  nextButtonProps = {},\r\n  backButtonText = 'Back',\r\n  nextButtonText = 'Continue',\r\n  disableStepIndicators = false,\r\n  renderStepIndicator,\r\n  ...rest\r\n}: StepperProps) {\r\n  const [currentStep, setCurrentStep] = useState<number>(initialStep);\r\n  const [direction, setDirection] = useState<number>(0);\r\n  const stepsArray = Children.toArray(children);\r\n  const totalSteps = stepsArray.length;\r\n  const isCompleted = currentStep > totalSteps;\r\n  const isLastStep = currentStep === totalSteps;\r\n\r\n  const updateStep = (newStep: number) => {\r\n    setCurrentStep(newStep);\r\n    if (newStep > totalSteps) {\r\n      onFinalStepCompleted();\r\n    } else {\r\n      onStepChange(newStep);\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    if (currentStep > 1) {\r\n      setDirection(-1);\r\n      updateStep(currentStep - 1);\r\n    }\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (!isLastStep) {\r\n      setDirection(1);\r\n      updateStep(currentStep + 1);\r\n    }\r\n  };\r\n\r\n  const handleComplete = () => {\r\n    setDirection(1);\r\n    updateStep(totalSteps + 1);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"flex min-h-full flex-1 flex-col items-center justify-center p-4 sm:aspect-[4/3] md:aspect-[2/1]\"\r\n      {...rest}\r\n    >\r\n      <div\r\n        className={`mx-auto w-full max-w-md rounded-4xl shadow-xl ${stepCircleContainerClassName}`}\r\n        style={{ border: '1px solid #222' }}\r\n      >\r\n        <div className={`${stepContainerClassName} flex w-full items-center p-8`}>\r\n          {stepsArray.map((_, index) => {\r\n            const stepNumber = index + 1;\r\n            const isNotLastStep = index < totalSteps - 1;\r\n            return (\r\n              <React.Fragment key={stepNumber}>\r\n                {renderStepIndicator ? (\r\n                  renderStepIndicator({\r\n                    step: stepNumber,\r\n                    currentStep,\r\n                    onStepClick: clicked => {\r\n                      setDirection(clicked > currentStep ? 1 : -1);\r\n                      updateStep(clicked);\r\n                    }\r\n                  })\r\n                ) : (\r\n                  <StepIndicator\r\n                    step={stepNumber}\r\n                    disableStepIndicators={disableStepIndicators}\r\n                    currentStep={currentStep}\r\n                    onClickStep={clicked => {\r\n                      setDirection(clicked > currentStep ? 1 : -1);\r\n                      updateStep(clicked);\r\n                    }}\r\n                  />\r\n                )}\r\n                {isNotLastStep && <StepConnector isComplete={currentStep > stepNumber} />}\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        <StepContentWrapper\r\n          isCompleted={isCompleted}\r\n          currentStep={currentStep}\r\n          direction={direction}\r\n          className={`space-y-2 px-8 ${contentClassName}`}\r\n        >\r\n          {stepsArray[currentStep - 1]}\r\n        </StepContentWrapper>\r\n\r\n        {!isCompleted && (\r\n          <div className={`px-8 pb-8 ${footerClassName}`}>\r\n            <div className={`mt-10 flex ${currentStep !== 1 ? 'justify-between' : 'justify-end'}`}>\r\n              {currentStep !== 1 && (\r\n                <button\r\n                  onClick={handleBack}\r\n                  className={`duration-350 rounded px-2 py-1 transition ${\r\n                    currentStep === 1\r\n                      ? 'pointer-events-none opacity-50 text-neutral-400'\r\n                      : 'text-neutral-400 hover:text-neutral-700'\r\n                  }`}\r\n                  {...backButtonProps}\r\n                >\r\n                  {backButtonText}\r\n                </button>\r\n              )}\r\n              <button\r\n                onClick={isLastStep ? handleComplete : handleNext}\r\n                className=\"duration-350 flex items-center justify-center rounded-full bg-green-500 py-1.5 px-3.5 font-medium tracking-tight text-white transition hover:bg-green-600 active:bg-green-700\"\r\n                {...nextButtonProps}\r\n              >\r\n                {isLastStep ? 'Complete' : nextButtonText}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface StepContentWrapperProps {\r\n  isCompleted: boolean;\r\n  currentStep: number;\r\n  direction: number;\r\n  children: ReactNode;\r\n  className?: string;\r\n}\r\n\r\nfunction StepContentWrapper({\r\n  isCompleted,\r\n  currentStep,\r\n  direction,\r\n  children,\r\n  className = ''\r\n}: StepContentWrapperProps) {\r\n  const [parentHeight, setParentHeight] = useState<number>(0);\r\n\r\n  return (\r\n    <motion.div\r\n      style={{ position: 'relative', overflow: 'hidden' }}\r\n      animate={{ height: isCompleted ? 0 : parentHeight }}\r\n      transition={{ type: 'spring', duration: 0.4 }}\r\n      className={className}\r\n    >\r\n      <AnimatePresence initial={false} mode=\"sync\" custom={direction}>\r\n        {!isCompleted && (\r\n          <SlideTransition key={currentStep} direction={direction} onHeightReady={h => setParentHeight(h)}>\r\n            {children}\r\n          </SlideTransition>\r\n        )}\r\n      </AnimatePresence>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\ninterface SlideTransitionProps {\r\n  children: ReactNode;\r\n  direction: number;\r\n  onHeightReady: (height: number) => void;\r\n}\r\n\r\nfunction SlideTransition({ children, direction, onHeightReady }: SlideTransitionProps) {\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  useLayoutEffect(() => {\r\n    if (containerRef.current) {\r\n      onHeightReady(containerRef.current.offsetHeight);\r\n    }\r\n  }, [children, onHeightReady]);\r\n\r\n  return (\r\n    <motion.div\r\n      ref={containerRef}\r\n      custom={direction}\r\n      variants={stepVariants}\r\n      initial=\"enter\"\r\n      animate=\"center\"\r\n      exit=\"exit\"\r\n      transition={{ duration: 0.4 }}\r\n      style={{ position: 'absolute', left: 0, right: 0, top: 0 }}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nconst stepVariants: Variants = {\r\n  enter: (dir: number) => ({\r\n    x: dir >= 0 ? '-100%' : '100%',\r\n    opacity: 0\r\n  }),\r\n  center: {\r\n    x: '0%',\r\n    opacity: 1\r\n  },\r\n  exit: (dir: number) => ({\r\n    x: dir >= 0 ? '50%' : '-50%',\r\n    opacity: 0\r\n  })\r\n};\r\n\r\ninterface StepProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function Step({ children }: StepProps) {\r\n  return <div className=\"px-8\">{children}</div>;\r\n}\r\n\r\ninterface StepIndicatorProps {\r\n  step: number;\r\n  currentStep: number;\r\n  onClickStep: (clicked: number) => void;\r\n  disableStepIndicators?: boolean;\r\n}\r\n\r\nfunction StepIndicator({ step, currentStep, onClickStep, disableStepIndicators = false }: StepIndicatorProps) {\r\n  const status = currentStep === step ? 'active' : currentStep < step ? 'inactive' : 'complete';\r\n\r\n  const handleClick = () => {\r\n    if (step !== currentStep && !disableStepIndicators) {\r\n      onClickStep(step);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      onClick={handleClick}\r\n      className=\"relative cursor-pointer outline-none focus:outline-none\"\r\n      animate={status}\r\n      initial={false}\r\n    >\r\n      <motion.div\r\n        variants={{\r\n          inactive: { scale: 1, backgroundColor: '#222', color: '#a3a3a3' },\r\n          active: { scale: 1, backgroundColor: '#5227FF', color: '#5227FF' },\r\n          complete: { scale: 1, backgroundColor: '#5227FF', color: '#3b82f6' }\r\n        }}\r\n        transition={{ duration: 0.3 }}\r\n        className=\"flex h-8 w-8 items-center justify-center rounded-full font-semibold\"\r\n      >\r\n        {status === 'complete' ? (\r\n          <CheckIcon className=\"h-4 w-4 text-black\" />\r\n        ) : status === 'active' ? (\r\n          <div className=\"h-3 w-3 rounded-full bg-[#060010]\" />\r\n        ) : (\r\n          <span className=\"text-sm\">{step}</span>\r\n        )}\r\n      </motion.div>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\ninterface StepConnectorProps {\r\n  isComplete: boolean;\r\n}\r\n\r\nfunction StepConnector({ isComplete }: StepConnectorProps) {\r\n  const lineVariants: Variants = {\r\n    incomplete: { width: 0, backgroundColor: 'transparent' },\r\n    complete: { width: '100%', backgroundColor: '#5227FF' }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative mx-2 h-0.5 flex-1 overflow-hidden rounded bg-neutral-600\">\r\n      <motion.div\r\n        className=\"absolute left-0 top-0 h-full\"\r\n        variants={lineVariants}\r\n        initial={false}\r\n        animate={isComplete ? 'complete' : 'incomplete'}\r\n        transition={{ duration: 0.4 }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface CheckIconProps extends React.SVGProps<SVGSVGElement> {}\r\n\r\nfunction CheckIcon(props: CheckIconProps) {\r\n  return (\r\n    <svg {...props} fill=\"none\" stroke=\"currentColor\" strokeWidth={2} viewBox=\"0 0 24 24\">\r\n      <motion.path\r\n        initial={{ pathLength: 0 }}\r\n        animate={{ pathLength: 1 }}\r\n        transition={{\r\n          delay: 0.1,\r\n          type: 'tween',\r\n          ease: 'easeOut',\r\n          duration: 0.3\r\n        }}\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        d=\"M5 13l4 4L19 7\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}