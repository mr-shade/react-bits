{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "CircularGallery-JS-TW",
  "type": "registry:block",
  "title": "CircularGallery",
  "description": "Circular orbit gallery rotating images.",
  "dependencies": [
    "ogl"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Components/CircularGallery/CircularGallery.jsx",
      "content": "import { Camera, Mesh, Plane, Program, Renderer, Texture, Transform } from 'ogl';\r\nimport { useEffect, useRef } from 'react';\r\n\r\nfunction debounce(func, wait) {\r\n  let timeout;\r\n  return function (...args) {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func.apply(this, args), wait);\r\n  };\r\n}\r\n\r\nfunction lerp(p1, p2, t) {\r\n  return p1 + (p2 - p1) * t;\r\n}\r\n\r\nfunction autoBind(instance) {\r\n  const proto = Object.getPrototypeOf(instance);\r\n  Object.getOwnPropertyNames(proto).forEach(key => {\r\n    if (key !== 'constructor' && typeof instance[key] === 'function') {\r\n      instance[key] = instance[key].bind(instance);\r\n    }\r\n  });\r\n}\r\n\r\nfunction createTextTexture(gl, text, font = 'bold 30px monospace', color = 'black') {\r\n  const canvas = document.createElement('canvas');\r\n  const context = canvas.getContext('2d');\r\n  context.font = font;\r\n  const metrics = context.measureText(text);\r\n  const textWidth = Math.ceil(metrics.width);\r\n  const textHeight = Math.ceil(parseInt(font, 10) * 1.2);\r\n  canvas.width = textWidth + 20;\r\n  canvas.height = textHeight + 20;\r\n  context.font = font;\r\n  context.fillStyle = color;\r\n  context.textBaseline = 'middle';\r\n  context.textAlign = 'center';\r\n  context.clearRect(0, 0, canvas.width, canvas.height);\r\n  context.fillText(text, canvas.width / 2, canvas.height / 2);\r\n  const texture = new Texture(gl, { generateMipmaps: false });\r\n  texture.image = canvas;\r\n  return { texture, width: canvas.width, height: canvas.height };\r\n}\r\n\r\nclass Title {\r\n  constructor({ gl, plane, renderer, text, textColor = '#545050', font = '30px sans-serif' }) {\r\n    autoBind(this);\r\n    this.gl = gl;\r\n    this.plane = plane;\r\n    this.renderer = renderer;\r\n    this.text = text;\r\n    this.textColor = textColor;\r\n    this.font = font;\r\n    this.createMesh();\r\n  }\r\n  createMesh() {\r\n    const { texture, width, height } = createTextTexture(this.gl, this.text, this.font, this.textColor);\r\n    const geometry = new Plane(this.gl);\r\n    const program = new Program(this.gl, {\r\n      vertex: `\r\n        attribute vec3 position;\r\n        attribute vec2 uv;\r\n        uniform mat4 modelViewMatrix;\r\n        uniform mat4 projectionMatrix;\r\n        varying vec2 vUv;\r\n        void main() {\r\n          vUv = uv;\r\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n        }\r\n      `,\r\n      fragment: `\r\n        precision highp float;\r\n        uniform sampler2D tMap;\r\n        varying vec2 vUv;\r\n        void main() {\r\n          vec4 color = texture2D(tMap, vUv);\r\n          if (color.a < 0.1) discard;\r\n          gl_FragColor = color;\r\n        }\r\n      `,\r\n      uniforms: { tMap: { value: texture } },\r\n      transparent: true\r\n    });\r\n    this.mesh = new Mesh(this.gl, { geometry, program });\r\n    const aspect = width / height;\r\n    const textHeight = this.plane.scale.y * 0.15;\r\n    const textWidth = textHeight * aspect;\r\n    this.mesh.scale.set(textWidth, textHeight, 1);\r\n    this.mesh.position.y = -this.plane.scale.y * 0.5 - textHeight * 0.5 - 0.05;\r\n    this.mesh.setParent(this.plane);\r\n  }\r\n}\r\n\r\nclass Media {\r\n  constructor({\r\n    geometry,\r\n    gl,\r\n    image,\r\n    index,\r\n    length,\r\n    renderer,\r\n    scene,\r\n    screen,\r\n    text,\r\n    viewport,\r\n    bend,\r\n    textColor,\r\n    borderRadius = 0,\r\n    font\r\n  }) {\r\n    this.extra = 0;\r\n    this.geometry = geometry;\r\n    this.gl = gl;\r\n    this.image = image;\r\n    this.index = index;\r\n    this.length = length;\r\n    this.renderer = renderer;\r\n    this.scene = scene;\r\n    this.screen = screen;\r\n    this.text = text;\r\n    this.viewport = viewport;\r\n    this.bend = bend;\r\n    this.textColor = textColor;\r\n    this.borderRadius = borderRadius;\r\n    this.font = font;\r\n    this.createShader();\r\n    this.createMesh();\r\n    this.createTitle();\r\n    this.onResize();\r\n  }\r\n  createShader() {\r\n    const texture = new Texture(this.gl, {\r\n      generateMipmaps: true\r\n    });\r\n    this.program = new Program(this.gl, {\r\n      depthTest: false,\r\n      depthWrite: false,\r\n      vertex: `\r\n        precision highp float;\r\n        attribute vec3 position;\r\n        attribute vec2 uv;\r\n        uniform mat4 modelViewMatrix;\r\n        uniform mat4 projectionMatrix;\r\n        uniform float uTime;\r\n        uniform float uSpeed;\r\n        varying vec2 vUv;\r\n        void main() {\r\n          vUv = uv;\r\n          vec3 p = position;\r\n          p.z = (sin(p.x * 4.0 + uTime) * 1.5 + cos(p.y * 2.0 + uTime) * 1.5) * (0.1 + uSpeed * 0.5);\r\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(p, 1.0);\r\n        }\r\n      `,\r\n      fragment: `\r\n        precision highp float;\r\n        uniform vec2 uImageSizes;\r\n        uniform vec2 uPlaneSizes;\r\n        uniform sampler2D tMap;\r\n        uniform float uBorderRadius;\r\n        varying vec2 vUv;\r\n        \r\n        float roundedBoxSDF(vec2 p, vec2 b, float r) {\r\n          vec2 d = abs(p) - b;\r\n          return length(max(d, vec2(0.0))) + min(max(d.x, d.y), 0.0) - r;\r\n        }\r\n        \r\n        void main() {\r\n          vec2 ratio = vec2(\r\n            min((uPlaneSizes.x / uPlaneSizes.y) / (uImageSizes.x / uImageSizes.y), 1.0),\r\n            min((uPlaneSizes.y / uPlaneSizes.x) / (uImageSizes.y / uImageSizes.x), 1.0)\r\n          );\r\n          vec2 uv = vec2(\r\n            vUv.x * ratio.x + (1.0 - ratio.x) * 0.5,\r\n            vUv.y * ratio.y + (1.0 - ratio.y) * 0.5\r\n          );\r\n          vec4 color = texture2D(tMap, uv);\r\n          \r\n          float d = roundedBoxSDF(vUv - 0.5, vec2(0.5 - uBorderRadius), uBorderRadius);\r\n          \r\n          // Smooth antialiasing for edges\r\n          float edgeSmooth = 0.002;\r\n          float alpha = 1.0 - smoothstep(-edgeSmooth, edgeSmooth, d);\r\n          \r\n          gl_FragColor = vec4(color.rgb, alpha);\r\n        }\r\n      `,\r\n      uniforms: {\r\n        tMap: { value: texture },\r\n        uPlaneSizes: { value: [0, 0] },\r\n        uImageSizes: { value: [0, 0] },\r\n        uSpeed: { value: 0 },\r\n        uTime: { value: 100 * Math.random() },\r\n        uBorderRadius: { value: this.borderRadius }\r\n      },\r\n      transparent: true\r\n    });\r\n    const img = new Image();\r\n    img.crossOrigin = 'anonymous';\r\n    img.src = this.image;\r\n    img.onload = () => {\r\n      texture.image = img;\r\n      this.program.uniforms.uImageSizes.value = [img.naturalWidth, img.naturalHeight];\r\n    };\r\n  }\r\n  createMesh() {\r\n    this.plane = new Mesh(this.gl, {\r\n      geometry: this.geometry,\r\n      program: this.program\r\n    });\r\n    this.plane.setParent(this.scene);\r\n  }\r\n  createTitle() {\r\n    this.title = new Title({\r\n      gl: this.gl,\r\n      plane: this.plane,\r\n      renderer: this.renderer,\r\n      text: this.text,\r\n      textColor: this.textColor,\r\n      fontFamily: this.font\r\n    });\r\n  }\r\n  update(scroll, direction) {\r\n    this.plane.position.x = this.x - scroll.current - this.extra;\r\n\r\n    const x = this.plane.position.x;\r\n    const H = this.viewport.width / 2;\r\n\r\n    if (this.bend === 0) {\r\n      this.plane.position.y = 0;\r\n      this.plane.rotation.z = 0;\r\n    } else {\r\n      const B_abs = Math.abs(this.bend);\r\n      const R = (H * H + B_abs * B_abs) / (2 * B_abs);\r\n      const effectiveX = Math.min(Math.abs(x), H);\r\n\r\n      const arc = R - Math.sqrt(R * R - effectiveX * effectiveX);\r\n      if (this.bend > 0) {\r\n        this.plane.position.y = -arc;\r\n        this.plane.rotation.z = -Math.sign(x) * Math.asin(effectiveX / R);\r\n      } else {\r\n        this.plane.position.y = arc;\r\n        this.plane.rotation.z = Math.sign(x) * Math.asin(effectiveX / R);\r\n      }\r\n    }\r\n\r\n    this.speed = scroll.current - scroll.last;\r\n    this.program.uniforms.uTime.value += 0.04;\r\n    this.program.uniforms.uSpeed.value = this.speed;\r\n\r\n    const planeOffset = this.plane.scale.x / 2;\r\n    const viewportOffset = this.viewport.width / 2;\r\n    this.isBefore = this.plane.position.x + planeOffset < -viewportOffset;\r\n    this.isAfter = this.plane.position.x - planeOffset > viewportOffset;\r\n    if (direction === 'right' && this.isBefore) {\r\n      this.extra -= this.widthTotal;\r\n      this.isBefore = this.isAfter = false;\r\n    }\r\n    if (direction === 'left' && this.isAfter) {\r\n      this.extra += this.widthTotal;\r\n      this.isBefore = this.isAfter = false;\r\n    }\r\n  }\r\n  onResize({ screen, viewport } = {}) {\r\n    if (screen) this.screen = screen;\r\n    if (viewport) {\r\n      this.viewport = viewport;\r\n      if (this.plane.program.uniforms.uViewportSizes) {\r\n        this.plane.program.uniforms.uViewportSizes.value = [this.viewport.width, this.viewport.height];\r\n      }\r\n    }\r\n    this.scale = this.screen.height / 1500;\r\n    this.plane.scale.y = (this.viewport.height * (900 * this.scale)) / this.screen.height;\r\n    this.plane.scale.x = (this.viewport.width * (700 * this.scale)) / this.screen.width;\r\n    this.plane.program.uniforms.uPlaneSizes.value = [this.plane.scale.x, this.plane.scale.y];\r\n    this.padding = 2;\r\n    this.width = this.plane.scale.x + this.padding;\r\n    this.widthTotal = this.width * this.length;\r\n    this.x = this.width * this.index;\r\n  }\r\n}\r\n\r\nclass App {\r\n  constructor(\r\n    container,\r\n    {\r\n      items,\r\n      bend,\r\n      textColor = '#ffffff',\r\n      borderRadius = 0,\r\n      font = 'bold 30px Figtree',\r\n      scrollSpeed = 2,\r\n      scrollEase = 0.05\r\n    } = {}\r\n  ) {\r\n    document.documentElement.classList.remove('no-js');\r\n    this.container = container;\r\n    this.scrollSpeed = scrollSpeed;\r\n    this.scroll = { ease: scrollEase, current: 0, target: 0, last: 0 };\r\n    this.onCheckDebounce = debounce(this.onCheck, 200);\r\n    this.createRenderer();\r\n    this.createCamera();\r\n    this.createScene();\r\n    this.onResize();\r\n    this.createGeometry();\r\n    this.createMedias(items, bend, textColor, borderRadius, font);\r\n    this.update();\r\n    this.addEventListeners();\r\n  }\r\n  createRenderer() {\r\n    this.renderer = new Renderer({\r\n      alpha: true,\r\n      antialias: true,\r\n      dpr: Math.min(window.devicePixelRatio || 1, 2)\r\n    });\r\n    this.gl = this.renderer.gl;\r\n    this.gl.clearColor(0, 0, 0, 0);\r\n    this.container.appendChild(this.gl.canvas);\r\n  }\r\n  createCamera() {\r\n    this.camera = new Camera(this.gl);\r\n    this.camera.fov = 45;\r\n    this.camera.position.z = 20;\r\n  }\r\n  createScene() {\r\n    this.scene = new Transform();\r\n  }\r\n  createGeometry() {\r\n    this.planeGeometry = new Plane(this.gl, {\r\n      heightSegments: 50,\r\n      widthSegments: 100\r\n    });\r\n  }\r\n  createMedias(items, bend = 1, textColor, borderRadius, font) {\r\n    const defaultItems = [\r\n      { image: `https://picsum.photos/seed/1/800/600?grayscale`, text: 'Bridge' },\r\n      { image: `https://picsum.photos/seed/2/800/600?grayscale`, text: 'Desk Setup' },\r\n      { image: `https://picsum.photos/seed/3/800/600?grayscale`, text: 'Waterfall' },\r\n      { image: `https://picsum.photos/seed/4/800/600?grayscale`, text: 'Strawberries' },\r\n      { image: `https://picsum.photos/seed/5/800/600?grayscale`, text: 'Deep Diving' },\r\n      { image: `https://picsum.photos/seed/16/800/600?grayscale`, text: 'Train Track' },\r\n      { image: `https://picsum.photos/seed/17/800/600?grayscale`, text: 'Santorini' },\r\n      { image: `https://picsum.photos/seed/8/800/600?grayscale`, text: 'Blurry Lights' },\r\n      { image: `https://picsum.photos/seed/9/800/600?grayscale`, text: 'New York' },\r\n      { image: `https://picsum.photos/seed/10/800/600?grayscale`, text: 'Good Boy' },\r\n      { image: `https://picsum.photos/seed/21/800/600?grayscale`, text: 'Coastline' },\r\n      { image: `https://picsum.photos/seed/12/800/600?grayscale`, text: 'Palm Trees' }\r\n    ];\r\n    const galleryItems = items && items.length ? items : defaultItems;\r\n    this.mediasImages = galleryItems.concat(galleryItems);\r\n    this.medias = this.mediasImages.map((data, index) => {\r\n      return new Media({\r\n        geometry: this.planeGeometry,\r\n        gl: this.gl,\r\n        image: data.image,\r\n        index,\r\n        length: this.mediasImages.length,\r\n        renderer: this.renderer,\r\n        scene: this.scene,\r\n        screen: this.screen,\r\n        text: data.text,\r\n        viewport: this.viewport,\r\n        bend,\r\n        textColor,\r\n        borderRadius,\r\n        font\r\n      });\r\n    });\r\n  }\r\n  onTouchDown(e) {\r\n    this.isDown = true;\r\n    this.scroll.position = this.scroll.current;\r\n    this.start = e.touches ? e.touches[0].clientX : e.clientX;\r\n  }\r\n  onTouchMove(e) {\r\n    if (!this.isDown) return;\r\n    const x = e.touches ? e.touches[0].clientX : e.clientX;\r\n    const distance = (this.start - x) * (this.scrollSpeed * 0.025);\r\n    this.scroll.target = this.scroll.position + distance;\r\n  }\r\n  onTouchUp() {\r\n    this.isDown = false;\r\n    this.onCheck();\r\n  }\r\n  onWheel(e) {\r\n    const delta = e.deltaY || e.wheelDelta || e.detail;\r\n    this.scroll.target += (delta > 0 ? this.scrollSpeed : -this.scrollSpeed) * 0.2;\r\n    this.onCheckDebounce();\r\n  }\r\n  onCheck() {\r\n    if (!this.medias || !this.medias[0]) return;\r\n    const width = this.medias[0].width;\r\n    const itemIndex = Math.round(Math.abs(this.scroll.target) / width);\r\n    const item = width * itemIndex;\r\n    this.scroll.target = this.scroll.target < 0 ? -item : item;\r\n  }\r\n  onResize() {\r\n    this.screen = {\r\n      width: this.container.clientWidth,\r\n      height: this.container.clientHeight\r\n    };\r\n    this.renderer.setSize(this.screen.width, this.screen.height);\r\n    this.camera.perspective({\r\n      aspect: this.screen.width / this.screen.height\r\n    });\r\n    const fov = (this.camera.fov * Math.PI) / 180;\r\n    const height = 2 * Math.tan(fov / 2) * this.camera.position.z;\r\n    const width = height * this.camera.aspect;\r\n    this.viewport = { width, height };\r\n    if (this.medias) {\r\n      this.medias.forEach(media => media.onResize({ screen: this.screen, viewport: this.viewport }));\r\n    }\r\n  }\r\n  update() {\r\n    this.scroll.current = lerp(this.scroll.current, this.scroll.target, this.scroll.ease);\r\n    const direction = this.scroll.current > this.scroll.last ? 'right' : 'left';\r\n    if (this.medias) {\r\n      this.medias.forEach(media => media.update(this.scroll, direction));\r\n    }\r\n    this.renderer.render({ scene: this.scene, camera: this.camera });\r\n    this.scroll.last = this.scroll.current;\r\n    this.raf = window.requestAnimationFrame(this.update.bind(this));\r\n  }\r\n  addEventListeners() {\r\n    this.boundOnResize = this.onResize.bind(this);\r\n    this.boundOnWheel = this.onWheel.bind(this);\r\n    this.boundOnTouchDown = this.onTouchDown.bind(this);\r\n    this.boundOnTouchMove = this.onTouchMove.bind(this);\r\n    this.boundOnTouchUp = this.onTouchUp.bind(this);\r\n    window.addEventListener('resize', this.boundOnResize);\r\n    window.addEventListener('mousewheel', this.boundOnWheel);\r\n    window.addEventListener('wheel', this.boundOnWheel);\r\n    window.addEventListener('mousedown', this.boundOnTouchDown);\r\n    window.addEventListener('mousemove', this.boundOnTouchMove);\r\n    window.addEventListener('mouseup', this.boundOnTouchUp);\r\n    window.addEventListener('touchstart', this.boundOnTouchDown);\r\n    window.addEventListener('touchmove', this.boundOnTouchMove);\r\n    window.addEventListener('touchend', this.boundOnTouchUp);\r\n  }\r\n  destroy() {\r\n    window.cancelAnimationFrame(this.raf);\r\n    window.removeEventListener('resize', this.boundOnResize);\r\n    window.removeEventListener('mousewheel', this.boundOnWheel);\r\n    window.removeEventListener('wheel', this.boundOnWheel);\r\n    window.removeEventListener('mousedown', this.boundOnTouchDown);\r\n    window.removeEventListener('mousemove', this.boundOnTouchMove);\r\n    window.removeEventListener('mouseup', this.boundOnTouchUp);\r\n    window.removeEventListener('touchstart', this.boundOnTouchDown);\r\n    window.removeEventListener('touchmove', this.boundOnTouchMove);\r\n    window.removeEventListener('touchend', this.boundOnTouchUp);\r\n    if (this.renderer && this.renderer.gl && this.renderer.gl.canvas.parentNode) {\r\n      this.renderer.gl.canvas.parentNode.removeChild(this.renderer.gl.canvas);\r\n    }\r\n  }\r\n}\r\n\r\nexport default function CircularGallery({\r\n  items,\r\n  bend = 3,\r\n  textColor = '#ffffff',\r\n  borderRadius = 0.05,\r\n  font = 'bold 30px Figtree',\r\n  scrollSpeed = 2,\r\n  scrollEase = 0.05\r\n}) {\r\n  const containerRef = useRef(null);\r\n  useEffect(() => {\r\n    const app = new App(containerRef.current, { items, bend, textColor, borderRadius, font, scrollSpeed, scrollEase });\r\n    return () => {\r\n      app.destroy();\r\n    };\r\n  }, [items, bend, textColor, borderRadius, font, scrollSpeed, scrollEase]);\r\n  return <div className=\"w-full h-full overflow-hidden cursor-grab active:cursor-grabbing\" ref={containerRef} />;\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}