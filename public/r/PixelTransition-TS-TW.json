{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "PixelTransition-TS-TW",
  "type": "registry:block",
  "title": "PixelTransition",
  "description": "Pixel dissolve transition for content reveal on hover.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Animations/PixelTransition/PixelTransition.tsx",
      "content": "import React, { useRef, useEffect, useState, CSSProperties } from 'react';\r\nimport { gsap } from 'gsap';\r\n\r\ninterface PixelTransitionProps {\r\n  firstContent: React.ReactNode;\r\n  secondContent: React.ReactNode;\r\n  gridSize?: number;\r\n  pixelColor?: string;\r\n  animationStepDuration?: number;\r\n  className?: string;\r\n  style?: CSSProperties;\r\n  aspectRatio?: string;\r\n}\r\n\r\nconst PixelTransition: React.FC<PixelTransitionProps> = ({\r\n  firstContent,\r\n  secondContent,\r\n  gridSize = 7,\r\n  pixelColor = 'currentColor',\r\n  animationStepDuration = 0.3,\r\n  className = '',\r\n  style = {},\r\n  aspectRatio = '100%'\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n  const pixelGridRef = useRef<HTMLDivElement | null>(null);\r\n  const activeRef = useRef<HTMLDivElement | null>(null);\r\n  const delayedCallRef = useRef<gsap.core.Tween | null>(null);\r\n\r\n  const [isActive, setIsActive] = useState<boolean>(false);\r\n\r\n  const isTouchDevice =\r\n    'ontouchstart' in window || navigator.maxTouchPoints > 0 || window.matchMedia('(pointer: coarse)').matches;\r\n\r\n  useEffect(() => {\r\n    const pixelGridEl = pixelGridRef.current;\r\n    if (!pixelGridEl) return;\r\n\r\n    pixelGridEl.innerHTML = '';\r\n\r\n    for (let row = 0; row < gridSize; row++) {\r\n      for (let col = 0; col < gridSize; col++) {\r\n        const pixel = document.createElement('div');\r\n        pixel.classList.add('pixelated-image-card__pixel');\r\n        pixel.classList.add('absolute', 'hidden');\r\n        pixel.style.backgroundColor = pixelColor;\r\n\r\n        const size = 100 / gridSize;\r\n        pixel.style.width = `${size}%`;\r\n        pixel.style.height = `${size}%`;\r\n        pixel.style.left = `${col * size}%`;\r\n        pixel.style.top = `${row * size}%`;\r\n\r\n        pixelGridEl.appendChild(pixel);\r\n      }\r\n    }\r\n  }, [gridSize, pixelColor]);\r\n\r\n  const animatePixels = (activate: boolean): void => {\r\n    setIsActive(activate);\r\n\r\n    const pixelGridEl = pixelGridRef.current;\r\n    const activeEl = activeRef.current;\r\n    if (!pixelGridEl || !activeEl) return;\r\n\r\n    const pixels = pixelGridEl.querySelectorAll<HTMLDivElement>('.pixelated-image-card__pixel');\r\n    if (!pixels.length) return;\r\n\r\n    gsap.killTweensOf(pixels);\r\n    if (delayedCallRef.current) {\r\n      delayedCallRef.current.kill();\r\n    }\r\n\r\n    gsap.set(pixels, { display: 'none' });\r\n\r\n    const totalPixels = pixels.length;\r\n    const staggerDuration = animationStepDuration / totalPixels;\r\n\r\n    gsap.to(pixels, {\r\n      display: 'block',\r\n      duration: 0,\r\n      stagger: {\r\n        each: staggerDuration,\r\n        from: 'random'\r\n      }\r\n    });\r\n\r\n    delayedCallRef.current = gsap.delayedCall(animationStepDuration, () => {\r\n      activeEl.style.display = activate ? 'block' : 'none';\r\n      activeEl.style.pointerEvents = activate ? 'none' : '';\r\n    });\r\n\r\n    gsap.to(pixels, {\r\n      display: 'none',\r\n      duration: 0,\r\n      delay: animationStepDuration,\r\n      stagger: {\r\n        each: staggerDuration,\r\n        from: 'random'\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleMouseEnter = (): void => {\r\n    if (!isActive) animatePixels(true);\r\n  };\r\n  const handleMouseLeave = (): void => {\r\n    if (isActive) animatePixels(false);\r\n  };\r\n  const handleClick = (): void => {\r\n    animatePixels(!isActive);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={`\r\n        ${className}\r\n        bg-[#222]\r\n        text-white\r\n        rounded-[15px]\r\n        border-2\r\n        border-white\r\n        w-[300px]\r\n        max-w-full\r\n        relative\r\n        overflow-hidden\r\n      `}\r\n      style={style}\r\n      onMouseEnter={!isTouchDevice ? handleMouseEnter : undefined}\r\n      onMouseLeave={!isTouchDevice ? handleMouseLeave : undefined}\r\n      onClick={isTouchDevice ? handleClick : undefined}\r\n    >\r\n      <div style={{ paddingTop: aspectRatio }} />\r\n\r\n      <div className=\"absolute inset-0 w-full h-full\">{firstContent}</div>\r\n\r\n      <div ref={activeRef} className=\"absolute inset-0 w-full h-full z-[2]\" style={{ display: 'none' }}>\r\n        {secondContent}\r\n      </div>\r\n\r\n      <div ref={pixelGridRef} className=\"absolute inset-0 w-full h-full pointer-events-none z-[3]\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PixelTransition;\r\n",
      "type": "registry:component"
    }
  ]
}