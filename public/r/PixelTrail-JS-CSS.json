{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "PixelTrail-JS-CSS",
  "type": "registry:block",
  "title": "PixelTrail",
  "description": "Pixelated cursor trail emitting fading squares with retro digital feel.",
  "dependencies": [
    "@react-three/drei",
    "@react-three/fiber",
    "three"
  ],
  "files": [
    {
      "path": "public/default/src/content/Animations/PixelTrail/PixelTrail.jsx",
      "content": "/* eslint-disable react/no-unknown-property */\r\nimport { useMemo } from 'react';\r\nimport { Canvas, useThree } from '@react-three/fiber';\r\nimport { shaderMaterial, useTrailTexture } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\nimport './PixelTrail.css';\r\n\r\nconst GooeyFilter = ({ id = 'goo-filter', strength = 10 }) => {\r\n  return (\r\n    <svg className=\"goo-filter-container\">\r\n      <defs>\r\n        <filter id={id}>\r\n          <feGaussianBlur in=\"SourceGraphic\" stdDeviation={strength} result=\"blur\" />\r\n          <feColorMatrix in=\"blur\" type=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9\" result=\"goo\" />\r\n          <feComposite in=\"SourceGraphic\" in2=\"goo\" operator=\"atop\" />\r\n        </filter>\r\n      </defs>\r\n    </svg>\r\n  );\r\n};\r\n\r\nconst DotMaterial = shaderMaterial(\r\n  {\r\n    resolution: new THREE.Vector2(),\r\n    mouseTrail: null,\r\n    gridSize: 100,\r\n    pixelColor: new THREE.Color('#ffffff')\r\n  },\r\n  `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      gl_Position = vec4(position.xy, 0.0, 1.0);\r\n    }\r\n  `,\r\n  `\r\n    uniform vec2 resolution;\r\n    uniform sampler2D mouseTrail;\r\n    uniform float gridSize;\r\n    uniform vec3 pixelColor;\r\n\r\n    vec2 coverUv(vec2 uv) {\r\n      vec2 s = resolution.xy / max(resolution.x, resolution.y);\r\n      vec2 newUv = (uv - 0.5) * s + 0.5;\r\n      return clamp(newUv, 0.0, 1.0);\r\n    }\r\n\r\n    float sdfCircle(vec2 p, float r) {\r\n        return length(p - 0.5) - r;\r\n    }\r\n\r\n    void main() {\r\n      vec2 screenUv = gl_FragCoord.xy / resolution;\r\n      vec2 uv = coverUv(screenUv);\r\n\r\n      vec2 gridUv = fract(uv * gridSize);\r\n      vec2 gridUvCenter = (floor(uv * gridSize) + 0.5) / gridSize;\r\n\r\n      float trail = texture2D(mouseTrail, gridUvCenter).r;\r\n\r\n      gl_FragColor = vec4(pixelColor, trail);\r\n    }\r\n  `\r\n);\r\n\r\nfunction Scene({ gridSize, trailSize, maxAge, interpolate, easingFunction, pixelColor }) {\r\n  const size = useThree(s => s.size);\r\n  const viewport = useThree(s => s.viewport);\r\n\r\n  const dotMaterial = useMemo(() => new DotMaterial(), []);\r\n  dotMaterial.uniforms.pixelColor.value = new THREE.Color(pixelColor);\r\n\r\n  const [trail, onMove] = useTrailTexture({\r\n    size: 512,\r\n    radius: trailSize,\r\n    maxAge: maxAge,\r\n    interpolate: interpolate || 0.1,\r\n    ease: easingFunction || (x => x)\r\n  });\r\n\r\n  if (trail) {\r\n    trail.minFilter = THREE.NearestFilter;\r\n    trail.magFilter = THREE.NearestFilter;\r\n    trail.wrapS = THREE.ClampToEdgeWrapping;\r\n    trail.wrapT = THREE.ClampToEdgeWrapping;\r\n  }\r\n\r\n  const scale = Math.max(viewport.width, viewport.height) / 2;\r\n\r\n  return (\r\n    <mesh scale={[scale, scale, 1]} onPointerMove={onMove}>\r\n      <planeGeometry args={[2, 2]} />\r\n      <primitive\r\n        object={dotMaterial}\r\n        gridSize={gridSize}\r\n        resolution={[size.width * viewport.dpr, size.height * viewport.dpr]}\r\n        mouseTrail={trail}\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nexport default function PixelTrail({\r\n  gridSize = 40,\r\n  trailSize = 0.1,\r\n  maxAge = 250,\r\n  interpolate = 5,\r\n  easingFunction = x => x,\r\n  canvasProps = {},\r\n  glProps = {\r\n    antialias: false,\r\n    powerPreference: 'high-performance',\r\n    alpha: true\r\n  },\r\n  gooeyFilter,\r\n  color = '#ffffff',\r\n  className = ''\r\n}) {\r\n  return (\r\n    <>\r\n      {gooeyFilter && <GooeyFilter id={gooeyFilter.id} strength={gooeyFilter.strength} />}\r\n      <Canvas\r\n        {...canvasProps}\r\n        gl={glProps}\r\n        className={`pixel-canvas ${className}`}\r\n        style={gooeyFilter && { filter: `url(#${gooeyFilter.id})` }}\r\n      >\r\n        <Scene\r\n          gridSize={gridSize}\r\n          trailSize={trailSize}\r\n          maxAge={maxAge}\r\n          interpolate={interpolate}\r\n          easingFunction={easingFunction}\r\n          pixelColor={color}\r\n        />\r\n      </Canvas>\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Animations/PixelTrail/PixelTrail.css",
      "content": ".goo-filter-container {\r\n  position: absolute;\r\n  overflow: hidden;\r\n  z-index: 1;\r\n}\r\n\r\n.pixel-canvas {\r\n  position: absolute;\r\n  z-index: 1;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}