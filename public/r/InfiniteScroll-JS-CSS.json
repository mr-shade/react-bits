{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "InfiniteScroll-JS-CSS",
  "type": "registry:block",
  "title": "InfiniteScroll",
  "description": "Infinite scrolling container auto-loads content near viewport end.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/default/src/content/Components/InfiniteScroll/InfiniteScroll.jsx",
      "content": "import { useRef, useEffect } from 'react';\r\nimport { gsap } from 'gsap';\r\nimport { Observer } from 'gsap/Observer';\r\nimport './InfiniteScroll.css';\r\n\r\ngsap.registerPlugin(Observer);\r\n\r\nexport default function InfiniteScroll({\r\n  width = '30rem',\r\n  maxHeight = '100%',\r\n  negativeMargin = '-0.5em',\r\n  items = [],\r\n  itemMinHeight = 150,\r\n  isTilted = false,\r\n  tiltDirection = 'left',\r\n  autoplay = false,\r\n  autoplaySpeed = 0.5,\r\n  autoplayDirection = 'down',\r\n  pauseOnHover = false\r\n}) {\r\n  const wrapperRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n\r\n  const getTiltTransform = () => {\r\n    if (!isTilted) return 'none';\r\n    return tiltDirection === 'left'\r\n      ? 'rotateX(20deg) rotateZ(-20deg) skewX(20deg)'\r\n      : 'rotateX(20deg) rotateZ(20deg) skewX(-20deg)';\r\n  };\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    if (!container) return;\r\n    if (items.length === 0) return;\r\n\r\n    const divItems = gsap.utils.toArray(container.children);\r\n    if (!divItems.length) return;\r\n\r\n    const firstItem = divItems[0];\r\n    const itemStyle = getComputedStyle(firstItem);\r\n    const itemHeight = firstItem.offsetHeight;\r\n    const itemMarginTop = parseFloat(itemStyle.marginTop) || 0;\r\n    const totalItemHeight = itemHeight + itemMarginTop;\r\n    const totalHeight = itemHeight * items.length + itemMarginTop * (items.length - 1);\r\n\r\n    const wrapFn = gsap.utils.wrap(-totalHeight, totalHeight);\r\n\r\n    divItems.forEach((child, i) => {\r\n      const y = i * totalItemHeight;\r\n      gsap.set(child, { y });\r\n    });\r\n\r\n    const observer = Observer.create({\r\n      target: container,\r\n      type: 'wheel,touch,pointer',\r\n      preventDefault: true,\r\n      onPress: ({ target }) => {\r\n        target.style.cursor = 'grabbing';\r\n      },\r\n      onRelease: ({ target }) => {\r\n        target.style.cursor = 'grab';\r\n      },\r\n      onChange: ({ deltaY, isDragging, event }) => {\r\n        const d = event.type === 'wheel' ? -deltaY : deltaY;\r\n        const distance = isDragging ? d * 5 : d * 10;\r\n        divItems.forEach(child => {\r\n          gsap.to(child, {\r\n            duration: 0.5,\r\n            ease: 'expo.out',\r\n            y: `+=${distance}`,\r\n            modifiers: {\r\n              y: gsap.utils.unitize(wrapFn)\r\n            }\r\n          });\r\n        });\r\n      }\r\n    });\r\n\r\n    let rafId;\r\n    if (autoplay) {\r\n      const directionFactor = autoplayDirection === 'down' ? 1 : -1;\r\n      const speedPerFrame = autoplaySpeed * directionFactor;\r\n\r\n      const tick = () => {\r\n        divItems.forEach(child => {\r\n          gsap.set(child, {\r\n            y: `+=${speedPerFrame}`,\r\n            modifiers: {\r\n              y: gsap.utils.unitize(wrapFn)\r\n            }\r\n          });\r\n        });\r\n        rafId = requestAnimationFrame(tick);\r\n      };\r\n\r\n      rafId = requestAnimationFrame(tick);\r\n\r\n      if (pauseOnHover) {\r\n        const stopTicker = () => rafId && cancelAnimationFrame(rafId);\r\n        const startTicker = () => (rafId = requestAnimationFrame(tick));\r\n\r\n        container.addEventListener('mouseenter', stopTicker);\r\n        container.addEventListener('mouseleave', startTicker);\r\n\r\n        return () => {\r\n          observer.kill();\r\n          stopTicker();\r\n          container.removeEventListener('mouseenter', stopTicker);\r\n          container.removeEventListener('mouseleave', startTicker);\r\n        };\r\n      } else {\r\n        return () => {\r\n          observer.kill();\r\n          rafId && cancelAnimationFrame(rafId);\r\n        };\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      observer.kill();\r\n      if (rafId) cancelAnimationFrame(rafId);\r\n    };\r\n  }, [items, autoplay, autoplaySpeed, autoplayDirection, pauseOnHover, isTilted, tiltDirection, negativeMargin]);\r\n\r\n  return (\r\n    <>\r\n      <style>\r\n        {`\r\n        .infinite-scroll-wrapper {\r\n          max-height: ${maxHeight};\r\n        }\r\n\r\n        .infinite-scroll-container {\r\n          width: ${width};\r\n        }\r\n\r\n        .infinite-scroll-item {\r\n          height: ${itemMinHeight}px;\r\n          margin-top: ${negativeMargin};\r\n        }\r\n        `}\r\n      </style>\r\n\r\n      <div className=\"infinite-scroll-wrapper\" ref={wrapperRef}>\r\n        <div\r\n          className=\"infinite-scroll-container\"\r\n          ref={containerRef}\r\n          style={{\r\n            transform: getTiltTransform()\r\n          }}\r\n        >\r\n          {items.map((item, i) => (\r\n            <div className=\"infinite-scroll-item\" key={i}>\r\n              {item.content}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Components/InfiniteScroll/InfiniteScroll.css",
      "content": ".infinite-scroll-wrapper {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  overscroll-behavior: none;\r\n}\r\n\r\n.infinite-scroll-wrapper::before,\r\n.infinite-scroll-wrapper::after {\r\n  content: '';\r\n  position: absolute;\r\n  background: linear-gradient(var(--dir, to bottom), 060010, transparent);\r\n  height: 25%;\r\n  width: 100%;\r\n  z-index: 1;\r\n  pointer-events: none;\r\n}\r\n\r\n.infinite-scroll-wrapper::before {\r\n  top: 0;\r\n}\r\n\r\n.infinite-scroll-wrapper::after {\r\n  --dir: to top;\r\n  bottom: 0;\r\n}\r\n\r\n.infinite-scroll-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  overscroll-behavior: contain;\r\n  padding-inline: 1rem;\r\n  cursor: grab;\r\n  transform-origin: center center;\r\n}\r\n\r\n.infinite-scroll-item {\r\n  --accent-color: #ffffff;\r\n  border-radius: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 1rem;\r\n  font-size: 1.25rem;\r\n  font-weight: 600;\r\n  text-align: center;\r\n  border: 2px solid var(--accent-color);\r\n  user-select: none;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}