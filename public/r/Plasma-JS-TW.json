{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Plasma-JS-TW",
  "type": "registry:block",
  "title": "Plasma",
  "description": "Organic plasma gradients swirl + morph with smooth turbulence.",
  "dependencies": [
    "ogl"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Backgrounds/Plasma/Plasma.jsx",
      "content": "import { useEffect, useRef } from 'react';\r\nimport { Renderer, Program, Mesh, Triangle } from 'ogl';\r\n\r\nconst hexToRgb = hex => {\r\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  if (!result) return [1, 0.5, 0.2];\r\n  return [parseInt(result[1], 16) / 255, parseInt(result[2], 16) / 255, parseInt(result[3], 16) / 255];\r\n};\r\n\r\nconst vertex = `#version 300 es\r\nprecision highp float;\r\nin vec2 position;\r\nin vec2 uv;\r\nout vec2 vUv;\r\nvoid main() {\r\n  vUv = uv;\r\n  gl_Position = vec4(position, 0.0, 1.0);\r\n}\r\n`;\r\n\r\nconst fragment = `#version 300 es\r\nprecision highp float;\r\nuniform vec2 iResolution;\r\nuniform float iTime;\r\nuniform vec3 uCustomColor;\r\nuniform float uUseCustomColor;\r\nuniform float uSpeed;\r\nuniform float uDirection;\r\nuniform float uScale;\r\nuniform float uOpacity;\r\nuniform vec2 uMouse;\r\nuniform float uMouseInteractive;\r\nout vec4 fragColor;\r\n\r\nvoid mainImage(out vec4 o, vec2 C) {\r\n  vec2 center = iResolution.xy * 0.5;\r\n  C = (C - center) / uScale + center;\r\n  \r\n  vec2 mouseOffset = (uMouse - center) * 0.0002;\r\n  C += mouseOffset * length(C - center) * step(0.5, uMouseInteractive);\r\n  \r\n  float i, d, z, T = iTime * uSpeed * uDirection;\r\n  vec3 O, p, S;\r\n\r\n  for (vec2 r = iResolution.xy, Q; ++i < 60.; O += o.w/d*o.xyz) {\r\n    p = z*normalize(vec3(C-.5*r,r.y)); \r\n    p.z -= 4.; \r\n    S = p;\r\n    d = p.y-T;\r\n    \r\n    p.x += .4*(1.+p.y)*sin(d + p.x*0.1)*cos(.34*d + p.x*0.05); \r\n    Q = p.xz *= mat2(cos(p.y+vec4(0,11,33,0)-T)); \r\n    z+= d = abs(sqrt(length(Q*Q)) - .25*(5.+S.y))/3.+8e-4; \r\n    o = 1.+sin(S.y+p.z*.5+S.z-length(S-p)+vec4(2,1,0,8));\r\n  }\r\n  \r\n  o.xyz = tanh(O/1e4);\r\n}\r\n\r\nbool finite1(float x){ return !(isnan(x) || isinf(x)); }\r\nvec3 sanitize(vec3 c){\r\n  return vec3(\r\n    finite1(c.r) ? c.r : 0.0,\r\n    finite1(c.g) ? c.g : 0.0,\r\n    finite1(c.b) ? c.b : 0.0\r\n  );\r\n}\r\n\r\nvoid main() {\r\n  vec4 o = vec4(0.0);\r\n  mainImage(o, gl_FragCoord.xy);\r\n  vec3 rgb = sanitize(o.rgb);\r\n  \r\n  float intensity = (rgb.r + rgb.g + rgb.b) / 3.0;\r\n  vec3 customColor = intensity * uCustomColor;\r\n  vec3 finalColor = mix(rgb, customColor, step(0.5, uUseCustomColor));\r\n  \r\n  float alpha = length(rgb) * uOpacity;\r\n  fragColor = vec4(finalColor, alpha);\r\n}`;\r\n\r\nexport const Plasma = ({\r\n  color = '#ffffff',\r\n  speed = 1,\r\n  direction = 'forward',\r\n  scale = 1,\r\n  opacity = 1,\r\n  mouseInteractive = true\r\n}) => {\r\n  const containerRef = useRef(null);\r\n  const mousePos = useRef({ x: 0, y: 0 });\r\n\r\n  useEffect(() => {\r\n    if (!containerRef.current) return;\r\n\r\n    const useCustomColor = color ? 1.0 : 0.0;\r\n    const customColorRgb = color ? hexToRgb(color) : [1, 1, 1];\r\n\r\n    const directionMultiplier = direction === 'reverse' ? -1.0 : 1.0;\r\n\r\n    const renderer = new Renderer({\r\n      webgl: 2,\r\n      alpha: true,\r\n      antialias: false,\r\n      dpr: Math.min(window.devicePixelRatio || 1, 2)\r\n    });\r\n    const gl = renderer.gl;\r\n    const canvas = gl.canvas;\r\n    canvas.style.display = 'block';\r\n    canvas.style.width = '100%';\r\n    canvas.style.height = '100%';\r\n    containerRef.current.appendChild(canvas);\r\n\r\n    const geometry = new Triangle(gl);\r\n\r\n    const program = new Program(gl, {\r\n      vertex: vertex,\r\n      fragment: fragment,\r\n      uniforms: {\r\n        iTime: { value: 0 },\r\n        iResolution: { value: new Float32Array([1, 1]) },\r\n        uCustomColor: { value: new Float32Array(customColorRgb) },\r\n        uUseCustomColor: { value: useCustomColor },\r\n        uSpeed: { value: speed * 0.4 },\r\n        uDirection: { value: directionMultiplier },\r\n        uScale: { value: scale },\r\n        uOpacity: { value: opacity },\r\n        uMouse: { value: new Float32Array([0, 0]) },\r\n        uMouseInteractive: { value: mouseInteractive ? 1.0 : 0.0 }\r\n      }\r\n    });\r\n\r\n    const mesh = new Mesh(gl, { geometry, program });\r\n\r\n    const handleMouseMove = e => {\r\n      if (!mouseInteractive) return;\r\n      const rect = containerRef.current.getBoundingClientRect();\r\n      mousePos.current.x = e.clientX - rect.left;\r\n      mousePos.current.y = e.clientY - rect.top;\r\n      const mouseUniform = program.uniforms.uMouse.value;\r\n      mouseUniform[0] = mousePos.current.x;\r\n      mouseUniform[1] = mousePos.current.y;\r\n    };\r\n\r\n    if (mouseInteractive) {\r\n      containerRef.current.addEventListener('mousemove', handleMouseMove);\r\n    }\r\n\r\n    const setSize = () => {\r\n      const rect = containerRef.current.getBoundingClientRect();\r\n      const width = Math.max(1, Math.floor(rect.width));\r\n      const height = Math.max(1, Math.floor(rect.height));\r\n      renderer.setSize(width, height);\r\n      const res = program.uniforms.iResolution.value;\r\n      res[0] = gl.drawingBufferWidth;\r\n      res[1] = gl.drawingBufferHeight;\r\n    };\r\n\r\n    const ro = new ResizeObserver(setSize);\r\n    ro.observe(containerRef.current);\r\n    setSize();\r\n\r\n    let raf = 0;\r\n    const t0 = performance.now();\r\n    const loop = t => {\r\n      let timeValue = (t - t0) * 0.001;\r\n\r\n      if (direction === 'pingpong') {\r\n        const cycle = Math.sin(timeValue * 0.5) * directionMultiplier;\r\n        program.uniforms.uDirection.value = cycle;\r\n      }\r\n\r\n      program.uniforms.iTime.value = timeValue;\r\n      renderer.render({ scene: mesh });\r\n      raf = requestAnimationFrame(loop);\r\n    };\r\n    raf = requestAnimationFrame(loop);\r\n\r\n    return () => {\r\n      cancelAnimationFrame(raf);\r\n      ro.disconnect();\r\n      if (mouseInteractive && containerRef.current) {\r\n        containerRef.current.removeEventListener('mousemove', handleMouseMove);\r\n      }\r\n      try {\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        containerRef.current?.removeChild(canvas);\r\n      } catch {\r\n        console.warn('Canvas already removed from container');\r\n      }\r\n    };\r\n  }, [color, speed, direction, scale, opacity, mouseInteractive]);\r\n\r\n  return <div ref={containerRef} className=\"w-full h-full overflow-hidden relative\" />;\r\n};\r\n\r\nexport default Plasma;\r\n",
      "type": "registry:component"
    }
  ]
}