{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "TargetCursor-JS-CSS",
  "type": "registry:block",
  "title": "TargetCursor",
  "description": "A cursor follow animation with 4 corners that lock onto targets.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/default/src/content/Animations/TargetCursor/TargetCursor.jsx",
      "content": "import { useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport { gsap } from 'gsap';\r\nimport './TargetCursor.css';\r\n\r\nconst TargetCursor = ({ targetSelector = '.cursor-target', spinDuration = 2, hideDefaultCursor = true }) => {\r\n  const cursorRef = useRef(null);\r\n  const cornersRef = useRef(null);\r\n  const spinTl = useRef(null);\r\n  const dotRef = useRef(null);\r\n  const constants = useMemo(\r\n    () => ({\r\n      borderWidth: 3,\r\n      cornerSize: 12,\r\n      parallaxStrength: 0.00005\r\n    }),\r\n    []\r\n  );\r\n\r\n  const moveCursor = useCallback((x, y) => {\r\n    if (!cursorRef.current) return;\r\n    gsap.to(cursorRef.current, {\r\n      x,\r\n      y,\r\n      duration: 0.1,\r\n      ease: 'power3.out'\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!cursorRef.current) return;\r\n\r\n    const originalCursor = document.body.style.cursor;\r\n    if (hideDefaultCursor) {\r\n      document.body.style.cursor = 'none';\r\n    }\r\n\r\n    const cursor = cursorRef.current;\r\n    cornersRef.current = cursor.querySelectorAll('.target-cursor-corner');\r\n\r\n    let activeTarget = null;\r\n    let currentTargetMove = null;\r\n    let currentLeaveHandler = null;\r\n    let isAnimatingToTarget = false;\r\n    let resumeTimeout = null;\r\n\r\n    const cleanupTarget = target => {\r\n      if (currentTargetMove) {\r\n        target.removeEventListener('mousemove', currentTargetMove);\r\n      }\r\n      if (currentLeaveHandler) {\r\n        target.removeEventListener('mouseleave', currentLeaveHandler);\r\n      }\r\n      currentTargetMove = null;\r\n      currentLeaveHandler = null;\r\n    };\r\n\r\n    gsap.set(cursor, {\r\n      xPercent: -50,\r\n      yPercent: -50,\r\n      x: window.innerWidth / 2,\r\n      y: window.innerHeight / 2\r\n    });\r\n\r\n    const createSpinTimeline = () => {\r\n      if (spinTl.current) {\r\n        spinTl.current.kill();\r\n      }\r\n      spinTl.current = gsap\r\n        .timeline({ repeat: -1 })\r\n        .to(cursor, { rotation: '+=360', duration: spinDuration, ease: 'none' });\r\n    };\r\n\r\n    createSpinTimeline();\r\n\r\n    const moveHandler = e => moveCursor(e.clientX, e.clientY);\r\n    window.addEventListener('mousemove', moveHandler);\r\n\r\n    const scrollHandler = () => {\r\n      if (!activeTarget || !cursorRef.current) return;\r\n\r\n      const mouseX = gsap.getProperty(cursorRef.current, 'x');\r\n      const mouseY = gsap.getProperty(cursorRef.current, 'y');\r\n\r\n      const elementUnderMouse = document.elementFromPoint(mouseX, mouseY);\r\n      const isStillOverTarget =\r\n        elementUnderMouse &&\r\n        (elementUnderMouse === activeTarget || elementUnderMouse.closest(targetSelector) === activeTarget);\r\n\r\n      if (!isStillOverTarget) {\r\n        if (currentLeaveHandler) {\r\n          currentLeaveHandler();\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('scroll', scrollHandler, { passive: true });\r\n\r\n    //---------------------------------------------------------------\r\n    // This code for onclick animation\r\n\r\n    window.addEventListener('mousemove', moveHandler);\r\n    const mouseDownHandler = () => {\r\n      if (!dotRef.current) return;\r\n      gsap.to(dotRef.current, { scale: 0.7, duration: 0.3 });\r\n      gsap.to(cursorRef.current, { scale: 0.9, duration: 0.2 });\r\n    };\r\n\r\n    // Animate it back to its original size\r\n    const mouseUpHandler = () => {\r\n      if (!dotRef.current) return;\r\n      gsap.to(dotRef.current, { scale: 1, duration: 0.3 });\r\n      gsap.to(cursorRef.current, { scale: 1, duration: 0.2 });\r\n    };\r\n\r\n    window.addEventListener('mousedown', mouseDownHandler);\r\n    window.addEventListener('mouseup', mouseUpHandler);\r\n\r\n    //----------------------------------------------------------------\r\n    const enterHandler = e => {\r\n      const directTarget = e.target;\r\n\r\n      const allTargets = [];\r\n      let current = directTarget;\r\n      while (current && current !== document.body) {\r\n        if (current.matches(targetSelector)) {\r\n          allTargets.push(current);\r\n        }\r\n        current = current.parentElement;\r\n      }\r\n\r\n      const target = allTargets[0] || null;\r\n      if (!target || !cursorRef.current || !cornersRef.current) return;\r\n\r\n      if (activeTarget === target) return;\r\n\r\n      if (activeTarget) {\r\n        cleanupTarget(activeTarget);\r\n      }\r\n\r\n      if (resumeTimeout) {\r\n        clearTimeout(resumeTimeout);\r\n        resumeTimeout = null;\r\n      }\r\n\r\n      activeTarget = target;\r\n      const corners = Array.from(cornersRef.current);\r\n      corners.forEach(corner => {\r\n        gsap.killTweensOf(corner);\r\n      });\r\n\r\n      gsap.killTweensOf(cursorRef.current, 'rotation');\r\n      spinTl.current?.pause();\r\n\r\n      gsap.set(cursorRef.current, { rotation: 0 });\r\n\r\n      const updateCorners = (mouseX, mouseY) => {\r\n        const rect = target.getBoundingClientRect();\r\n        const cursorRect = cursorRef.current.getBoundingClientRect();\r\n\r\n        const cursorCenterX = cursorRect.left + cursorRect.width / 2;\r\n        const cursorCenterY = cursorRect.top + cursorRect.height / 2;\r\n\r\n        const [tlc, trc, brc, blc] = Array.from(cornersRef.current);\r\n\r\n        const { borderWidth, cornerSize, parallaxStrength } = constants;\r\n\r\n        let tlOffset = {\r\n          x: rect.left - cursorCenterX - borderWidth,\r\n          y: rect.top - cursorCenterY - borderWidth\r\n        };\r\n        let trOffset = {\r\n          x: rect.right - cursorCenterX + borderWidth - cornerSize,\r\n          y: rect.top - cursorCenterY - borderWidth\r\n        };\r\n        let brOffset = {\r\n          x: rect.right - cursorCenterX + borderWidth - cornerSize,\r\n          y: rect.bottom - cursorCenterY + borderWidth - cornerSize\r\n        };\r\n        let blOffset = {\r\n          x: rect.left - cursorCenterX - borderWidth,\r\n          y: rect.bottom - cursorCenterY + borderWidth - cornerSize\r\n        };\r\n\r\n        if (mouseX !== undefined && mouseY !== undefined) {\r\n          const targetCenterX = rect.left + rect.width / 2;\r\n          const targetCenterY = rect.top + rect.height / 2;\r\n          const mouseOffsetX = (mouseX - targetCenterX) * parallaxStrength;\r\n          const mouseOffsetY = (mouseY - targetCenterY) * parallaxStrength;\r\n\r\n          tlOffset.x += mouseOffsetX;\r\n          tlOffset.y += mouseOffsetY;\r\n          trOffset.x += mouseOffsetX;\r\n          trOffset.y += mouseOffsetY;\r\n          brOffset.x += mouseOffsetX;\r\n          brOffset.y += mouseOffsetY;\r\n          blOffset.x += mouseOffsetX;\r\n          blOffset.y += mouseOffsetY;\r\n        }\r\n\r\n        const tl = gsap.timeline();\r\n        const corners = [tlc, trc, brc, blc];\r\n        const offsets = [tlOffset, trOffset, brOffset, blOffset];\r\n\r\n        corners.forEach((corner, index) => {\r\n          tl.to(\r\n            corner,\r\n            {\r\n              x: offsets[index].x,\r\n              y: offsets[index].y,\r\n              duration: 0.2,\r\n              ease: 'power2.out'\r\n            },\r\n            0\r\n          );\r\n        });\r\n      };\r\n\r\n      isAnimatingToTarget = true;\r\n      updateCorners();\r\n\r\n      setTimeout(() => {\r\n        isAnimatingToTarget = false;\r\n      }, 1);\r\n\r\n      let moveThrottle = null;\r\n      const targetMove = ev => {\r\n        if (moveThrottle || isAnimatingToTarget) return;\r\n        moveThrottle = requestAnimationFrame(() => {\r\n          const mouseEvent = ev;\r\n          updateCorners(mouseEvent.clientX, mouseEvent.clientY);\r\n          moveThrottle = null;\r\n        });\r\n      };\r\n\r\n      const leaveHandler = () => {\r\n        activeTarget = null;\r\n        isAnimatingToTarget = false;\r\n\r\n        if (cornersRef.current) {\r\n          const corners = Array.from(cornersRef.current);\r\n          gsap.killTweensOf(corners);\r\n\r\n          const { cornerSize } = constants;\r\n          const positions = [\r\n            { x: -cornerSize * 1.5, y: -cornerSize * 1.5 },\r\n            { x: cornerSize * 0.5, y: -cornerSize * 1.5 },\r\n            { x: cornerSize * 0.5, y: cornerSize * 0.5 },\r\n            { x: -cornerSize * 1.5, y: cornerSize * 0.5 }\r\n          ];\r\n\r\n          const tl = gsap.timeline();\r\n          corners.forEach((corner, index) => {\r\n            tl.to(\r\n              corner,\r\n              {\r\n                x: positions[index].x,\r\n                y: positions[index].y,\r\n                duration: 0.3,\r\n                ease: 'power3.out'\r\n              },\r\n              0\r\n            );\r\n          });\r\n        }\r\n\r\n        resumeTimeout = setTimeout(() => {\r\n          if (!activeTarget && cursorRef.current && spinTl.current) {\r\n            const currentRotation = gsap.getProperty(cursorRef.current, 'rotation');\r\n            const normalizedRotation = currentRotation % 360;\r\n\r\n            spinTl.current.kill();\r\n            spinTl.current = gsap\r\n              .timeline({ repeat: -1 })\r\n              .to(cursorRef.current, { rotation: '+=360', duration: spinDuration, ease: 'none' });\r\n\r\n            gsap.to(cursorRef.current, {\r\n              rotation: normalizedRotation + 360,\r\n              duration: spinDuration * (1 - normalizedRotation / 360),\r\n              ease: 'none',\r\n              onComplete: () => {\r\n                spinTl.current?.restart();\r\n              }\r\n            });\r\n          }\r\n          resumeTimeout = null;\r\n        }, 50);\r\n\r\n        cleanupTarget(target);\r\n      };\r\n\r\n      currentTargetMove = targetMove;\r\n      currentLeaveHandler = leaveHandler;\r\n\r\n      target.addEventListener('mousemove', targetMove);\r\n      target.addEventListener('mouseleave', leaveHandler);\r\n    };\r\n\r\n    window.addEventListener('mouseover', enterHandler, { passive: true });\r\n\r\n    return () => {\r\n      window.removeEventListener('mousemove', moveHandler);\r\n      window.removeEventListener('mouseover', enterHandler);\r\n      window.removeEventListener('scroll', scrollHandler);\r\n\r\n      if (activeTarget) {\r\n        cleanupTarget(activeTarget);\r\n      }\r\n\r\n      console.log('Cleaning up TargetCursor');\r\n\r\n      spinTl.current?.kill();\r\n      document.body.style.cursor = originalCursor;\r\n    };\r\n  }, [targetSelector, spinDuration, moveCursor, constants, hideDefaultCursor]);\r\n\r\n  useEffect(() => {\r\n    if (!cursorRef.current || !spinTl.current) return;\r\n\r\n    if (spinTl.current.isActive()) {\r\n      spinTl.current.kill();\r\n      spinTl.current = gsap\r\n        .timeline({ repeat: -1 })\r\n        .to(cursorRef.current, { rotation: '+=360', duration: spinDuration, ease: 'none' });\r\n    }\r\n  }, [spinDuration]);\r\n\r\n  return (\r\n    <div ref={cursorRef} className=\"target-cursor-wrapper\">\r\n      <div ref={dotRef} className=\"target-cursor-dot\" />\r\n      <div className=\"target-cursor-corner corner-tl\" />\r\n      <div className=\"target-cursor-corner corner-tr\" />\r\n      <div className=\"target-cursor-corner corner-br\" />\r\n      <div className=\"target-cursor-corner corner-bl\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TargetCursor;\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Animations/TargetCursor/TargetCursor.css",
      "content": ".target-cursor-wrapper {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 0;\r\n  height: 0;\r\n  pointer-events: none;\r\n  z-index: 9999;\r\n  mix-blend-mode: difference;\r\n  transform: translate(-50%, -50%);\r\n}\r\n\r\n.target-cursor-dot {\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  width: 4px;\r\n  height: 4px;\r\n  background: #fff;\r\n  border-radius: 50%;\r\n  transform: translate(-50%, -50%);\r\n  will-change: transform;\r\n}\r\n\r\n.target-cursor-corner {\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  width: 12px;\r\n  height: 12px;\r\n  border: 3px solid #fff;\r\n  will-change: transform;\r\n}\r\n\r\n.corner-tl {\r\n  transform: translate(-150%, -150%);\r\n  border-right: none;\r\n  border-bottom: none;\r\n}\r\n\r\n.corner-tr {\r\n  transform: translate(50%, -150%);\r\n  border-left: none;\r\n  border-bottom: none;\r\n}\r\n\r\n.corner-br {\r\n  transform: translate(50%, 50%);\r\n  border-left: none;\r\n  border-top: none;\r\n}\r\n\r\n.corner-bl {\r\n  transform: translate(-150%, 50%);\r\n  border-right: none;\r\n  border-top: none;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}