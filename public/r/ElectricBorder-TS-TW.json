{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ElectricBorder-TS-TW",
  "type": "registry:block",
  "title": "ElectricBorder",
  "description": "Jittery electric energy border with animated arcs, glow and adjustable intensity.",
  "files": [
    {
      "path": "public/ts/tailwind/src/ts-tailwind/Animations/ElectricBorder/ElectricBorder.tsx",
      "content": "import React, { CSSProperties, PropsWithChildren, useEffect, useId, useLayoutEffect, useRef } from 'react';\r\n\r\ntype ElectricBorderProps = PropsWithChildren<{\r\n  color?: string;\r\n  speed?: number;\r\n  chaos?: number;\r\n  thickness?: number;\r\n  className?: string;\r\n  style?: CSSProperties;\r\n}>;\r\n\r\nfunction hexToRgba(hex: string, alpha = 1): string {\r\n  if (!hex) return `rgba(0,0,0,${alpha})`;\r\n  let h = hex.replace('#', '');\r\n  if (h.length === 3) {\r\n    h = h\r\n      .split('')\r\n      .map(c => c + c)\r\n      .join('');\r\n  }\r\n  const int = parseInt(h, 16);\r\n  const r = (int >> 16) & 255;\r\n  const g = (int >> 8) & 255;\r\n  const b = int & 255;\r\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\r\n}\r\n\r\nconst ElectricBorder: React.FC<ElectricBorderProps> = ({\r\n  children,\r\n  color = '#5227FF',\r\n  speed = 1,\r\n  chaos = 1,\r\n  thickness = 2,\r\n  className,\r\n  style\r\n}) => {\r\n  const rawId = useId().replace(/[:]/g, '');\r\n  const filterId = `turbulent-displace-${rawId}`;\r\n  const svgRef = useRef<SVGSVGElement | null>(null);\r\n  const rootRef = useRef<HTMLDivElement | null>(null);\r\n  const strokeRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const updateAnim = () => {\r\n    const svg = svgRef.current;\r\n    const host = rootRef.current;\r\n    if (!svg || !host) return;\r\n\r\n    if (strokeRef.current) {\r\n      strokeRef.current.style.filter = `url(#${filterId})`;\r\n    }\r\n\r\n    const width = Math.max(1, Math.round(host.clientWidth || host.getBoundingClientRect().width || 0));\r\n    const height = Math.max(1, Math.round(host.clientHeight || host.getBoundingClientRect().height || 0));\r\n\r\n    const dyAnims = Array.from(svg.querySelectorAll<SVGAnimateElement>('feOffset > animate[attributeName=\"dy\"]'));\r\n    if (dyAnims.length >= 2) {\r\n      dyAnims[0].setAttribute('values', `${height}; 0`);\r\n      dyAnims[1].setAttribute('values', `0; -${height}`);\r\n    }\r\n\r\n    const dxAnims = Array.from(svg.querySelectorAll<SVGAnimateElement>('feOffset > animate[attributeName=\"dx\"]'));\r\n    if (dxAnims.length >= 2) {\r\n      dxAnims[0].setAttribute('values', `${width}; 0`);\r\n      dxAnims[1].setAttribute('values', `0; -${width}`);\r\n    }\r\n\r\n    const baseDur = 6;\r\n    const dur = Math.max(0.001, baseDur / (speed || 1));\r\n    [...dyAnims, ...dxAnims].forEach(a => a.setAttribute('dur', `${dur}s`));\r\n\r\n    const disp = svg.querySelector('feDisplacementMap');\r\n    if (disp) disp.setAttribute('scale', String(30 * (chaos || 1)));\r\n\r\n    const filterEl = svg.querySelector<SVGFilterElement>(`#${CSS.escape(filterId)}`);\r\n    if (filterEl) {\r\n      filterEl.setAttribute('x', '-200%');\r\n      filterEl.setAttribute('y', '-200%');\r\n      filterEl.setAttribute('width', '500%');\r\n      filterEl.setAttribute('height', '500%');\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      [...dyAnims, ...dxAnims].forEach((a: any) => {\r\n        if (typeof a.beginElement === 'function') {\r\n          try {\r\n            a.beginElement();\r\n          } catch {}\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateAnim();\r\n  }, [speed, chaos]);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!rootRef.current) return;\r\n    const ro = new ResizeObserver(() => updateAnim());\r\n    ro.observe(rootRef.current);\r\n    updateAnim();\r\n    return () => ro.disconnect();\r\n  }, []);\r\n\r\n  const inheritRadius: CSSProperties = {\r\n    borderRadius: style?.borderRadius ?? 'inherit'\r\n  };\r\n\r\n  const strokeStyle: CSSProperties = {\r\n    ...inheritRadius,\r\n    borderWidth: thickness,\r\n    borderStyle: 'solid',\r\n    borderColor: color\r\n  };\r\n\r\n  const glow1Style: CSSProperties = {\r\n    ...inheritRadius,\r\n    borderWidth: thickness,\r\n    borderStyle: 'solid',\r\n    borderColor: hexToRgba(color, 0.6),\r\n    filter: `blur(${0.5 + thickness * 0.25}px)`,\r\n    opacity: 0.5\r\n  };\r\n\r\n  const glow2Style: CSSProperties = {\r\n    ...inheritRadius,\r\n    borderWidth: thickness,\r\n    borderStyle: 'solid',\r\n    borderColor: color,\r\n    filter: `blur(${2 + thickness * 0.5}px)`,\r\n    opacity: 0.5\r\n  };\r\n\r\n  const bgGlowStyle: CSSProperties = {\r\n    ...inheritRadius,\r\n    transform: 'scale(1.08)',\r\n    filter: 'blur(32px)',\r\n    opacity: 0.3,\r\n    zIndex: -1,\r\n    background: `linear-gradient(-30deg, ${hexToRgba(color, 0.8)}, transparent, ${color})`\r\n  };\r\n\r\n  return (\r\n    <div ref={rootRef} className={'relative isolate ' + (className ?? '')} style={style}>\r\n      <svg\r\n        ref={svgRef}\r\n        className=\"fixed -left-[10000px] -top-[10000px] w-[10px] h-[10px] opacity-[0.001] pointer-events-none\"\r\n        aria-hidden\r\n        focusable=\"false\"\r\n      >\r\n        <defs>\r\n          <filter id={filterId} colorInterpolationFilters=\"sRGB\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\r\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise1\" seed=\"1\" />\r\n            <feOffset in=\"noise1\" dx=\"0\" dy=\"0\" result=\"offsetNoise1\">\r\n              <animate attributeName=\"dy\" values=\"700; 0\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\r\n            </feOffset>\r\n\r\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise2\" seed=\"1\" />\r\n            <feOffset in=\"noise2\" dx=\"0\" dy=\"0\" result=\"offsetNoise2\">\r\n              <animate attributeName=\"dy\" values=\"0; -700\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\r\n            </feOffset>\r\n\r\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise1\" seed=\"2\" />\r\n            <feOffset in=\"noise1\" dx=\"0\" dy=\"0\" result=\"offsetNoise3\">\r\n              <animate attributeName=\"dx\" values=\"490; 0\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\r\n            </feOffset>\r\n\r\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise2\" seed=\"2\" />\r\n            <feOffset in=\"noise2\" dx=\"0\" dy=\"0\" result=\"offsetNoise4\">\r\n              <animate attributeName=\"dx\" values=\"0; -490\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\r\n            </feOffset>\r\n\r\n            <feComposite in=\"offsetNoise1\" in2=\"offsetNoise2\" result=\"part1\" />\r\n            <feComposite in=\"offsetNoise3\" in2=\"offsetNoise4\" result=\"part2\" />\r\n            <feBlend in=\"part1\" in2=\"part2\" mode=\"color-dodge\" result=\"combinedNoise\" />\r\n            <feDisplacementMap\r\n              in=\"SourceGraphic\"\r\n              in2=\"combinedNoise\"\r\n              scale=\"30\"\r\n              xChannelSelector=\"R\"\r\n              yChannelSelector=\"B\"\r\n            />\r\n          </filter>\r\n        </defs>\r\n      </svg>\r\n\r\n      <div className=\"absolute inset-0 pointer-events-none\" style={inheritRadius}>\r\n        <div ref={strokeRef} className=\"absolute inset-0 box-border\" style={strokeStyle} />\r\n        <div className=\"absolute inset-0 box-border\" style={glow1Style} />\r\n        <div className=\"absolute inset-0 box-border\" style={glow2Style} />\r\n        <div className=\"absolute inset-0\" style={bgGlowStyle} />\r\n      </div>\r\n\r\n      <div className=\"relative\" style={inheritRadius}>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ElectricBorder;\r\n",
      "type": "registry:component"
    }
  ]
}