{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Crosshair-JS-TW",
  "type": "registry:block",
  "title": "Crosshair",
  "description": "Custom crosshair cursor with tracking, and link hover effects.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Animations/Crosshair/Crosshair.jsx",
      "content": "import { useEffect, useRef } from 'react';\r\nimport { gsap } from 'gsap';\r\n\r\nconst lerp = (a, b, n) => (1 - n) * a + n * b;\r\n\r\nconst getMousePos = (e, container) => {\r\n  if (container) {\r\n    const bounds = container.getBoundingClientRect();\r\n    return {\r\n      x: e.clientX - bounds.left,\r\n      y: e.clientY - bounds.top\r\n    };\r\n  }\r\n  return { x: e.clientX, y: e.clientY };\r\n};\r\n\r\nconst Crosshair = ({ color = 'white', containerRef = null }) => {\r\n  const cursorRef = useRef(null);\r\n  const lineHorizontalRef = useRef(null);\r\n  const lineVerticalRef = useRef(null);\r\n  const filterXRef = useRef(null);\r\n  const filterYRef = useRef(null);\r\n\r\n  let mouse = { x: 0, y: 0 };\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = ev => {\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      mouse = getMousePos(ev, containerRef?.current);\r\n\r\n      if (containerRef?.current) {\r\n        const bounds = containerRef.current.getBoundingClientRect();\r\n        if (\r\n          ev.clientX < bounds.left ||\r\n          ev.clientX > bounds.right ||\r\n          ev.clientY < bounds.top ||\r\n          ev.clientY > bounds.bottom\r\n        ) {\r\n          gsap.to([lineHorizontalRef.current, lineVerticalRef.current], {\r\n            opacity: 0\r\n          });\r\n        } else {\r\n          gsap.to([lineHorizontalRef.current, lineVerticalRef.current], {\r\n            opacity: 1\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    const target = containerRef?.current || window;\r\n    target.addEventListener('mousemove', handleMouseMove);\r\n\r\n    const renderedStyles = {\r\n      tx: { previous: 0, current: 0, amt: 0.15 },\r\n      ty: { previous: 0, current: 0, amt: 0.15 }\r\n    };\r\n\r\n    gsap.set([lineHorizontalRef.current, lineVerticalRef.current], {\r\n      opacity: 0\r\n    });\r\n\r\n    const onMouseMove = () => {\r\n      renderedStyles.tx.previous = renderedStyles.tx.current = mouse.x;\r\n      renderedStyles.ty.previous = renderedStyles.ty.current = mouse.y;\r\n\r\n      gsap.to([lineHorizontalRef.current, lineVerticalRef.current], {\r\n        duration: 0.9,\r\n        ease: 'Power3.easeOut',\r\n        opacity: 1\r\n      });\r\n\r\n      requestAnimationFrame(render);\r\n\r\n      target.removeEventListener('mousemove', onMouseMove);\r\n    };\r\n\r\n    target.addEventListener('mousemove', onMouseMove);\r\n\r\n    const primitiveValues = { turbulence: 0 };\r\n\r\n    const tl = gsap\r\n      .timeline({\r\n        paused: true,\r\n        onStart: () => {\r\n          lineHorizontalRef.current.style.filter = `url(#filter-noise-x)`;\r\n          lineVerticalRef.current.style.filter = `url(#filter-noise-y)`;\r\n        },\r\n        onUpdate: () => {\r\n          filterXRef.current.setAttribute('baseFrequency', primitiveValues.turbulence);\r\n          filterYRef.current.setAttribute('baseFrequency', primitiveValues.turbulence);\r\n        },\r\n        onComplete: () => {\r\n          lineHorizontalRef.current.style.filter = lineVerticalRef.current.style.filter = 'none';\r\n        }\r\n      })\r\n      .to(primitiveValues, {\r\n        duration: 0.5,\r\n        ease: 'power1',\r\n        startAt: { turbulence: 1 },\r\n        turbulence: 0\r\n      });\r\n\r\n    const enter = () => tl.restart();\r\n    const leave = () => tl.progress(1).kill();\r\n\r\n    const render = () => {\r\n      renderedStyles.tx.current = mouse.x;\r\n      renderedStyles.ty.current = mouse.y;\r\n\r\n      for (const key in renderedStyles) {\r\n        renderedStyles[key].previous = lerp(\r\n          renderedStyles[key].previous,\r\n          renderedStyles[key].current,\r\n          renderedStyles[key].amt\r\n        );\r\n      }\r\n\r\n      gsap.set(lineVerticalRef.current, { x: renderedStyles.tx.previous });\r\n      gsap.set(lineHorizontalRef.current, { y: renderedStyles.ty.previous });\r\n\r\n      requestAnimationFrame(render);\r\n    };\r\n\r\n    const links = containerRef?.current ? containerRef.current.querySelectorAll('a') : document.querySelectorAll('a');\r\n\r\n    links.forEach(link => {\r\n      link.addEventListener('mouseenter', enter);\r\n      link.addEventListener('mouseleave', leave);\r\n    });\r\n\r\n    return () => {\r\n      target.removeEventListener('mousemove', handleMouseMove);\r\n      target.removeEventListener('mousemove', onMouseMove);\r\n      links.forEach(link => {\r\n        link.removeEventListener('mouseenter', enter);\r\n        link.removeEventListener('mouseleave', leave);\r\n      });\r\n    };\r\n  }, [containerRef]);\r\n\r\n  return (\r\n    <div\r\n      ref={cursorRef}\r\n      className={`${containerRef ? 'absolute' : 'fixed'} top-0 left-0 w-full h-full pointer-events-none z-[10000]`}\r\n    >\r\n      <svg className=\"absolute top-0 left-0 w-full h-full\">\r\n        <defs>\r\n          <filter id=\"filter-noise-x\">\r\n            <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.000001\" numOctaves=\"1\" ref={filterXRef} />\r\n            <feDisplacementMap in=\"SourceGraphic\" scale=\"40\" />\r\n          </filter>\r\n          <filter id=\"filter-noise-y\">\r\n            <feTurbulence type=\"fractalNoise\" baseFrequency=\"0.000001\" numOctaves=\"1\" ref={filterYRef} />\r\n            <feDisplacementMap in=\"SourceGraphic\" scale=\"40\" />\r\n          </filter>\r\n        </defs>\r\n      </svg>\r\n      <div\r\n        ref={lineHorizontalRef}\r\n        className={`absolute w-full h-px pointer-events-none opacity-0 transform translate-y-1/2`}\r\n        style={{ background: color }}\r\n      ></div>\r\n      <div\r\n        ref={lineVerticalRef}\r\n        className={`absolute h-full w-px pointer-events-none opacity-0 transform translate-x-1/2`}\r\n        style={{ background: color }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Crosshair;\r\n",
      "type": "registry:component"
    }
  ]
}