{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "LiquidChrome-JS-CSS",
  "type": "registry:block",
  "title": "LiquidChrome",
  "description": "Liquid metallic chrome shader with flowing reflective surface.",
  "dependencies": [
    "ogl"
  ],
  "files": [
    {
      "path": "public/default/src/content/Backgrounds/LiquidChrome/LiquidChrome.jsx",
      "content": "import { useRef, useEffect } from 'react';\r\nimport { Renderer, Program, Mesh, Triangle } from 'ogl';\r\n\r\nimport './LiquidChrome.css';\r\n\r\nexport const LiquidChrome = ({\r\n  baseColor = [0.1, 0.1, 0.1],\r\n  speed = 0.2,\r\n  amplitude = 0.3,\r\n  frequencyX = 3,\r\n  frequencyY = 3,\r\n  interactive = true,\r\n  ...props\r\n}) => {\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!containerRef.current) return;\r\n\r\n    const container = containerRef.current;\r\n    const renderer = new Renderer({ antialias: true });\r\n    const gl = renderer.gl;\r\n    gl.clearColor(1, 1, 1, 1);\r\n\r\n    const vertexShader = `\r\n      attribute vec2 position;\r\n      attribute vec2 uv;\r\n      varying vec2 vUv;\r\n      void main() {\r\n        vUv = uv;\r\n        gl_Position = vec4(position, 0.0, 1.0);\r\n      }\r\n    `;\r\n\r\n    const fragmentShader = `\r\n      precision highp float;\r\n      uniform float uTime;\r\n      uniform vec3 uResolution;\r\n      uniform vec3 uBaseColor;\r\n      uniform float uAmplitude;\r\n      uniform float uFrequencyX;\r\n      uniform float uFrequencyY;\r\n      uniform vec2 uMouse;\r\n      varying vec2 vUv;\r\n\r\n      vec4 renderImage(vec2 uvCoord) {\r\n          vec2 fragCoord = uvCoord * uResolution.xy;\r\n          vec2 uv = (2.0 * fragCoord - uResolution.xy) / min(uResolution.x, uResolution.y);\r\n\r\n          for (float i = 1.0; i < 10.0; i++){\r\n              uv.x += uAmplitude / i * cos(i * uFrequencyX * uv.y + uTime + uMouse.x * 3.14159);\r\n              uv.y += uAmplitude / i * cos(i * uFrequencyY * uv.x + uTime + uMouse.y * 3.14159);\r\n          }\r\n\r\n          vec2 diff = (uvCoord - uMouse);\r\n          float dist = length(diff);\r\n          float falloff = exp(-dist * 20.0);\r\n          float ripple = sin(10.0 * dist - uTime * 2.0) * 0.03;\r\n          uv += (diff / (dist + 0.0001)) * ripple * falloff;\r\n\r\n          vec3 color = uBaseColor / abs(sin(uTime - uv.y - uv.x));\r\n          return vec4(color, 1.0);\r\n      }\r\n\r\n      void main() {\r\n          vec4 col = vec4(0.0);\r\n          int samples = 0;\r\n          for (int i = -1; i <= 1; i++){\r\n              for (int j = -1; j <= 1; j++){\r\n                  vec2 offset = vec2(float(i), float(j)) * (1.0 / min(uResolution.x, uResolution.y));\r\n                  col += renderImage(vUv + offset);\r\n                  samples++;\r\n              }\r\n          }\r\n          gl_FragColor = col / float(samples);\r\n      }\r\n    `;\r\n\r\n    const geometry = new Triangle(gl);\r\n    const program = new Program(gl, {\r\n      vertex: vertexShader,\r\n      fragment: fragmentShader,\r\n      uniforms: {\r\n        uTime: { value: 0 },\r\n        uResolution: {\r\n          value: new Float32Array([gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height])\r\n        },\r\n        uBaseColor: { value: new Float32Array(baseColor) },\r\n        uAmplitude: { value: amplitude },\r\n        uFrequencyX: { value: frequencyX },\r\n        uFrequencyY: { value: frequencyY },\r\n        uMouse: { value: new Float32Array([0, 0]) }\r\n      }\r\n    });\r\n    const mesh = new Mesh(gl, { geometry, program });\r\n\r\n    function resize() {\r\n      const scale = 1;\r\n      renderer.setSize(container.offsetWidth * scale, container.offsetHeight * scale);\r\n      const resUniform = program.uniforms.uResolution.value;\r\n      resUniform[0] = gl.canvas.width;\r\n      resUniform[1] = gl.canvas.height;\r\n      resUniform[2] = gl.canvas.width / gl.canvas.height;\r\n    }\r\n    window.addEventListener('resize', resize);\r\n    resize();\r\n\r\n    function handleMouseMove(event) {\r\n      const rect = container.getBoundingClientRect();\r\n      const x = (event.clientX - rect.left) / rect.width;\r\n      const y = 1 - (event.clientY - rect.top) / rect.height;\r\n      const mouseUniform = program.uniforms.uMouse.value;\r\n      mouseUniform[0] = x;\r\n      mouseUniform[1] = y;\r\n    }\r\n\r\n    function handleTouchMove(event) {\r\n      if (event.touches.length > 0) {\r\n        const touch = event.touches[0];\r\n        const rect = container.getBoundingClientRect();\r\n        const x = (touch.clientX - rect.left) / rect.width;\r\n        const y = 1 - (touch.clientY - rect.top) / rect.height;\r\n        const mouseUniform = program.uniforms.uMouse.value;\r\n        mouseUniform[0] = x;\r\n        mouseUniform[1] = y;\r\n      }\r\n    }\r\n\r\n    if (interactive) {\r\n      container.addEventListener('mousemove', handleMouseMove);\r\n      container.addEventListener('touchmove', handleTouchMove);\r\n    }\r\n\r\n    let animationId;\r\n    function update(t) {\r\n      animationId = requestAnimationFrame(update);\r\n      program.uniforms.uTime.value = t * 0.001 * speed;\r\n      renderer.render({ scene: mesh });\r\n    }\r\n    animationId = requestAnimationFrame(update);\r\n\r\n    container.appendChild(gl.canvas);\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animationId);\r\n      window.removeEventListener('resize', resize);\r\n      if (interactive) {\r\n        container.removeEventListener('mousemove', handleMouseMove);\r\n        container.removeEventListener('touchmove', handleTouchMove);\r\n      }\r\n      if (gl.canvas.parentElement) {\r\n        gl.canvas.parentElement.removeChild(gl.canvas);\r\n      }\r\n      gl.getExtension('WEBGL_lose_context')?.loseContext();\r\n    };\r\n  }, [baseColor, speed, amplitude, frequencyX, frequencyY, interactive]);\r\n\r\n  return <div ref={containerRef} className=\"liquidChrome-container\" {...props} />;\r\n};\r\n\r\nexport default LiquidChrome;\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Backgrounds/LiquidChrome/LiquidChrome.css",
      "content": ".liquidChrome-container {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}