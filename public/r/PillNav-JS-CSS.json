{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "PillNav-JS-CSS",
  "type": "registry:block",
  "title": "PillNav",
  "description": "Minimal pill nav with sliding active highlight + smooth easing.",
  "dependencies": [
    "gsap",
    "react-router-dom"
  ],
  "files": [
    {
      "path": "public/default/src/content/Components/PillNav/PillNav.jsx",
      "content": "import { useEffect, useRef, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { gsap } from 'gsap';\r\nimport './PillNav.css';\r\n\r\nconst PillNav = ({\r\n  logo,\r\n  logoAlt = 'Logo',\r\n  items,\r\n  activeHref,\r\n  className = '',\r\n  ease = 'power3.easeOut',\r\n  baseColor = '#fff',\r\n  pillColor = '#060010',\r\n  hoveredPillTextColor = '#060010',\r\n  pillTextColor,\r\n  onMobileMenuClick,\r\n  initialLoadAnimation = true\r\n}) => {\r\n  const resolvedPillTextColor = pillTextColor ?? baseColor;\r\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\r\n  const circleRefs = useRef([]);\r\n  const tlRefs = useRef([]);\r\n  const activeTweenRefs = useRef([]);\r\n  const logoImgRef = useRef(null);\r\n  const logoTweenRef = useRef(null);\r\n  const hamburgerRef = useRef(null);\r\n  const mobileMenuRef = useRef(null);\r\n  const navItemsRef = useRef(null);\r\n  const logoRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const layout = () => {\r\n      circleRefs.current.forEach(circle => {\r\n        if (!circle?.parentElement) return;\r\n\r\n        const pill = circle.parentElement;\r\n        const rect = pill.getBoundingClientRect();\r\n        const { width: w, height: h } = rect;\r\n        const R = ((w * w) / 4 + h * h) / (2 * h);\r\n        const D = Math.ceil(2 * R) + 2;\r\n        const delta = Math.ceil(R - Math.sqrt(Math.max(0, R * R - (w * w) / 4))) + 1;\r\n        const originY = D - delta;\r\n\r\n        circle.style.width = `${D}px`;\r\n        circle.style.height = `${D}px`;\r\n        circle.style.bottom = `-${delta}px`;\r\n\r\n        gsap.set(circle, {\r\n          xPercent: -50,\r\n          scale: 0,\r\n          transformOrigin: `50% ${originY}px`\r\n        });\r\n\r\n        const label = pill.querySelector('.pill-label');\r\n        const white = pill.querySelector('.pill-label-hover');\r\n\r\n        if (label) gsap.set(label, { y: 0 });\r\n        if (white) gsap.set(white, { y: h + 12, opacity: 0 });\r\n\r\n        const index = circleRefs.current.indexOf(circle);\r\n        if (index === -1) return;\r\n\r\n        tlRefs.current[index]?.kill();\r\n        const tl = gsap.timeline({ paused: true });\r\n\r\n        tl.to(circle, { scale: 1.2, xPercent: -50, duration: 2, ease, overwrite: 'auto' }, 0);\r\n\r\n        if (label) {\r\n          tl.to(label, { y: -(h + 8), duration: 2, ease, overwrite: 'auto' }, 0);\r\n        }\r\n\r\n        if (white) {\r\n          gsap.set(white, { y: Math.ceil(h + 100), opacity: 0 });\r\n          tl.to(white, { y: 0, opacity: 1, duration: 2, ease, overwrite: 'auto' }, 0);\r\n        }\r\n\r\n        tlRefs.current[index] = tl;\r\n      });\r\n    };\r\n\r\n    layout();\r\n\r\n    const onResize = () => layout();\r\n    window.addEventListener('resize', onResize);\r\n\r\n    if (document.fonts?.ready) {\r\n      document.fonts.ready.then(layout).catch(() => {});\r\n    }\r\n\r\n    const menu = mobileMenuRef.current;\r\n    if (menu) {\r\n      gsap.set(menu, { visibility: 'hidden', opacity: 0, scaleY: 1 });\r\n    }\r\n\r\n    if (initialLoadAnimation) {\r\n      const logo = logoRef.current;\r\n      const navItems = navItemsRef.current;\r\n\r\n      if (logo) {\r\n        gsap.set(logo, { scale: 0 });\r\n        gsap.to(logo, {\r\n          scale: 1,\r\n          duration: 0.6,\r\n          ease\r\n        });\r\n      }\r\n\r\n      if (navItems) {\r\n        gsap.set(navItems, { width: 0, overflow: 'hidden' });\r\n        gsap.to(navItems, {\r\n          width: 'auto',\r\n          duration: 0.6,\r\n          ease\r\n        });\r\n      }\r\n    }\r\n\r\n    return () => window.removeEventListener('resize', onResize);\r\n  }, [items, ease, initialLoadAnimation]);\r\n\r\n  const handleEnter = i => {\r\n    const tl = tlRefs.current[i];\r\n    if (!tl) return;\r\n    activeTweenRefs.current[i]?.kill();\r\n    activeTweenRefs.current[i] = tl.tweenTo(tl.duration(), {\r\n      duration: 0.3,\r\n      ease,\r\n      overwrite: 'auto'\r\n    });\r\n  };\r\n\r\n  const handleLeave = i => {\r\n    const tl = tlRefs.current[i];\r\n    if (!tl) return;\r\n    activeTweenRefs.current[i]?.kill();\r\n    activeTweenRefs.current[i] = tl.tweenTo(0, {\r\n      duration: 0.2,\r\n      ease,\r\n      overwrite: 'auto'\r\n    });\r\n  };\r\n\r\n  const handleLogoEnter = () => {\r\n    const img = logoImgRef.current;\r\n    if (!img) return;\r\n    logoTweenRef.current?.kill();\r\n    gsap.set(img, { rotate: 0 });\r\n    logoTweenRef.current = gsap.to(img, {\r\n      rotate: 360,\r\n      duration: 0.2,\r\n      ease,\r\n      overwrite: 'auto'\r\n    });\r\n  };\r\n\r\n  const toggleMobileMenu = () => {\r\n    const newState = !isMobileMenuOpen;\r\n    setIsMobileMenuOpen(newState);\r\n\r\n    const hamburger = hamburgerRef.current;\r\n    const menu = mobileMenuRef.current;\r\n\r\n    if (hamburger) {\r\n      const lines = hamburger.querySelectorAll('.hamburger-line');\r\n      if (newState) {\r\n        gsap.to(lines[0], { rotation: 45, y: 3, duration: 0.3, ease });\r\n        gsap.to(lines[1], { rotation: -45, y: -3, duration: 0.3, ease });\r\n      } else {\r\n        gsap.to(lines[0], { rotation: 0, y: 0, duration: 0.3, ease });\r\n        gsap.to(lines[1], { rotation: 0, y: 0, duration: 0.3, ease });\r\n      }\r\n    }\r\n\r\n    if (menu) {\r\n      if (newState) {\r\n        gsap.set(menu, { visibility: 'visible' });\r\n        gsap.fromTo(\r\n          menu,\r\n          { opacity: 0, y: 10, scaleY: 1 },\r\n          {\r\n            opacity: 1,\r\n            y: 0,\r\n            scaleY: 1,\r\n            duration: 0.3,\r\n            ease,\r\n            transformOrigin: 'top center'\r\n          }\r\n        );\r\n      } else {\r\n        gsap.to(menu, {\r\n          opacity: 0,\r\n          y: 10,\r\n          scaleY: 1,\r\n          duration: 0.2,\r\n          ease,\r\n          transformOrigin: 'top center',\r\n          onComplete: () => {\r\n            gsap.set(menu, { visibility: 'hidden' });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    onMobileMenuClick?.();\r\n  };\r\n\r\n  const isExternalLink = href =>\r\n    href.startsWith('http://') ||\r\n    href.startsWith('https://') ||\r\n    href.startsWith('//') ||\r\n    href.startsWith('mailto:') ||\r\n    href.startsWith('tel:') ||\r\n    href.startsWith('#');\r\n\r\n  const isRouterLink = href => href && !isExternalLink(href);\r\n\r\n  const cssVars = {\r\n    ['--base']: baseColor,\r\n    ['--pill-bg']: pillColor,\r\n    ['--hover-text']: hoveredPillTextColor,\r\n    ['--pill-text']: resolvedPillTextColor\r\n  };\r\n\r\n  return (\r\n    <div className=\"pill-nav-container\">\r\n      <nav className={`pill-nav ${className}`} aria-label=\"Primary\" style={cssVars}>\r\n        {isRouterLink(items?.[0]?.href) ? (\r\n          <Link\r\n            className=\"pill-logo\"\r\n            to={items[0].href}\r\n            aria-label=\"Home\"\r\n            onMouseEnter={handleLogoEnter}\r\n            role=\"menuitem\"\r\n            ref={el => {\r\n              logoRef.current = el;\r\n            }}\r\n          >\r\n            <img src={logo} alt={logoAlt} ref={logoImgRef} />\r\n          </Link>\r\n        ) : (\r\n          <a\r\n            className=\"pill-logo\"\r\n            href={items?.[0]?.href || '#'}\r\n            aria-label=\"Home\"\r\n            onMouseEnter={handleLogoEnter}\r\n            ref={el => {\r\n              logoRef.current = el;\r\n            }}\r\n          >\r\n            <img src={logo} alt={logoAlt} ref={logoImgRef} />\r\n          </a>\r\n        )}\r\n\r\n        <div className=\"pill-nav-items desktop-only\" ref={navItemsRef}>\r\n          <ul className=\"pill-list\" role=\"menubar\">\r\n            {items.map((item, i) => (\r\n              <li key={item.href || `item-${i}`} role=\"none\">\r\n                {isRouterLink(item.href) ? (\r\n                  <Link\r\n                    role=\"menuitem\"\r\n                    to={item.href}\r\n                    className={`pill${activeHref === item.href ? ' is-active' : ''}`}\r\n                    aria-label={item.ariaLabel || item.label}\r\n                    onMouseEnter={() => handleEnter(i)}\r\n                    onMouseLeave={() => handleLeave(i)}\r\n                  >\r\n                    <span\r\n                      className=\"hover-circle\"\r\n                      aria-hidden=\"true\"\r\n                      ref={el => {\r\n                        circleRefs.current[i] = el;\r\n                      }}\r\n                    />\r\n                    <span className=\"label-stack\">\r\n                      <span className=\"pill-label\">{item.label}</span>\r\n                      <span className=\"pill-label-hover\" aria-hidden=\"true\">\r\n                        {item.label}\r\n                      </span>\r\n                    </span>\r\n                  </Link>\r\n                ) : (\r\n                  <a\r\n                    role=\"menuitem\"\r\n                    href={item.href}\r\n                    className={`pill${activeHref === item.href ? ' is-active' : ''}`}\r\n                    aria-label={item.ariaLabel || item.label}\r\n                    onMouseEnter={() => handleEnter(i)}\r\n                    onMouseLeave={() => handleLeave(i)}\r\n                  >\r\n                    <span\r\n                      className=\"hover-circle\"\r\n                      aria-hidden=\"true\"\r\n                      ref={el => {\r\n                        circleRefs.current[i] = el;\r\n                      }}\r\n                    />\r\n                    <span className=\"label-stack\">\r\n                      <span className=\"pill-label\">{item.label}</span>\r\n                      <span className=\"pill-label-hover\" aria-hidden=\"true\">\r\n                        {item.label}\r\n                      </span>\r\n                    </span>\r\n                  </a>\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n\r\n        <button\r\n          className=\"mobile-menu-button mobile-only\"\r\n          onClick={toggleMobileMenu}\r\n          aria-label=\"Toggle menu\"\r\n          ref={hamburgerRef}\r\n        >\r\n          <span className=\"hamburger-line\" />\r\n          <span className=\"hamburger-line\" />\r\n        </button>\r\n      </nav>\r\n\r\n      <div className=\"mobile-menu-popover mobile-only\" ref={mobileMenuRef} style={cssVars}>\r\n        <ul className=\"mobile-menu-list\">\r\n          {items.map((item, i) => (\r\n            <li key={item.href || `mobile-item-${i}`}>\r\n              {isRouterLink(item.href) ? (\r\n                <Link\r\n                  to={item.href}\r\n                  className={`mobile-menu-link${activeHref === item.href ? ' is-active' : ''}`}\r\n                  onClick={() => setIsMobileMenuOpen(false)}\r\n                >\r\n                  {item.label}\r\n                </Link>\r\n              ) : (\r\n                <a\r\n                  href={item.href}\r\n                  className={`mobile-menu-link${activeHref === item.href ? ' is-active' : ''}`}\r\n                  onClick={() => setIsMobileMenuOpen(false)}\r\n                >\r\n                  {item.label}\r\n                </a>\r\n              )}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PillNav;\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Components/PillNav/PillNav.css",
      "content": ".pill-nav-container {\r\n  position: absolute;\r\n  top: 1em;\r\n  z-index: 99;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .pill-nav-container {\r\n    width: 100%;\r\n    left: 0;\r\n  }\r\n}\r\n\r\n.pill-nav {\r\n  --nav-h: 42px;\r\n  --logo: 36px;\r\n  --pill-pad-x: 18px;\r\n  --pill-gap: 3px;\r\n  width: max-content;\r\n  display: flex;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .pill-nav {\r\n    width: 100%;\r\n    justify-content: space-between;\r\n    padding: 0 1rem;\r\n    background: transparent;\r\n  }\r\n}\r\n\r\n.pill-nav-items {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  height: var(--nav-h);\r\n  background: var(--base, #000);\r\n  border-radius: 9999px;\r\n}\r\n\r\n.pill-logo {\r\n  width: var(--nav-h);\r\n  height: var(--nav-h);\r\n  border-radius: 50%;\r\n  background: var(--base, #000);\r\n  padding: 8px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  overflow: hidden;\r\n}\r\n\r\n.pill-logo img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  display: block;\r\n}\r\n\r\n.pill-list {\r\n  list-style: none;\r\n  display: flex;\r\n  align-items: stretch;\r\n  gap: var(--pill-gap);\r\n  margin: 0;\r\n  padding: 3px;\r\n  height: 100%;\r\n}\r\n\r\n.pill-list > li {\r\n  display: flex;\r\n  height: 100%;\r\n}\r\n\r\n.pill {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  padding: 0 var(--pill-pad-x);\r\n  background: var(--pill-bg, #fff);\r\n  color: var(--pill-text, var(--base, #000));\r\n  text-decoration: none;\r\n  border-radius: 9999px;\r\n  box-sizing: border-box;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 0;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.2px;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.pill .hover-circle {\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 0;\r\n  border-radius: 50%;\r\n  background: var(--base, #000);\r\n  z-index: 1;\r\n  display: block;\r\n  pointer-events: none;\r\n  will-change: transform;\r\n}\r\n\r\n.pill .label-stack {\r\n  position: relative;\r\n  display: inline-block;\r\n  line-height: 1;\r\n  z-index: 2;\r\n}\r\n\r\n.pill .pill-label {\r\n  position: relative;\r\n  z-index: 2;\r\n  display: inline-block;\r\n  line-height: 1;\r\n  will-change: transform;\r\n}\r\n\r\n.pill .pill-label-hover {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  color: var(--hover-text, #fff);\r\n  z-index: 3;\r\n  display: inline-block;\r\n  will-change: transform, opacity;\r\n}\r\n\r\n.pill.is-active::after {\r\n  content: '';\r\n  position: absolute;\r\n  bottom: -6px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  width: 12px;\r\n  height: 12px;\r\n  background: var(--base, #000);\r\n  border-radius: 50px;\r\n  z-index: 4;\r\n}\r\n\r\n.desktop-only {\r\n  display: block;\r\n}\r\n\r\n.mobile-only {\r\n  display: none;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .desktop-only {\r\n    display: none;\r\n  }\r\n\r\n  .mobile-only {\r\n    display: block;\r\n  }\r\n}\r\n\r\n.mobile-menu-button {\r\n  width: var(--nav-h);\r\n  height: var(--nav-h);\r\n  border-radius: 50%;\r\n  background: var(--base, #000);\r\n  border: none;\r\n  display: none;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 4px;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  position: relative;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .mobile-menu-button {\r\n    display: flex;\r\n  }\r\n}\r\n\r\n.hamburger-line {\r\n  width: 16px;\r\n  height: 2px;\r\n  background: var(--pill-bg, #fff);\r\n  border-radius: 1px;\r\n  transition: all 0.01s ease;\r\n  transform-origin: center;\r\n}\r\n\r\n.mobile-menu-popover {\r\n  position: absolute;\r\n  top: 3em;\r\n  left: 1rem;\r\n  right: 1rem;\r\n  background: var(--base, #f0f0f0);\r\n  border-radius: 27px;\r\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);\r\n  z-index: 998;\r\n  opacity: 0;\r\n  transform-origin: top center;\r\n  visibility: hidden;\r\n}\r\n\r\n.mobile-menu-list {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 3px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 3px;\r\n}\r\n\r\n.mobile-menu-popover .mobile-menu-link {\r\n  display: block;\r\n  padding: 12px 16px;\r\n  color: var(--pill-text, #fff);\r\n  background-color: var(--pill-bg, #fff);\r\n  text-decoration: none;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  border-radius: 50px;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.mobile-menu-popover .mobile-menu-link:hover {\r\n  cursor: pointer;\r\n  background-color: var(--base);\r\n  color: var(--hover-text, #fff);\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}