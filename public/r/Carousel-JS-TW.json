{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Carousel-JS-TW",
  "type": "registry:block",
  "title": "Carousel",
  "description": "Responsive carousel with touch gestures, looping and transitions.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/Components/Carousel/Carousel.jsx",
      "content": "import { useEffect, useState, useRef } from 'react';\r\nimport { motion, useMotionValue, useTransform } from 'motion/react';\r\n// replace icons with your own if needed\r\nimport { FiCircle, FiCode, FiFileText, FiLayers, FiLayout } from 'react-icons/fi';\r\n\r\nconst DEFAULT_ITEMS = [\r\n  {\r\n    title: 'Text Animations',\r\n    description: 'Cool text animations for your projects.',\r\n    id: 1,\r\n    icon: <FiFileText className=\"h-[16px] w-[16px] text-white\" />\r\n  },\r\n  {\r\n    title: 'Animations',\r\n    description: 'Smooth animations for your projects.',\r\n    id: 2,\r\n    icon: <FiCircle className=\"h-[16px] w-[16px] text-white\" />\r\n  },\r\n  {\r\n    title: 'Components',\r\n    description: 'Reusable components for your projects.',\r\n    id: 3,\r\n    icon: <FiLayers className=\"h-[16px] w-[16px] text-white\" />\r\n  },\r\n  {\r\n    title: 'Backgrounds',\r\n    description: 'Beautiful backgrounds and patterns for your projects.',\r\n    id: 4,\r\n    icon: <FiLayout className=\"h-[16px] w-[16px] text-white\" />\r\n  },\r\n  {\r\n    title: 'Common UI',\r\n    description: 'Common UI components are coming soon!',\r\n    id: 5,\r\n    icon: <FiCode className=\"h-[16px] w-[16px] text-white\" />\r\n  }\r\n];\r\n\r\nconst DRAG_BUFFER = 0;\r\nconst VELOCITY_THRESHOLD = 500;\r\nconst GAP = 16;\r\nconst SPRING_OPTIONS = { type: 'spring', stiffness: 300, damping: 30 };\r\n\r\nexport default function Carousel({\r\n  items = DEFAULT_ITEMS,\r\n  baseWidth = 300,\r\n  autoplay = false,\r\n  autoplayDelay = 3000,\r\n  pauseOnHover = false,\r\n  loop = false,\r\n  round = false\r\n}) {\r\n  const containerPadding = 16;\r\n  const itemWidth = baseWidth - containerPadding * 2;\r\n  const trackItemOffset = itemWidth + GAP;\r\n\r\n  const carouselItems = loop ? [...items, items[0]] : items;\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const x = useMotionValue(0);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [isResetting, setIsResetting] = useState(false);\r\n\r\n  const containerRef = useRef(null);\r\n  useEffect(() => {\r\n    if (pauseOnHover && containerRef.current) {\r\n      const container = containerRef.current;\r\n      const handleMouseEnter = () => setIsHovered(true);\r\n      const handleMouseLeave = () => setIsHovered(false);\r\n      container.addEventListener('mouseenter', handleMouseEnter);\r\n      container.addEventListener('mouseleave', handleMouseLeave);\r\n      return () => {\r\n        container.removeEventListener('mouseenter', handleMouseEnter);\r\n        container.removeEventListener('mouseleave', handleMouseLeave);\r\n      };\r\n    }\r\n  }, [pauseOnHover]);\r\n\r\n  useEffect(() => {\r\n    if (autoplay && (!pauseOnHover || !isHovered)) {\r\n      const timer = setInterval(() => {\r\n        setCurrentIndex(prev => {\r\n          if (prev === items.length - 1 && loop) {\r\n            return prev + 1;\r\n          }\r\n          if (prev === carouselItems.length - 1) {\r\n            return loop ? 0 : prev;\r\n          }\r\n          return prev + 1;\r\n        });\r\n      }, autoplayDelay);\r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [autoplay, autoplayDelay, isHovered, loop, items.length, carouselItems.length, pauseOnHover]);\r\n\r\n  const effectiveTransition = isResetting ? { duration: 0 } : SPRING_OPTIONS;\r\n\r\n  const handleAnimationComplete = () => {\r\n    if (loop && currentIndex === carouselItems.length - 1) {\r\n      setIsResetting(true);\r\n      x.set(0);\r\n      setCurrentIndex(0);\r\n      setTimeout(() => setIsResetting(false), 50);\r\n    }\r\n  };\r\n\r\n  const handleDragEnd = (_, info) => {\r\n    const offset = info.offset.x;\r\n    const velocity = info.velocity.x;\r\n    if (offset < -DRAG_BUFFER || velocity < -VELOCITY_THRESHOLD) {\r\n      if (loop && currentIndex === items.length - 1) {\r\n        setCurrentIndex(currentIndex + 1);\r\n      } else {\r\n        setCurrentIndex(prev => Math.min(prev + 1, carouselItems.length - 1));\r\n      }\r\n    } else if (offset > DRAG_BUFFER || velocity > VELOCITY_THRESHOLD) {\r\n      if (loop && currentIndex === 0) {\r\n        setCurrentIndex(items.length - 1);\r\n      } else {\r\n        setCurrentIndex(prev => Math.max(prev - 1, 0));\r\n      }\r\n    }\r\n  };\r\n\r\n  const dragProps = loop\r\n    ? {}\r\n    : {\r\n        dragConstraints: {\r\n          left: -trackItemOffset * (carouselItems.length - 1),\r\n          right: 0\r\n        }\r\n      };\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={`relative overflow-hidden p-4 ${\r\n        round ? 'rounded-full border border-white' : 'rounded-[24px] border border-[#222]'\r\n      }`}\r\n      style={{\r\n        width: `${baseWidth}px`,\r\n        ...(round && { height: `${baseWidth}px` })\r\n      }}\r\n    >\r\n      <motion.div\r\n        className=\"flex\"\r\n        drag=\"x\"\r\n        {...dragProps}\r\n        style={{\r\n          width: itemWidth,\r\n          gap: `${GAP}px`,\r\n          perspective: 1000,\r\n          perspectiveOrigin: `${currentIndex * trackItemOffset + itemWidth / 2}px 50%`,\r\n          x\r\n        }}\r\n        onDragEnd={handleDragEnd}\r\n        animate={{ x: -(currentIndex * trackItemOffset) }}\r\n        transition={effectiveTransition}\r\n        onAnimationComplete={handleAnimationComplete}\r\n      >\r\n        {carouselItems.map((item, index) => {\r\n          const range = [-(index + 1) * trackItemOffset, -index * trackItemOffset, -(index - 1) * trackItemOffset];\r\n          const outputRange = [90, 0, -90];\r\n          // eslint-disable-next-line react-hooks/rules-of-hooks\r\n          const rotateY = useTransform(x, range, outputRange, { clamp: false });\r\n          return (\r\n            <motion.div\r\n              key={index}\r\n              className={`relative shrink-0 flex flex-col ${\r\n                round\r\n                  ? 'items-center justify-center text-center bg-[#060010] border-0'\r\n                  : 'items-start justify-between bg-[#222] border border-[#222] rounded-[12px]'\r\n              } overflow-hidden cursor-grab active:cursor-grabbing`}\r\n              style={{\r\n                width: itemWidth,\r\n                height: round ? itemWidth : '100%',\r\n                rotateY: rotateY,\r\n                ...(round && { borderRadius: '50%' })\r\n              }}\r\n              transition={effectiveTransition}\r\n            >\r\n              <div className={`${round ? 'p-0 m-0' : 'mb-4 p-5'}`}>\r\n                <span className=\"flex h-[28px] w-[28px] items-center justify-center rounded-full bg-[#060010]\">\r\n                  {item.icon}\r\n                </span>\r\n              </div>\r\n              <div className=\"p-5\">\r\n                <div className=\"mb-1 font-black text-lg text-white\">{item.title}</div>\r\n                <p className=\"text-sm text-white\">{item.description}</p>\r\n              </div>\r\n            </motion.div>\r\n          );\r\n        })}\r\n      </motion.div>\r\n      <div className={`flex w-full justify-center ${round ? 'absolute z-20 bottom-12 left-1/2 -translate-x-1/2' : ''}`}>\r\n        <div className=\"mt-4 flex w-[150px] justify-between px-8\">\r\n          {items.map((_, index) => (\r\n            <motion.div\r\n              key={index}\r\n              className={`h-2 w-2 rounded-full cursor-pointer transition-colors duration-150 ${\r\n                currentIndex % items.length === index\r\n                  ? round\r\n                    ? 'bg-white'\r\n                    : 'bg-[#333333]'\r\n                  : round\r\n                    ? 'bg-[#555]'\r\n                    : 'bg-[rgba(51,51,51,0.4)]'\r\n              }`}\r\n              animate={{\r\n                scale: currentIndex % items.length === index ? 1.2 : 1\r\n              }}\r\n              onClick={() => setCurrentIndex(index)}\r\n              transition={{ duration: 0.15 }}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}