{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ScrollVelocity-JS-TW",
  "type": "registry:block",
  "title": "ScrollVelocity",
  "description": "Text marquee animatio - speed and distortion scale with user's scroll velocity.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/tailwind/src/tailwind/TextAnimations/ScrollVelocity/ScrollVelocity.jsx",
      "content": "import { useRef, useLayoutEffect, useState } from 'react';\r\nimport {\r\n  motion,\r\n  useScroll,\r\n  useSpring,\r\n  useTransform,\r\n  useMotionValue,\r\n  useVelocity,\r\n  useAnimationFrame\r\n} from 'motion/react';\r\n\r\nfunction useElementWidth(ref) {\r\n  const [width, setWidth] = useState(0);\r\n\r\n  useLayoutEffect(() => {\r\n    function updateWidth() {\r\n      if (ref.current) {\r\n        setWidth(ref.current.offsetWidth);\r\n      }\r\n    }\r\n    updateWidth();\r\n    window.addEventListener('resize', updateWidth);\r\n    return () => window.removeEventListener('resize', updateWidth);\r\n  }, [ref]);\r\n\r\n  return width;\r\n}\r\n\r\nexport const ScrollVelocity = ({\r\n  scrollContainerRef,\r\n  texts = [],\r\n  velocity = 100,\r\n  className = '',\r\n  damping = 50,\r\n  stiffness = 400,\r\n  numCopies = 6,\r\n  velocityMapping = { input: [0, 1000], output: [0, 5] },\r\n  parallaxClassName,\r\n  scrollerClassName,\r\n  parallaxStyle,\r\n  scrollerStyle\r\n}) => {\r\n  function VelocityText({\r\n    children,\r\n    baseVelocity = velocity,\r\n    scrollContainerRef,\r\n    className = '',\r\n    damping,\r\n    stiffness,\r\n    numCopies,\r\n    velocityMapping,\r\n    parallaxClassName,\r\n    scrollerClassName,\r\n    parallaxStyle,\r\n    scrollerStyle\r\n  }) {\r\n    const baseX = useMotionValue(0);\r\n    const scrollOptions = scrollContainerRef ? { container: scrollContainerRef } : {};\r\n    const { scrollY } = useScroll(scrollOptions);\r\n    const scrollVelocity = useVelocity(scrollY);\r\n    const smoothVelocity = useSpring(scrollVelocity, {\r\n      damping: damping ?? 50,\r\n      stiffness: stiffness ?? 400\r\n    });\r\n    const velocityFactor = useTransform(\r\n      smoothVelocity,\r\n      velocityMapping?.input || [0, 1000],\r\n      velocityMapping?.output || [0, 5],\r\n      { clamp: false }\r\n    );\r\n\r\n    const copyRef = useRef(null);\r\n    const copyWidth = useElementWidth(copyRef);\r\n\r\n    function wrap(min, max, v) {\r\n      const range = max - min;\r\n      const mod = (((v - min) % range) + range) % range;\r\n      return mod + min;\r\n    }\r\n\r\n    const x = useTransform(baseX, v => {\r\n      if (copyWidth === 0) return '0px';\r\n      return `${wrap(-copyWidth, 0, v)}px`;\r\n    });\r\n\r\n    const directionFactor = useRef(1);\r\n    useAnimationFrame((t, delta) => {\r\n      let moveBy = directionFactor.current * baseVelocity * (delta / 1000);\r\n\r\n      if (velocityFactor.get() < 0) {\r\n        directionFactor.current = -1;\r\n      } else if (velocityFactor.get() > 0) {\r\n        directionFactor.current = 1;\r\n      }\r\n\r\n      moveBy += directionFactor.current * moveBy * velocityFactor.get();\r\n      baseX.set(baseX.get() + moveBy);\r\n    });\r\n\r\n    const spans = [];\r\n    for (let i = 0; i < (numCopies ?? 1); i++) {\r\n      spans.push(\r\n        <span className={`flex-shrink-0 ${className}`} key={i} ref={i === 0 ? copyRef : null}>\r\n          {children}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className={`${parallaxClassName} relative overflow-hidden`} style={parallaxStyle}>\r\n        <motion.div\r\n          className={`${scrollerClassName} flex whitespace-nowrap text-center font-sans text-4xl font-bold tracking-[-0.02em] drop-shadow md:text-[5rem] md:leading-[5rem]`}\r\n          style={{ x, ...scrollerStyle }}\r\n        >\r\n          {spans}\r\n        </motion.div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      {texts.map((text, index) => (\r\n        <VelocityText\r\n          key={index}\r\n          className={className}\r\n          baseVelocity={index % 2 !== 0 ? -velocity : velocity}\r\n          scrollContainerRef={scrollContainerRef}\r\n          damping={damping}\r\n          stiffness={stiffness}\r\n          numCopies={numCopies}\r\n          velocityMapping={velocityMapping}\r\n          parallaxClassName={parallaxClassName}\r\n          scrollerClassName={scrollerClassName}\r\n          parallaxStyle={parallaxStyle}\r\n          scrollerStyle={scrollerStyle}\r\n        >\r\n          {text}&nbsp;\r\n        </VelocityText>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ScrollVelocity;\r\n",
      "type": "registry:component"
    }
  ]
}