{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "TrueFocus-TS-CSS",
  "type": "registry:block",
  "title": "TrueFocus",
  "description": "Applies dynamic blur / clarity based over a series of words in order.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/ts/default/src/ts-default/TextAnimations/TrueFocus/TrueFocus.tsx",
      "content": "import { useEffect, useRef, useState, RefObject } from 'react';\r\nimport { motion } from 'motion/react';\r\nimport './TrueFocus.css';\r\n\r\ninterface TrueFocusProps {\r\n  sentence?: string;\r\n  manualMode?: boolean;\r\n  blurAmount?: number;\r\n  borderColor?: string;\r\n  glowColor?: string;\r\n  animationDuration?: number;\r\n  pauseBetweenAnimations?: number;\r\n}\r\n\r\ninterface FocusRect {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nconst TrueFocus: React.FC<TrueFocusProps> = ({\r\n  sentence = 'True Focus',\r\n  manualMode = false,\r\n  blurAmount = 5,\r\n  borderColor = 'green',\r\n  glowColor = 'rgba(0, 255, 0, 0.6)',\r\n  animationDuration = 0.5,\r\n  pauseBetweenAnimations = 1\r\n}) => {\r\n  const words = sentence.split(' ');\r\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\r\n  const [lastActiveIndex, setLastActiveIndex] = useState<number | null>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const wordRefs: React.MutableRefObject<(HTMLSpanElement | null)[]> = useRef([]);\r\n  const [focusRect, setFocusRect] = useState<FocusRect>({\r\n    x: 0,\r\n    y: 0,\r\n    width: 0,\r\n    height: 0\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!manualMode) {\r\n      const interval = setInterval(\r\n        () => {\r\n          setCurrentIndex(prev => (prev + 1) % words.length);\r\n        },\r\n        (animationDuration + pauseBetweenAnimations) * 1000\r\n      );\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [manualMode, animationDuration, pauseBetweenAnimations, words.length]);\r\n\r\n  useEffect(() => {\r\n    if (currentIndex === null || currentIndex === -1) return;\r\n\r\n    if (!wordRefs.current[currentIndex] || !containerRef.current) return;\r\n\r\n    const parentRect = containerRef.current.getBoundingClientRect();\r\n    const activeRect = wordRefs.current[currentIndex]!.getBoundingClientRect();\r\n\r\n    setFocusRect({\r\n      x: activeRect.left - parentRect.left,\r\n      y: activeRect.top - parentRect.top,\r\n      width: activeRect.width,\r\n      height: activeRect.height\r\n    });\r\n  }, [currentIndex, words.length]);\r\n\r\n  const handleMouseEnter = (index: number) => {\r\n    if (manualMode) {\r\n      setLastActiveIndex(index);\r\n      setCurrentIndex(index);\r\n    }\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    if (manualMode) {\r\n      setCurrentIndex(lastActiveIndex ?? 0);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"focus-container\" ref={containerRef}>\r\n      {words.map((word, index) => {\r\n        const isActive = index === currentIndex;\r\n        return (\r\n          <span\r\n            key={index}\r\n            ref={el => {\r\n              if (el) {\r\n                wordRefs.current[index] = el;\r\n              }\r\n            }}\r\n            className={`focus-word ${manualMode ? 'manual' : ''} ${isActive && !manualMode ? 'active' : ''}`}\r\n            style={\r\n              {\r\n                filter: manualMode\r\n                  ? isActive\r\n                    ? `blur(0px)`\r\n                    : `blur(${blurAmount}px)`\r\n                  : isActive\r\n                    ? `blur(0px)`\r\n                    : `blur(${blurAmount}px)`,\r\n                transition: `filter ${animationDuration}s ease`,\r\n                '--border-color': borderColor,\r\n                '--glow-color': glowColor\r\n              } as React.CSSProperties\r\n            }\r\n            onMouseEnter={() => handleMouseEnter(index)}\r\n            onMouseLeave={handleMouseLeave}\r\n          >\r\n            {word}\r\n          </span>\r\n        );\r\n      })}\r\n\r\n      <motion.div\r\n        className=\"focus-frame\"\r\n        animate={{\r\n          x: focusRect.x,\r\n          y: focusRect.y,\r\n          width: focusRect.width,\r\n          height: focusRect.height,\r\n          opacity: currentIndex >= 0 ? 1 : 0\r\n        }}\r\n        transition={{\r\n          duration: animationDuration\r\n        }}\r\n        style={\r\n          {\r\n            '--border-color': borderColor,\r\n            '--glow-color': glowColor\r\n          } as React.CSSProperties\r\n        }\r\n      >\r\n        <span className=\"corner top-left\"></span>\r\n        <span className=\"corner top-right\"></span>\r\n        <span className=\"corner bottom-left\"></span>\r\n        <span className=\"corner bottom-right\"></span>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrueFocus;\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/ts/default/src/ts-default/TextAnimations/TrueFocus/TrueFocus.css",
      "content": ".focus-container {\r\n  position: relative;\r\n  display: flex;\r\n  gap: 1em;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.focus-word {\r\n  position: relative;\r\n  font-size: 3rem;\r\n  font-weight: 900;\r\n  cursor: pointer;\r\n  transition:\r\n    filter 0.3s ease,\r\n    color 0.3s ease;\r\n}\r\n\r\n.focus-word.active {\r\n  filter: blur(0);\r\n}\r\n\r\n.focus-frame {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  pointer-events: none;\r\n  box-sizing: content-box;\r\n  border: none;\r\n}\r\n\r\n.corner {\r\n  position: absolute;\r\n  width: 1rem;\r\n  height: 1rem;\r\n  border: 3px solid var(--border-color, #fff);\r\n  filter: drop-shadow(0px 0px 4px var(--border-color, #fff));\r\n  border-radius: 3px;\r\n  transition: none;\r\n}\r\n\r\n.top-left {\r\n  top: -10px;\r\n  left: -10px;\r\n  border-right: none;\r\n  border-bottom: none;\r\n}\r\n\r\n.top-right {\r\n  top: -10px;\r\n  right: -10px;\r\n  border-left: none;\r\n  border-bottom: none;\r\n}\r\n\r\n.bottom-left {\r\n  bottom: -10px;\r\n  left: -10px;\r\n  border-right: none;\r\n  border-top: none;\r\n}\r\n\r\n.bottom-right {\r\n  bottom: -10px;\r\n  right: -10px;\r\n  border-left: none;\r\n  border-top: none;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}