{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "DomeGallery-TS-CSS",
  "type": "registry:block",
  "title": "DomeGallery",
  "description": "Immersive 3D dome gallery projecting images on a hemispheric surface.",
  "dependencies": [
    "@use-gesture/react"
  ],
  "files": [
    {
      "path": "public/ts/default/src/ts-default/Components/DomeGallery/DomeGallery.tsx",
      "content": "import { useEffect, useMemo, useRef, useCallback } from 'react';\r\nimport { useGesture } from '@use-gesture/react';\r\nimport './DomeGallery.css';\r\n\r\ntype ImageItem = string | { src: string; alt?: string };\r\n\r\ntype DomeGalleryProps = {\r\n  images?: ImageItem[];\r\n  fit?: number;\r\n  fitBasis?: 'auto' | 'min' | 'max' | 'width' | 'height';\r\n  minRadius?: number;\r\n  maxRadius?: number;\r\n  padFactor?: number;\r\n  overlayBlurColor?: string;\r\n  maxVerticalRotationDeg?: number;\r\n  dragSensitivity?: number;\r\n  enlargeTransitionMs?: number;\r\n  segments?: number;\r\n  dragDampening?: number;\r\n  openedImageWidth?: string;\r\n  openedImageHeight?: string;\r\n  imageBorderRadius?: string;\r\n  openedImageBorderRadius?: string;\r\n  grayscale?: boolean;\r\n};\r\n\r\ntype ItemDef = {\r\n  src: string;\r\n  alt: string;\r\n  x: number;\r\n  y: number;\r\n  sizeX: number;\r\n  sizeY: number;\r\n};\r\n\r\nconst DEFAULT_IMAGES: ImageItem[] = [\r\n  {\r\n    src: 'https://images.unsplash.com/photo-1755331039789-7e5680e26e8f?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n    alt: 'Abstract art'\r\n  },\r\n  {\r\n    src: 'https://images.unsplash.com/photo-1755569309049-98410b94f66d?q=80&w=772&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n    alt: 'Modern sculpture'\r\n  },\r\n  {\r\n    src: 'https://images.unsplash.com/photo-1755497595318-7e5e3523854f?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n    alt: 'Digital artwork'\r\n  },\r\n  {\r\n    src: 'https://images.unsplash.com/photo-1755353985163-c2a0fe5ac3d8?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n    alt: 'Contemporary art'\r\n  },\r\n  {\r\n    src: 'https://images.unsplash.com/photo-1745965976680-d00be7dc0377?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n    alt: 'Geometric pattern'\r\n  },\r\n  {\r\n    src: 'https://images.unsplash.com/photo-1752588975228-21f44630bb3c?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n    alt: 'Textured surface'\r\n  },\r\n  {\r\n    src: 'https://pbs.twimg.com/media/Gyla7NnXMAAXSo_?format=jpg&name=large',\r\n    alt: 'Social media image'\r\n  }\r\n];\r\n\r\nconst DEFAULTS = {\r\n  maxVerticalRotationDeg: 5,\r\n  dragSensitivity: 20,\r\n  enlargeTransitionMs: 300,\r\n  segments: 35\r\n};\r\n\r\nconst clamp = (v: number, min: number, max: number) => Math.min(Math.max(v, min), max);\r\nconst normalizeAngle = (d: number) => ((d % 360) + 360) % 360;\r\nconst wrapAngleSigned = (deg: number) => {\r\n  const a = (((deg + 180) % 360) + 360) % 360;\r\n  return a - 180;\r\n};\r\nconst getDataNumber = (el: HTMLElement, name: string, fallback: number) => {\r\n  const attr = el.dataset[name] ?? el.getAttribute(`data-${name}`);\r\n  const n = attr == null ? NaN : parseFloat(attr);\r\n  return Number.isFinite(n) ? n : fallback;\r\n};\r\n\r\nfunction buildItems(pool: ImageItem[], seg: number): ItemDef[] {\r\n  const xCols = Array.from({ length: seg }, (_, i) => -37 + i * 2);\r\n  const evenYs = [-4, -2, 0, 2, 4];\r\n  const oddYs = [-3, -1, 1, 3, 5];\r\n\r\n  const coords = xCols.flatMap((x, c) => {\r\n    const ys = c % 2 === 0 ? evenYs : oddYs;\r\n    return ys.map(y => ({ x, y, sizeX: 2, sizeY: 2 }));\r\n  });\r\n\r\n  const totalSlots = coords.length;\r\n  if (pool.length === 0) {\r\n    return coords.map(c => ({ ...c, src: '', alt: '' }));\r\n  }\r\n  if (pool.length > totalSlots) {\r\n    console.warn(\r\n      `[DomeGallery] Provided image count (${pool.length}) exceeds available tiles (${totalSlots}). Some images will not be shown.`\r\n    );\r\n  }\r\n\r\n  const normalizedImages = pool.map(image => {\r\n    if (typeof image === 'string') {\r\n      return { src: image, alt: '' };\r\n    }\r\n    return { src: image.src || '', alt: image.alt || '' };\r\n  });\r\n\r\n  const usedImages = Array.from({ length: totalSlots }, (_, i) => normalizedImages[i % normalizedImages.length]);\r\n\r\n  for (let i = 1; i < usedImages.length; i++) {\r\n    if (usedImages[i].src === usedImages[i - 1].src) {\r\n      for (let j = i + 1; j < usedImages.length; j++) {\r\n        if (usedImages[j].src !== usedImages[i].src) {\r\n          const tmp = usedImages[i];\r\n          usedImages[i] = usedImages[j];\r\n          usedImages[j] = tmp;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return coords.map((c, i) => ({\r\n    ...c,\r\n    src: usedImages[i].src,\r\n    alt: usedImages[i].alt\r\n  }));\r\n}\r\n\r\nfunction computeItemBaseRotation(offsetX: number, offsetY: number, sizeX: number, sizeY: number, segments: number) {\r\n  const unit = 360 / segments / 2;\r\n  const rotateY = unit * (offsetX + (sizeX - 1) / 2);\r\n  const rotateX = unit * (offsetY - (sizeY - 1) / 2);\r\n  return { rotateX, rotateY };\r\n}\r\n\r\nexport default function DomeGallery({\r\n  images = DEFAULT_IMAGES,\r\n  fit = 0.5,\r\n  fitBasis = 'auto',\r\n  minRadius = 600,\r\n  maxRadius = Infinity,\r\n  padFactor = 0.25,\r\n  overlayBlurColor = '#060010',\r\n  maxVerticalRotationDeg = DEFAULTS.maxVerticalRotationDeg,\r\n  dragSensitivity = DEFAULTS.dragSensitivity,\r\n  enlargeTransitionMs = DEFAULTS.enlargeTransitionMs,\r\n  segments = DEFAULTS.segments,\r\n  dragDampening = 2,\r\n  openedImageWidth = '400px',\r\n  openedImageHeight = '400px',\r\n  imageBorderRadius = '30px',\r\n  openedImageBorderRadius = '30px',\r\n  grayscale = true\r\n}: DomeGalleryProps) {\r\n  const rootRef = useRef<HTMLDivElement>(null);\r\n  const mainRef = useRef<HTMLDivElement>(null);\r\n  const sphereRef = useRef<HTMLDivElement>(null);\r\n  const frameRef = useRef<HTMLDivElement>(null);\r\n  const viewerRef = useRef<HTMLDivElement>(null);\r\n  const scrimRef = useRef<HTMLDivElement>(null);\r\n  const focusedElRef = useRef<HTMLElement | null>(null);\r\n  const originalTilePositionRef = useRef<{\r\n    left: number;\r\n    top: number;\r\n    width: number;\r\n    height: number;\r\n  } | null>(null);\r\n\r\n  const rotationRef = useRef({ x: 0, y: 0 });\r\n  const startRotRef = useRef({ x: 0, y: 0 });\r\n  const startPosRef = useRef<{ x: number; y: number } | null>(null);\r\n  const draggingRef = useRef(false);\r\n  const movedRef = useRef(false);\r\n  const inertiaRAF = useRef<number | null>(null);\r\n\r\n  const openingRef = useRef(false);\r\n  const openStartedAtRef = useRef(0);\r\n  const lastDragEndAt = useRef(0);\r\n\r\n  const scrollLockedRef = useRef(false);\r\n  const lockScroll = useCallback(() => {\r\n    if (scrollLockedRef.current) return;\r\n    scrollLockedRef.current = true;\r\n    document.body.classList.add('dg-scroll-lock');\r\n  }, []);\r\n  const unlockScroll = useCallback(() => {\r\n    if (!scrollLockedRef.current) return;\r\n    if (rootRef.current?.getAttribute('data-enlarging') === 'true') return;\r\n    scrollLockedRef.current = false;\r\n    document.body.classList.remove('dg-scroll-lock');\r\n  }, []);\r\n\r\n  const items = useMemo(() => buildItems(images, segments), [images, segments]);\r\n\r\n  const applyTransform = (xDeg: number, yDeg: number) => {\r\n    const el = sphereRef.current;\r\n    if (el) {\r\n      el.style.transform = `translateZ(calc(var(--radius) * -1)) rotateX(${xDeg}deg) rotateY(${yDeg}deg)`;\r\n    }\r\n  };\r\n\r\n  const lockedRadiusRef = useRef<number | null>(null);\r\n\r\n  useEffect(() => {\r\n    const root = rootRef.current;\r\n    if (!root) return;\r\n    const ro = new ResizeObserver(entries => {\r\n      const cr = entries[0].contentRect;\r\n      const w = Math.max(1, cr.width),\r\n        h = Math.max(1, cr.height);\r\n      const minDim = Math.min(w, h),\r\n        maxDim = Math.max(w, h),\r\n        aspect = w / h;\r\n      let basis: number;\r\n      switch (fitBasis) {\r\n        case 'min':\r\n          basis = minDim;\r\n          break;\r\n        case 'max':\r\n          basis = maxDim;\r\n          break;\r\n        case 'width':\r\n          basis = w;\r\n          break;\r\n        case 'height':\r\n          basis = h;\r\n          break;\r\n        default:\r\n          basis = aspect >= 1.3 ? w : minDim;\r\n      }\r\n      let radius = basis * fit;\r\n      const heightGuard = h * 1.35;\r\n      radius = Math.min(radius, heightGuard);\r\n      radius = clamp(radius, minRadius, maxRadius);\r\n      lockedRadiusRef.current = Math.round(radius);\r\n\r\n      const viewerPad = Math.max(8, Math.round(minDim * padFactor));\r\n      root.style.setProperty('--radius', `${lockedRadiusRef.current}px`);\r\n      root.style.setProperty('--viewer-pad', `${viewerPad}px`);\r\n      root.style.setProperty('--overlay-blur-color', overlayBlurColor);\r\n      root.style.setProperty('--tile-radius', imageBorderRadius);\r\n      root.style.setProperty('--enlarge-radius', openedImageBorderRadius);\r\n      root.style.setProperty('--image-filter', grayscale ? 'grayscale(1)' : 'none');\r\n      applyTransform(rotationRef.current.x, rotationRef.current.y);\r\n\r\n      const enlargedOverlay = viewerRef.current?.querySelector('.enlarge') as HTMLElement;\r\n      if (enlargedOverlay && frameRef.current && mainRef.current) {\r\n        const frameR = frameRef.current.getBoundingClientRect();\r\n        const mainR = mainRef.current.getBoundingClientRect();\r\n\r\n        const hasCustomSize = openedImageWidth && openedImageHeight;\r\n        if (hasCustomSize) {\r\n          const tempDiv = document.createElement('div');\r\n          tempDiv.style.cssText = `position: absolute; width: ${openedImageWidth}; height: ${openedImageHeight}; visibility: hidden;`;\r\n          document.body.appendChild(tempDiv);\r\n          const tempRect = tempDiv.getBoundingClientRect();\r\n          document.body.removeChild(tempDiv);\r\n\r\n          const centeredLeft = frameR.left - mainR.left + (frameR.width - tempRect.width) / 2;\r\n          const centeredTop = frameR.top - mainR.top + (frameR.height - tempRect.height) / 2;\r\n\r\n          enlargedOverlay.style.left = `${centeredLeft}px`;\r\n          enlargedOverlay.style.top = `${centeredTop}px`;\r\n        } else {\r\n          enlargedOverlay.style.left = `${frameR.left - mainR.left}px`;\r\n          enlargedOverlay.style.top = `${frameR.top - mainR.top}px`;\r\n          enlargedOverlay.style.width = `${frameR.width}px`;\r\n          enlargedOverlay.style.height = `${frameR.height}px`;\r\n        }\r\n      }\r\n    });\r\n    ro.observe(root);\r\n    return () => ro.disconnect();\r\n  }, [\r\n    fit,\r\n    fitBasis,\r\n    minRadius,\r\n    maxRadius,\r\n    padFactor,\r\n    overlayBlurColor,\r\n    grayscale,\r\n    imageBorderRadius,\r\n    openedImageBorderRadius,\r\n    openedImageWidth,\r\n    openedImageHeight\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    applyTransform(rotationRef.current.x, rotationRef.current.y);\r\n  }, []);\r\n\r\n  const stopInertia = useCallback(() => {\r\n    if (inertiaRAF.current) {\r\n      cancelAnimationFrame(inertiaRAF.current);\r\n      inertiaRAF.current = null;\r\n    }\r\n  }, []);\r\n\r\n  const startInertia = useCallback(\r\n    (vx: number, vy: number) => {\r\n      const MAX_V = 1.4;\r\n      let vX = clamp(vx, -MAX_V, MAX_V) * 80;\r\n      let vY = clamp(vy, -MAX_V, MAX_V) * 80;\r\n\r\n      let frames = 0;\r\n      const d = clamp(dragDampening ?? 0.6, 0, 1);\r\n      const frictionMul = 0.94 + 0.055 * d;\r\n      const stopThreshold = 0.015 - 0.01 * d;\r\n      const maxFrames = Math.round(90 + 270 * d);\r\n\r\n      const step = () => {\r\n        vX *= frictionMul;\r\n        vY *= frictionMul;\r\n        if (Math.abs(vX) < stopThreshold && Math.abs(vY) < stopThreshold) {\r\n          inertiaRAF.current = null;\r\n          return;\r\n        }\r\n        if (++frames > maxFrames) {\r\n          inertiaRAF.current = null;\r\n          return;\r\n        }\r\n        const nextX = clamp(rotationRef.current.x - vY / 200, -maxVerticalRotationDeg, maxVerticalRotationDeg);\r\n        const nextY = wrapAngleSigned(rotationRef.current.y + vX / 200);\r\n        rotationRef.current = { x: nextX, y: nextY };\r\n        applyTransform(nextX, nextY);\r\n        inertiaRAF.current = requestAnimationFrame(step);\r\n      };\r\n      stopInertia();\r\n      inertiaRAF.current = requestAnimationFrame(step);\r\n    },\r\n    [dragDampening, maxVerticalRotationDeg, stopInertia]\r\n  );\r\n\r\n  useGesture(\r\n    {\r\n      onDragStart: ({ event }) => {\r\n        if (focusedElRef.current) return;\r\n        stopInertia();\r\n        const evt = event as PointerEvent;\r\n        draggingRef.current = true;\r\n        movedRef.current = false;\r\n        startRotRef.current = { ...rotationRef.current };\r\n        startPosRef.current = { x: evt.clientX, y: evt.clientY };\r\n      },\r\n      onDrag: ({ event, last, velocity = [0, 0], direction = [0, 0], movement }) => {\r\n        if (focusedElRef.current || !draggingRef.current || !startPosRef.current) return;\r\n\r\n        const evt = event as PointerEvent;\r\n        const dxTotal = evt.clientX - startPosRef.current.x;\r\n        const dyTotal = evt.clientY - startPosRef.current.y;\r\n\r\n        if (!movedRef.current) {\r\n          const dist2 = dxTotal * dxTotal + dyTotal * dyTotal;\r\n          if (dist2 > 16) movedRef.current = true;\r\n        }\r\n\r\n        const nextX = clamp(\r\n          startRotRef.current.x - dyTotal / dragSensitivity,\r\n          -maxVerticalRotationDeg,\r\n          maxVerticalRotationDeg\r\n        );\r\n        const nextY = wrapAngleSigned(startRotRef.current.y + dxTotal / dragSensitivity);\r\n\r\n        if (rotationRef.current.x !== nextX || rotationRef.current.y !== nextY) {\r\n          rotationRef.current = { x: nextX, y: nextY };\r\n          applyTransform(nextX, nextY);\r\n        }\r\n\r\n        if (last) {\r\n          draggingRef.current = false;\r\n\r\n          let [vMagX, vMagY] = velocity;\r\n          const [dirX, dirY] = direction;\r\n          let vx = vMagX * dirX;\r\n          let vy = vMagY * dirY;\r\n\r\n          if (Math.abs(vx) < 0.001 && Math.abs(vy) < 0.001 && Array.isArray(movement)) {\r\n            const [mx, my] = movement;\r\n            vx = clamp((mx / dragSensitivity) * 0.02, -1.2, 1.2);\r\n            vy = clamp((my / dragSensitivity) * 0.02, -1.2, 1.2);\r\n          }\r\n\r\n          if (Math.abs(vx) > 0.005 || Math.abs(vy) > 0.005) {\r\n            startInertia(vx, vy);\r\n          }\r\n\r\n          if (movedRef.current) lastDragEndAt.current = performance.now();\r\n\r\n          movedRef.current = false;\r\n        }\r\n      }\r\n    },\r\n    { target: mainRef, eventOptions: { passive: true } }\r\n  );\r\n\r\n  const openItemFromElement = (el: HTMLElement) => {\r\n    if (openingRef.current) return;\r\n    openingRef.current = true;\r\n    openStartedAtRef.current = performance.now();\r\n    lockScroll();\r\n\r\n    const parent = el.parentElement as HTMLElement;\r\n    focusedElRef.current = el;\r\n    el.setAttribute('data-focused', 'true');\r\n\r\n    const offsetX = getDataNumber(parent, 'offsetX', 0);\r\n    const offsetY = getDataNumber(parent, 'offsetY', 0);\r\n    const sizeX = getDataNumber(parent, 'sizeX', 2);\r\n    const sizeY = getDataNumber(parent, 'sizeY', 2);\r\n\r\n    const parentRot = computeItemBaseRotation(offsetX, offsetY, sizeX, sizeY, segments);\r\n    const parentY = normalizeAngle(parentRot.rotateY);\r\n    const globalY = normalizeAngle(rotationRef.current.y);\r\n    let rotY = -(parentY + globalY) % 360;\r\n    if (rotY < -180) rotY += 360;\r\n    const rotX = -parentRot.rotateX - rotationRef.current.x;\r\n    parent.style.setProperty('--rot-y-delta', `${rotY}deg`);\r\n    parent.style.setProperty('--rot-x-delta', `${rotX}deg`);\r\n\r\n    const refDiv = document.createElement('div');\r\n    refDiv.className = 'item__image item__image--reference';\r\n    refDiv.style.opacity = '0';\r\n    refDiv.style.transform = `rotateX(${-parentRot.rotateX}deg) rotateY(${-parentRot.rotateY}deg)`;\r\n    parent.appendChild(refDiv);\r\n\r\n    const tileR = refDiv.getBoundingClientRect();\r\n    const mainR = mainRef.current!.getBoundingClientRect();\r\n    const frameR = frameRef.current!.getBoundingClientRect();\r\n    originalTilePositionRef.current = {\r\n      left: tileR.left,\r\n      top: tileR.top,\r\n      width: tileR.width,\r\n      height: tileR.height\r\n    };\r\n\r\n    el.style.visibility = 'hidden';\r\n    (el.style as any).zIndex = 0;\r\n\r\n    const overlay = document.createElement('div');\r\n    overlay.className = 'enlarge';\r\n    overlay.style.position = 'absolute';\r\n    overlay.style.left = frameR.left - mainR.left + 'px';\r\n    overlay.style.top = frameR.top - mainR.top + 'px';\r\n    overlay.style.width = frameR.width + 'px';\r\n    overlay.style.height = frameR.height + 'px';\r\n    overlay.style.opacity = '0';\r\n    overlay.style.zIndex = '30';\r\n    overlay.style.willChange = 'transform, opacity';\r\n    overlay.style.transformOrigin = 'top left';\r\n    overlay.style.transition = `transform ${enlargeTransitionMs}ms ease, opacity ${enlargeTransitionMs}ms ease`;\r\n\r\n    const rawSrc = parent.dataset.src || (el.querySelector('img') as HTMLImageElement)?.src || '';\r\n    const img = document.createElement('img');\r\n    img.src = rawSrc;\r\n    overlay.appendChild(img);\r\n    viewerRef.current!.appendChild(overlay);\r\n\r\n    const tx0 = tileR.left - frameR.left;\r\n    const ty0 = tileR.top - frameR.top;\r\n    const sx0 = tileR.width / frameR.width;\r\n    const sy0 = tileR.height / frameR.height;\r\n    overlay.style.transform = `translate(${tx0}px, ${ty0}px) scale(${sx0}, ${sy0})`;\r\n    requestAnimationFrame(() => {\r\n      overlay.style.opacity = '1';\r\n      overlay.style.transform = 'translate(0px, 0px) scale(1, 1)';\r\n      rootRef.current?.setAttribute('data-enlarging', 'true');\r\n    });\r\n\r\n    const wantsResize = openedImageWidth || openedImageHeight;\r\n    if (wantsResize) {\r\n      const onFirstEnd = (ev: TransitionEvent) => {\r\n        if (ev.propertyName !== 'transform') return;\r\n        overlay.removeEventListener('transitionend', onFirstEnd);\r\n        const prevTransition = overlay.style.transition;\r\n        overlay.style.transition = 'none';\r\n        const tempWidth = openedImageWidth || `${frameR.width}px`;\r\n        const tempHeight = openedImageHeight || `${frameR.height}px`;\r\n        overlay.style.width = tempWidth;\r\n        overlay.style.height = tempHeight;\r\n        const newRect = overlay.getBoundingClientRect();\r\n        overlay.style.width = frameR.width + 'px';\r\n        overlay.style.height = frameR.height + 'px';\r\n        void overlay.offsetWidth;\r\n        overlay.style.transition = `left ${enlargeTransitionMs}ms ease, top ${enlargeTransitionMs}ms ease, width ${enlargeTransitionMs}ms ease, height ${enlargeTransitionMs}ms ease`;\r\n        const centeredLeft = frameR.left - mainR.left + (frameR.width - newRect.width) / 2;\r\n        const centeredTop = frameR.top - mainR.top + (frameR.height - newRect.height) / 2;\r\n        requestAnimationFrame(() => {\r\n          overlay.style.left = `${centeredLeft}px`;\r\n          overlay.style.top = `${centeredTop}px`;\r\n          overlay.style.width = tempWidth;\r\n          overlay.style.height = tempHeight;\r\n        });\r\n        const cleanupSecond = () => {\r\n          overlay.removeEventListener('transitionend', cleanupSecond);\r\n          overlay.style.transition = prevTransition;\r\n        };\r\n        overlay.addEventListener('transitionend', cleanupSecond, {\r\n          once: true\r\n        });\r\n      };\r\n      overlay.addEventListener('transitionend', onFirstEnd);\r\n    }\r\n  };\r\n\r\n  const onTileClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (draggingRef.current) return;\r\n    if (performance.now() - lastDragEndAt.current < 80) return;\r\n    if (openingRef.current) return;\r\n    openItemFromElement(e.currentTarget);\r\n  }, []);\r\n\r\n  const onTilePointerUp = useCallback((e: React.PointerEvent<HTMLDivElement>) => {\r\n    if (e.pointerType !== 'touch') return;\r\n    if (draggingRef.current) return;\r\n    if (performance.now() - lastDragEndAt.current < 80) return;\r\n    if (openingRef.current) return;\r\n    openItemFromElement(e.currentTarget);\r\n  }, []);\r\n\r\n  const onTileTouchEnd = useCallback((e: React.TouchEvent<HTMLDivElement>) => {\r\n    if (draggingRef.current) return;\r\n    if (performance.now() - lastDragEndAt.current < 80) return;\r\n    if (openingRef.current) return;\r\n    openItemFromElement(e.currentTarget);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const scrim = scrimRef.current;\r\n    if (!scrim) return;\r\n\r\n    const close = () => {\r\n      if (performance.now() - openStartedAtRef.current < 250) return;\r\n\r\n      const el = focusedElRef.current;\r\n      if (!el) return;\r\n      const parent = el.parentElement as HTMLElement;\r\n      const overlay = viewerRef.current?.querySelector('.enlarge') as HTMLElement | null;\r\n      if (!overlay) return;\r\n\r\n      const refDiv = parent.querySelector('.item__image--reference') as HTMLElement | null;\r\n\r\n      const originalPos = originalTilePositionRef.current;\r\n      if (!originalPos) {\r\n        overlay.remove();\r\n        if (refDiv) refDiv.remove();\r\n        parent.style.setProperty('--rot-y-delta', `0deg`);\r\n        parent.style.setProperty('--rot-x-delta', `0deg`);\r\n        el.style.visibility = '';\r\n        (el.style as any).zIndex = 0;\r\n        focusedElRef.current = null;\r\n        rootRef.current?.removeAttribute('data-enlarging');\r\n        openingRef.current = false;\r\n        unlockScroll();\r\n        return;\r\n      }\r\n\r\n      const currentRect = overlay.getBoundingClientRect();\r\n      const rootRect = rootRef.current!.getBoundingClientRect();\r\n\r\n      const originalPosRelativeToRoot = {\r\n        left: originalPos.left - rootRect.left,\r\n        top: originalPos.top - rootRect.top,\r\n        width: originalPos.width,\r\n        height: originalPos.height\r\n      };\r\n\r\n      const overlayRelativeToRoot = {\r\n        left: currentRect.left - rootRect.left,\r\n        top: currentRect.top - rootRect.top,\r\n        width: currentRect.width,\r\n        height: currentRect.height\r\n      };\r\n\r\n      const animatingOverlay = document.createElement('div');\r\n      animatingOverlay.className = 'enlarge-closing';\r\n      animatingOverlay.style.cssText = `\r\n        position: absolute;\r\n        left: ${overlayRelativeToRoot.left}px;\r\n        top: ${overlayRelativeToRoot.top}px;\r\n        width: ${overlayRelativeToRoot.width}px;\r\n        height: ${overlayRelativeToRoot.height}px;\r\n        z-index: 9999;\r\n        border-radius: var(--enlarge-radius, 32px);\r\n        overflow: hidden;\r\n        box-shadow: 0 10px 30px rgba(0,0,0,.35);\r\n        transition: all ${enlargeTransitionMs}ms ease-out;\r\n        pointer-events: none;\r\n        margin: 0;\r\n        transform: none;\r\n      `;\r\n\r\n      const originalImg = overlay.querySelector('img');\r\n      if (originalImg) {\r\n        const img = originalImg.cloneNode() as HTMLImageElement;\r\n        img.style.cssText = 'width: 100%; height: 100%; object-fit: cover;';\r\n        animatingOverlay.appendChild(img);\r\n      }\r\n\r\n      overlay.remove();\r\n      rootRef.current!.appendChild(animatingOverlay);\r\n\r\n      void animatingOverlay.getBoundingClientRect();\r\n\r\n      requestAnimationFrame(() => {\r\n        animatingOverlay.style.left = originalPosRelativeToRoot.left + 'px';\r\n        animatingOverlay.style.top = originalPosRelativeToRoot.top + 'px';\r\n        animatingOverlay.style.width = originalPosRelativeToRoot.width + 'px';\r\n        animatingOverlay.style.height = originalPosRelativeToRoot.height + 'px';\r\n        animatingOverlay.style.opacity = '0';\r\n      });\r\n\r\n      const cleanup = () => {\r\n        animatingOverlay.remove();\r\n        originalTilePositionRef.current = null;\r\n\r\n        if (refDiv) refDiv.remove();\r\n        parent.style.transition = 'none';\r\n        el.style.transition = 'none';\r\n\r\n        parent.style.setProperty('--rot-y-delta', `0deg`);\r\n        parent.style.setProperty('--rot-x-delta', `0deg`);\r\n\r\n        requestAnimationFrame(() => {\r\n          el.style.visibility = '';\r\n          el.style.opacity = '0';\r\n          (el.style as any).zIndex = 0;\r\n          focusedElRef.current = null;\r\n          rootRef.current?.removeAttribute('data-enlarging');\r\n\r\n          requestAnimationFrame(() => {\r\n            parent.style.transition = '';\r\n            el.style.transition = 'opacity 300ms ease-out';\r\n\r\n            requestAnimationFrame(() => {\r\n              el.style.opacity = '1';\r\n              setTimeout(() => {\r\n                el.style.transition = '';\r\n                el.style.opacity = '';\r\n                openingRef.current = false;\r\n                if (!draggingRef.current && rootRef.current?.getAttribute('data-enlarging') !== 'true') {\r\n                  document.body.classList.remove('dg-scroll-lock');\r\n                }\r\n              }, 300);\r\n            });\r\n          });\r\n        });\r\n      };\r\n\r\n      animatingOverlay.addEventListener('transitionend', cleanup, {\r\n        once: true\r\n      });\r\n    };\r\n\r\n    scrim.addEventListener('click', close);\r\n    const onKey = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape') close();\r\n    };\r\n    window.addEventListener('keydown', onKey);\r\n\r\n    return () => {\r\n      scrim.removeEventListener('click', close);\r\n      window.removeEventListener('keydown', onKey);\r\n    };\r\n  }, [enlargeTransitionMs, unlockScroll]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      document.body.classList.remove('dg-scroll-lock');\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={rootRef}\r\n      className=\"sphere-root\"\r\n      style={\r\n        {\r\n          ['--segments-x' as any]: segments,\r\n          ['--segments-y' as any]: segments,\r\n          ['--overlay-blur-color' as any]: overlayBlurColor,\r\n          ['--tile-radius' as any]: imageBorderRadius,\r\n          ['--enlarge-radius' as any]: openedImageBorderRadius,\r\n          ['--image-filter' as any]: grayscale ? 'grayscale(1)' : 'none'\r\n        } as React.CSSProperties\r\n      }\r\n    >\r\n      <main ref={mainRef} className=\"sphere-main\">\r\n        <div className=\"stage\">\r\n          <div ref={sphereRef} className=\"sphere\">\r\n            {items.map((it, i) => (\r\n              <div\r\n                key={`${it.x},${it.y},${i}`}\r\n                className=\"item\"\r\n                data-src={it.src}\r\n                data-offset-x={it.x}\r\n                data-offset-y={it.y}\r\n                data-size-x={it.sizeX}\r\n                data-size-y={it.sizeY}\r\n                style={\r\n                  {\r\n                    ['--offset-x' as any]: it.x,\r\n                    ['--offset-y' as any]: it.y,\r\n                    ['--item-size-x' as any]: it.sizeX,\r\n                    ['--item-size-y' as any]: it.sizeY\r\n                  } as React.CSSProperties\r\n                }\r\n              >\r\n                <div\r\n                  className=\"item__image\"\r\n                  role=\"button\"\r\n                  tabIndex={0}\r\n                  aria-label={it.alt || 'Open image'}\r\n                  onClick={onTileClick}\r\n                  onPointerUp={onTilePointerUp}\r\n                  onTouchEnd={onTileTouchEnd}\r\n                >\r\n                  <img src={it.src} draggable={false} alt={it.alt} />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"overlay\" />\r\n        <div className=\"overlay overlay--blur\" />\r\n        <div className=\"edge-fade edge-fade--top\" />\r\n        <div className=\"edge-fade edge-fade--bottom\" />\r\n\r\n        <div className=\"viewer\" ref={viewerRef}>\r\n          <div ref={scrimRef} className=\"scrim\" />\r\n          <div ref={frameRef} className=\"frame\" />\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/ts/default/src/ts-default/Components/DomeGallery/DomeGallery.css",
      "content": ".sphere-root {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  --radius: 520px;\r\n  --viewer-pad: 72px;\r\n  --circ: calc(var(--radius) * 3.14);\r\n  --rot-y: calc((360deg / var(--segments-x)) / 2);\r\n  --rot-x: calc((360deg / var(--segments-y)) / 2);\r\n  --item-width: calc(var(--circ) / var(--segments-x));\r\n  --item-height: calc(var(--circ) / var(--segments-y));\r\n}\r\n\r\n.sphere-root * {\r\n  box-sizing: border-box;\r\n}\r\n\r\n.sphere,\r\n.item,\r\n.item__image {\r\n  transform-style: preserve-3d;\r\n}\r\n\r\nmain.sphere-main {\r\n  position: absolute;\r\n  inset: 0;\r\n  display: grid;\r\n  place-items: center;\r\n  overflow: hidden;\r\n  touch-action: none;\r\n  user-select: none;\r\n  -webkit-user-select: none;\r\n  background: transparent;\r\n}\r\n\r\n.stage {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: grid;\r\n  place-items: center;\r\n  perspective: calc(var(--radius) * 2);\r\n  perspective-origin: 50% 50%;\r\n  contain: layout paint size;\r\n}\r\n\r\n.sphere {\r\n  transform: translateZ(calc(var(--radius) * -1));\r\n  will-change: transform;\r\n}\r\n\r\n.overlay,\r\n.overlay--blur {\r\n  position: absolute;\r\n  inset: 0;\r\n  margin: auto;\r\n  z-index: 3;\r\n  pointer-events: none;\r\n}\r\n\r\n.overlay {\r\n  background-image: radial-gradient(rgba(235, 235, 235, 0) 65%, var(--overlay-blur-color, #060010) 100%);\r\n}\r\n\r\n.overlay--blur {\r\n  -webkit-mask-image: radial-gradient(rgba(235, 235, 235, 0) 70%, var(--overlay-blur-color, #060010) 90%);\r\n  mask-image: radial-gradient(rgba(235, 235, 235, 0) 70%, var(--overlay-blur-color, #060010) 90%);\r\n  backdrop-filter: blur(3px);\r\n}\r\n\r\n.item {\r\n  width: calc(var(--item-width) * var(--item-size-x));\r\n  height: calc(var(--item-height) * var(--item-size-y));\r\n  position: absolute;\r\n  top: -999px;\r\n  bottom: -999px;\r\n  left: -999px;\r\n  right: -999px;\r\n  margin: auto;\r\n  transform-origin: 50% 50%;\r\n  backface-visibility: hidden;\r\n  transition: transform 300ms;\r\n  transform: rotateY(calc(var(--rot-y) * (var(--offset-x) + ((var(--item-size-x) - 1) / 2)) + var(--rot-y-delta, 0deg)))\r\n    rotateX(calc(var(--rot-x) * (var(--offset-y) - ((var(--item-size-y) - 1) / 2)) + var(--rot-x-delta, 0deg)))\r\n    translateZ(var(--radius));\r\n}\r\n\r\n.item__image {\r\n  position: absolute;\r\n  display: block;\r\n  inset: 10px;\r\n  border-radius: var(--tile-radius, 12px);\r\n  background: transparent;\r\n  overflow: hidden;\r\n  backface-visibility: hidden;\r\n  transition: transform 300ms;\r\n  cursor: pointer;\r\n  -webkit-tap-highlight-color: transparent;\r\n  touch-action: manipulation;\r\n  pointer-events: auto;\r\n  -webkit-transform: translateZ(0);\r\n  transform: translateZ(0);\r\n}\r\n\r\n.item__image:focus {\r\n  outline: none;\r\n}\r\n\r\n.item__image img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  pointer-events: none;\r\n  backface-visibility: hidden;\r\n  filter: var(--image-filter, none);\r\n}\r\n\r\n.viewer {\r\n  position: absolute;\r\n  inset: 0;\r\n  z-index: 20;\r\n  pointer-events: none;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: var(--viewer-pad);\r\n}\r\n\r\n.viewer .frame {\r\n  height: 100%;\r\n  aspect-ratio: 1;\r\n  border-radius: var(--enlarge-radius, 32px);\r\n  display: flex;\r\n}\r\n\r\n@media (max-aspect-ratio: 1/1) {\r\n  .viewer .frame {\r\n    height: auto;\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n.viewer .scrim {\r\n  position: absolute;\r\n  inset: 0;\r\n  z-index: 10;\r\n  background: rgba(0, 0, 0, 0.4);\r\n  pointer-events: none;\r\n  opacity: 0;\r\n  transition: opacity 500ms ease;\r\n  backdrop-filter: blur(3px);\r\n}\r\n\r\n.sphere-root[data-enlarging='true'] .viewer .scrim {\r\n  opacity: 1;\r\n  pointer-events: all;\r\n}\r\n\r\n.viewer .enlarge {\r\n  position: absolute;\r\n  z-index: 30;\r\n  border-radius: var(--enlarge-radius, 32px);\r\n  overflow: hidden;\r\n  transition:\r\n    transform 500ms ease,\r\n    opacity 500ms ease;\r\n  transform-origin: top left;\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.35);\r\n}\r\n\r\n.viewer .enlarge img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  filter: var(--image-filter, none);\r\n}\r\n\r\n.sphere-root .enlarge-closing img {\r\n  filter: var(--image-filter, none);\r\n}\r\n\r\n.edge-fade {\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  height: 120px;\r\n  z-index: 5;\r\n  pointer-events: none;\r\n  background: linear-gradient(to bottom, transparent, var(--overlay-blur-color, #060010));\r\n}\r\n\r\n.edge-fade--top {\r\n  top: 0;\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.edge-fade--bottom {\r\n  bottom: 0;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}