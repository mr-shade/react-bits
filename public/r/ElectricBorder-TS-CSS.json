{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ElectricBorder-TS-CSS",
  "type": "registry:block",
  "title": "ElectricBorder",
  "description": "Jittery electric energy border with animated arcs, glow and adjustable intensity.",
  "files": [
    {
      "path": "public/ts/default/src/ts-default/Animations/ElectricBorder/ElectricBorder.tsx",
      "content": "import React, { CSSProperties, PropsWithChildren, useEffect, useId, useLayoutEffect, useRef } from 'react';\r\n\r\nimport './ElectricBorder.css';\r\n\r\ntype ElectricBorderProps = PropsWithChildren<{\r\n  color?: string;\r\n  speed?: number;\r\n  chaos?: number;\r\n  thickness?: number;\r\n  className?: string;\r\n  style?: CSSProperties;\r\n}>;\r\n\r\nconst ElectricBorder: React.FC<ElectricBorderProps> = ({\r\n  children,\r\n  color = '#5227FF',\r\n  speed = 1,\r\n  chaos = 1,\r\n  thickness = 2,\r\n  className,\r\n  style\r\n}: ElectricBorderProps) => {\r\n  const rawId = useId().replace(/[:]/g, '');\r\n  const filterId = `turbulent-displace-${rawId}`;\r\n  const svgRef = useRef<SVGSVGElement | null>(null);\r\n  const rootRef = useRef<HTMLDivElement | null>(null);\r\n  const strokeRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const updateAnim = () => {\r\n    const svg = svgRef.current;\r\n    const host = rootRef.current;\r\n    if (!svg || !host) return;\r\n\r\n    if (strokeRef.current) {\r\n      strokeRef.current.style.filter = `url(#${filterId})`;\r\n    }\r\n\r\n    const width = Math.max(1, Math.round(host.clientWidth || host.getBoundingClientRect().width || 0));\r\n    const height = Math.max(1, Math.round(host.clientHeight || host.getBoundingClientRect().height || 0));\r\n\r\n    const dyAnims = Array.from(svg.querySelectorAll<SVGAnimateElement>('feOffset > animate[attributeName=\"dy\"]'));\r\n    if (dyAnims.length >= 2) {\r\n      dyAnims[0].setAttribute('values', `${height}; 0`);\r\n      dyAnims[1].setAttribute('values', `0; -${height}`);\r\n    }\r\n\r\n    const dxAnims = Array.from(svg.querySelectorAll<SVGAnimateElement>('feOffset > animate[attributeName=\"dx\"]'));\r\n    if (dxAnims.length >= 2) {\r\n      dxAnims[0].setAttribute('values', `${width}; 0`);\r\n      dxAnims[1].setAttribute('values', `0; -${width}`);\r\n    }\r\n\r\n    const baseDur = 6;\r\n    const dur = Math.max(0.001, baseDur / (speed || 1));\r\n    [...dyAnims, ...dxAnims].forEach(a => a.setAttribute('dur', `${dur}s`));\r\n\r\n    const disp = svg.querySelector('feDisplacementMap');\r\n    if (disp) disp.setAttribute('scale', String(30 * (chaos || 1)));\r\n\r\n    const filterEl = svg.querySelector<SVGFilterElement>(`#${CSS.escape(filterId)}`);\r\n    if (filterEl) {\r\n      filterEl.setAttribute('x', '-200%');\r\n      filterEl.setAttribute('y', '-200%');\r\n      filterEl.setAttribute('width', '500%');\r\n      filterEl.setAttribute('height', '500%');\r\n    }\r\n\r\n    requestAnimationFrame(() => {\r\n      [...dyAnims, ...dxAnims].forEach((a: any) => {\r\n        if (typeof a.beginElement === 'function') {\r\n          try {\r\n            a.beginElement();\r\n          } catch {}\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateAnim();\r\n  }, [speed, chaos]);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!rootRef.current) return;\r\n    const ro = new ResizeObserver(() => updateAnim());\r\n    ro.observe(rootRef.current);\r\n    updateAnim();\r\n    return () => ro.disconnect();\r\n  }, []);\r\n\r\n  const vars: CSSProperties = {\r\n    ['--electric-border-color' as any]: color,\r\n    ['--eb-border-width' as any]: `${thickness}px`\r\n  };\r\n\r\n  return (\r\n    <div ref={rootRef} className={`electric-border ${className ?? ''}`} style={{ ...vars, ...style }}>\r\n      <svg ref={svgRef} className=\"eb-svg\" aria-hidden focusable=\"false\">\r\n        <defs>\r\n          <filter id={filterId} colorInterpolationFilters=\"sRGB\" x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\r\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise1\" seed=\"1\" />\r\n            <feOffset in=\"noise1\" dx=\"0\" dy=\"0\" result=\"offsetNoise1\">\r\n              <animate attributeName=\"dy\" values=\"700; 0\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\r\n            </feOffset>\r\n\r\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise2\" seed=\"1\" />\r\n            <feOffset in=\"noise2\" dx=\"0\" dy=\"0\" result=\"offsetNoise2\">\r\n              <animate attributeName=\"dy\" values=\"0; -700\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\r\n            </feOffset>\r\n\r\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise1\" seed=\"2\" />\r\n            <feOffset in=\"noise1\" dx=\"0\" dy=\"0\" result=\"offsetNoise3\">\r\n              <animate attributeName=\"dx\" values=\"490; 0\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\r\n            </feOffset>\r\n\r\n            <feTurbulence type=\"turbulence\" baseFrequency=\"0.02\" numOctaves=\"10\" result=\"noise2\" seed=\"2\" />\r\n            <feOffset in=\"noise2\" dx=\"0\" dy=\"0\" result=\"offsetNoise4\">\r\n              <animate attributeName=\"dx\" values=\"0; -490\" dur=\"6s\" repeatCount=\"indefinite\" calcMode=\"linear\" />\r\n            </feOffset>\r\n\r\n            <feComposite in=\"offsetNoise1\" in2=\"offsetNoise2\" result=\"part1\" />\r\n            <feComposite in=\"offsetNoise3\" in2=\"offsetNoise4\" result=\"part2\" />\r\n            <feBlend in=\"part1\" in2=\"part2\" mode=\"color-dodge\" result=\"combinedNoise\" />\r\n            <feDisplacementMap\r\n              in=\"SourceGraphic\"\r\n              in2=\"combinedNoise\"\r\n              scale=\"30\"\r\n              xChannelSelector=\"R\"\r\n              yChannelSelector=\"B\"\r\n            />\r\n          </filter>\r\n        </defs>\r\n      </svg>\r\n\r\n      <div className=\"eb-layers\">\r\n        <div ref={strokeRef} className=\"eb-stroke\" />\r\n        <div className=\"eb-glow-1\" />\r\n        <div className=\"eb-glow-2\" />\r\n        <div className=\"eb-background-glow\" />\r\n      </div>\r\n\r\n      <div className=\"eb-content\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ElectricBorder;\r\n",
      "type": "registry:component"
    },
    {
      "path": "public/ts/default/src/ts-default/Animations/ElectricBorder/ElectricBorder.css",
      "content": ".electric-border {\r\n  --electric-light-color: oklch(from var(--electric-border-color) l c h);\r\n  --eb-border-width: 2px;\r\n  position: relative;\r\n  border-radius: inherit;\r\n  overflow: visible;\r\n  isolation: isolate;\r\n}\r\n\r\n.eb-svg {\r\n  position: fixed;\r\n  left: -10000px;\r\n  top: -10000px;\r\n  width: 10px;\r\n  height: 10px;\r\n  opacity: 0.001;\r\n  pointer-events: none;\r\n}\r\n\r\n.eb-content {\r\n  position: relative;\r\n  border-radius: inherit;\r\n  z-index: 1;\r\n}\r\n\r\n.eb-layers {\r\n  position: absolute;\r\n  inset: 0;\r\n  border-radius: inherit;\r\n  pointer-events: none;\r\n  z-index: 2;\r\n}\r\n\r\n.eb-stroke,\r\n.eb-glow-1,\r\n.eb-glow-2,\r\n.eb-overlay-1,\r\n.eb-overlay-2,\r\n.eb-background-glow {\r\n  position: absolute;\r\n  inset: 0;\r\n  border-radius: inherit;\r\n  pointer-events: none;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.eb-stroke {\r\n  border: var(--eb-border-width) solid var(--electric-border-color);\r\n}\r\n\r\n.eb-glow-1 {\r\n  border: var(--eb-border-width) solid oklch(from var(--electric-border-color) l c h / 0.6);\r\n  opacity: 0.5;\r\n  filter: blur(calc(0.5px + (var(--eb-border-width) * 0.25)));\r\n}\r\n\r\n.eb-glow-2 {\r\n  border: var(--eb-border-width) solid var(--electric-light-color);\r\n  opacity: 0.5;\r\n  filter: blur(calc(2px + (var(--eb-border-width) * 0.5)));\r\n}\r\n\r\n.eb-background-glow {\r\n  z-index: -1;\r\n  transform: scale(1.08);\r\n  filter: blur(32px);\r\n  opacity: 0.3;\r\n  background: linear-gradient(-30deg, var(--electric-light-color), transparent, var(--electric-border-color));\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}